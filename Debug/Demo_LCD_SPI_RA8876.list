
Demo_LCD_SPI_RA8876.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008608  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007f18  08008714  08008714  00018714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801062c  0801062c  00030124  2**0
                  CONTENTS
  4 .ARM          00000000  0801062c  0801062c  00030124  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801062c  0801062c  00030124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801062c  0801062c  0002062c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010630  08010630  00020630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  08010634  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  20000124  08010758  00030124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  08010758  00030554  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030124  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003014d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001166d  00000000  00000000  00030190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002640  00000000  00000000  000417fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ce8  00000000  00000000  00043e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001607  00000000  00000000  00045b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001961a  00000000  00000000  0004712f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015f7d  00000000  00000000  00060749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000901b4  00000000  00000000  000766c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000083d8  00000000  00000000  0010687c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0010ec54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000124 	.word	0x20000124
 8000128:	00000000 	.word	0x00000000
 800012c:	080086fc 	.word	0x080086fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000128 	.word	0x20000128
 8000148:	080086fc 	.word	0x080086fc

0800014c <SSD2828_Reset>:
#include "main.h"
#include "2828.h"
#include "RA8876.h"
void SSD2828_Reset(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSD2828_RST_GPIO_Port, SSD2828_RST_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000156:	4810      	ldr	r0, [pc, #64]	; (8000198 <SSD2828_Reset+0x4c>)
 8000158:	f006 f8b3 	bl	80062c2 <HAL_GPIO_WritePin>
	delay_ms(30);
 800015c:	201e      	movs	r0, #30
 800015e:	f002 f9a8 	bl	80024b2 <delay_ms>
	HAL_GPIO_WritePin(SSD2828_RST_GPIO_Port, SSD2828_RST_Pin, GPIO_PIN_SET);
 8000162:	2201      	movs	r2, #1
 8000164:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000168:	480b      	ldr	r0, [pc, #44]	; (8000198 <SSD2828_Reset+0x4c>)
 800016a:	f006 f8aa 	bl	80062c2 <HAL_GPIO_WritePin>
	delay_ms(50);
 800016e:	2032      	movs	r0, #50	; 0x32
 8000170:	f002 f99f 	bl	80024b2 <delay_ms>
	HAL_GPIO_WritePin(SSD2828_CS_GPIO_Port, SSD2828_CS_Pin, GPIO_PIN_SET);
 8000174:	2201      	movs	r2, #1
 8000176:	f44f 7180 	mov.w	r1, #256	; 0x100
 800017a:	4807      	ldr	r0, [pc, #28]	; (8000198 <SSD2828_Reset+0x4c>)
 800017c:	f006 f8a1 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD2828_SCK_GPIO_Port, SSD2828_SCK_Pin, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	2180      	movs	r1, #128	; 0x80
 8000184:	4804      	ldr	r0, [pc, #16]	; (8000198 <SSD2828_Reset+0x4c>)
 8000186:	f006 f89c 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD2828_SDO_GPIO_Port, SSD2828_SDO_Pin, GPIO_PIN_SET);
 800018a:	2201      	movs	r2, #1
 800018c:	2180      	movs	r1, #128	; 0x80
 800018e:	4803      	ldr	r0, [pc, #12]	; (800019c <SSD2828_Reset+0x50>)
 8000190:	f006 f897 	bl	80062c2 <HAL_GPIO_WritePin>
}
 8000194:	bf00      	nop
 8000196:	bd80      	pop	{r7, pc}
 8000198:	40010800 	.word	0x40010800
 800019c:	40011000 	.word	0x40011000

080001a0 <SPI_3W_SET_Cmd>:

void SPI_3W_SET_Cmd(unsigned int Sdata)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b084      	sub	sp, #16
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	unsigned char i;
	HAL_GPIO_WritePin(SSD2828_CS_GPIO_Port, SSD2828_CS_Pin, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ae:	4823      	ldr	r0, [pc, #140]	; (800023c <SPI_3W_SET_Cmd+0x9c>)
 80001b0:	f006 f887 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD2828_SDO_GPIO_Port, SSD2828_SDO_Pin, GPIO_PIN_RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2180      	movs	r1, #128	; 0x80
 80001b8:	4821      	ldr	r0, [pc, #132]	; (8000240 <SPI_3W_SET_Cmd+0xa0>)
 80001ba:	f006 f882 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD2828_SCK_GPIO_Port, SSD2828_SCK_Pin, GPIO_PIN_RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	2180      	movs	r1, #128	; 0x80
 80001c2:	481e      	ldr	r0, [pc, #120]	; (800023c <SPI_3W_SET_Cmd+0x9c>)
 80001c4:	f006 f87d 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD2828_SCK_GPIO_Port, SSD2828_SCK_Pin, GPIO_PIN_SET);
 80001c8:	2201      	movs	r2, #1
 80001ca:	2180      	movs	r1, #128	; 0x80
 80001cc:	481b      	ldr	r0, [pc, #108]	; (800023c <SPI_3W_SET_Cmd+0x9c>)
 80001ce:	f006 f878 	bl	80062c2 <HAL_GPIO_WritePin>

	for(i=8; i>0; i--) {
 80001d2:	2308      	movs	r3, #8
 80001d4:	73fb      	strb	r3, [r7, #15]
 80001d6:	e01f      	b.n	8000218 <SPI_3W_SET_Cmd+0x78>
		if(Sdata&0x80)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d005      	beq.n	80001ee <SPI_3W_SET_Cmd+0x4e>
			HAL_GPIO_WritePin(SSD2828_SDO_GPIO_Port, SSD2828_SDO_Pin, GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	2180      	movs	r1, #128	; 0x80
 80001e6:	4816      	ldr	r0, [pc, #88]	; (8000240 <SPI_3W_SET_Cmd+0xa0>)
 80001e8:	f006 f86b 	bl	80062c2 <HAL_GPIO_WritePin>
 80001ec:	e004      	b.n	80001f8 <SPI_3W_SET_Cmd+0x58>
		else
			HAL_GPIO_WritePin(SSD2828_SDO_GPIO_Port, SSD2828_SDO_Pin, GPIO_PIN_RESET);
 80001ee:	2200      	movs	r2, #0
 80001f0:	2180      	movs	r1, #128	; 0x80
 80001f2:	4813      	ldr	r0, [pc, #76]	; (8000240 <SPI_3W_SET_Cmd+0xa0>)
 80001f4:	f006 f865 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SSD2828_SCK_GPIO_Port, SSD2828_SCK_Pin, GPIO_PIN_RESET);
 80001f8:	2200      	movs	r2, #0
 80001fa:	2180      	movs	r1, #128	; 0x80
 80001fc:	480f      	ldr	r0, [pc, #60]	; (800023c <SPI_3W_SET_Cmd+0x9c>)
 80001fe:	f006 f860 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SSD2828_SCK_GPIO_Port, SSD2828_SCK_Pin, GPIO_PIN_SET);
 8000202:	2201      	movs	r2, #1
 8000204:	2180      	movs	r1, #128	; 0x80
 8000206:	480d      	ldr	r0, [pc, #52]	; (800023c <SPI_3W_SET_Cmd+0x9c>)
 8000208:	f006 f85b 	bl	80062c2 <HAL_GPIO_WritePin>
		Sdata <<= 1;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	005b      	lsls	r3, r3, #1
 8000210:	607b      	str	r3, [r7, #4]
	for(i=8; i>0; i--) {
 8000212:	7bfb      	ldrb	r3, [r7, #15]
 8000214:	3b01      	subs	r3, #1
 8000216:	73fb      	strb	r3, [r7, #15]
 8000218:	7bfb      	ldrb	r3, [r7, #15]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d1dc      	bne.n	80001d8 <SPI_3W_SET_Cmd+0x38>
	}
	HAL_GPIO_WritePin(SSD2828_SCK_GPIO_Port, SSD2828_SCK_Pin, GPIO_PIN_RESET);
 800021e:	2200      	movs	r2, #0
 8000220:	2180      	movs	r1, #128	; 0x80
 8000222:	4806      	ldr	r0, [pc, #24]	; (800023c <SPI_3W_SET_Cmd+0x9c>)
 8000224:	f006 f84d 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD2828_CS_GPIO_Port, SSD2828_CS_Pin, GPIO_PIN_SET);
 8000228:	2201      	movs	r2, #1
 800022a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800022e:	4803      	ldr	r0, [pc, #12]	; (800023c <SPI_3W_SET_Cmd+0x9c>)
 8000230:	f006 f847 	bl	80062c2 <HAL_GPIO_WritePin>
}
 8000234:	bf00      	nop
 8000236:	3710      	adds	r7, #16
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	40010800 	.word	0x40010800
 8000240:	40011000 	.word	0x40011000

08000244 <SPI_3W_SET_PAs>:

void SPI_3W_SET_PAs(unsigned int Sdata)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
	unsigned char i;
	HAL_GPIO_WritePin(SSD2828_CS_GPIO_Port, SSD2828_CS_Pin, GPIO_PIN_RESET);
 800024c:	2200      	movs	r2, #0
 800024e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000252:	4823      	ldr	r0, [pc, #140]	; (80002e0 <SPI_3W_SET_PAs+0x9c>)
 8000254:	f006 f835 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD2828_SDO_GPIO_Port, SSD2828_SDO_Pin, GPIO_PIN_SET);
 8000258:	2201      	movs	r2, #1
 800025a:	2180      	movs	r1, #128	; 0x80
 800025c:	4821      	ldr	r0, [pc, #132]	; (80002e4 <SPI_3W_SET_PAs+0xa0>)
 800025e:	f006 f830 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD2828_SCK_GPIO_Port, SSD2828_SCK_Pin, GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	2180      	movs	r1, #128	; 0x80
 8000266:	481e      	ldr	r0, [pc, #120]	; (80002e0 <SPI_3W_SET_PAs+0x9c>)
 8000268:	f006 f82b 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD2828_SCK_GPIO_Port, SSD2828_SCK_Pin, GPIO_PIN_SET);
 800026c:	2201      	movs	r2, #1
 800026e:	2180      	movs	r1, #128	; 0x80
 8000270:	481b      	ldr	r0, [pc, #108]	; (80002e0 <SPI_3W_SET_PAs+0x9c>)
 8000272:	f006 f826 	bl	80062c2 <HAL_GPIO_WritePin>

	for(i=8; i>0; i--) {
 8000276:	2308      	movs	r3, #8
 8000278:	73fb      	strb	r3, [r7, #15]
 800027a:	e01f      	b.n	80002bc <SPI_3W_SET_PAs+0x78>
		if(Sdata&0x80)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000282:	2b00      	cmp	r3, #0
 8000284:	d005      	beq.n	8000292 <SPI_3W_SET_PAs+0x4e>
			HAL_GPIO_WritePin(SSD2828_SDO_GPIO_Port, SSD2828_SDO_Pin, GPIO_PIN_SET);
 8000286:	2201      	movs	r2, #1
 8000288:	2180      	movs	r1, #128	; 0x80
 800028a:	4816      	ldr	r0, [pc, #88]	; (80002e4 <SPI_3W_SET_PAs+0xa0>)
 800028c:	f006 f819 	bl	80062c2 <HAL_GPIO_WritePin>
 8000290:	e004      	b.n	800029c <SPI_3W_SET_PAs+0x58>
		else
			HAL_GPIO_WritePin(SSD2828_SDO_GPIO_Port, SSD2828_SDO_Pin, GPIO_PIN_RESET);
 8000292:	2200      	movs	r2, #0
 8000294:	2180      	movs	r1, #128	; 0x80
 8000296:	4813      	ldr	r0, [pc, #76]	; (80002e4 <SPI_3W_SET_PAs+0xa0>)
 8000298:	f006 f813 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SSD2828_SCK_GPIO_Port, SSD2828_SCK_Pin, GPIO_PIN_RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	2180      	movs	r1, #128	; 0x80
 80002a0:	480f      	ldr	r0, [pc, #60]	; (80002e0 <SPI_3W_SET_PAs+0x9c>)
 80002a2:	f006 f80e 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SSD2828_SCK_GPIO_Port, SSD2828_SCK_Pin, GPIO_PIN_SET);
 80002a6:	2201      	movs	r2, #1
 80002a8:	2180      	movs	r1, #128	; 0x80
 80002aa:	480d      	ldr	r0, [pc, #52]	; (80002e0 <SPI_3W_SET_PAs+0x9c>)
 80002ac:	f006 f809 	bl	80062c2 <HAL_GPIO_WritePin>
		Sdata <<= 1;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	607b      	str	r3, [r7, #4]
	for(i=8; i>0; i--) {
 80002b6:	7bfb      	ldrb	r3, [r7, #15]
 80002b8:	3b01      	subs	r3, #1
 80002ba:	73fb      	strb	r3, [r7, #15]
 80002bc:	7bfb      	ldrb	r3, [r7, #15]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d1dc      	bne.n	800027c <SPI_3W_SET_PAs+0x38>
	}

	HAL_GPIO_WritePin(SSD2828_SCK_GPIO_Port, SSD2828_SCK_Pin, GPIO_PIN_RESET);
 80002c2:	2200      	movs	r2, #0
 80002c4:	2180      	movs	r1, #128	; 0x80
 80002c6:	4806      	ldr	r0, [pc, #24]	; (80002e0 <SPI_3W_SET_PAs+0x9c>)
 80002c8:	f005 fffb 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD2828_CS_GPIO_Port, SSD2828_CS_Pin, GPIO_PIN_SET);
 80002cc:	2201      	movs	r2, #1
 80002ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002d2:	4803      	ldr	r0, [pc, #12]	; (80002e0 <SPI_3W_SET_PAs+0x9c>)
 80002d4:	f005 fff5 	bl	80062c2 <HAL_GPIO_WritePin>
}
 80002d8:	bf00      	nop
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	40010800 	.word	0x40010800
 80002e4:	40011000 	.word	0x40011000

080002e8 <SPI_WriteData>:

	return Value;
}

void SPI_WriteData(unsigned char value)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	71fb      	strb	r3, [r7, #7]
	SPI_3W_SET_PAs(value);
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	4618      	mov	r0, r3
 80002f6:	f7ff ffa5 	bl	8000244 <SPI_3W_SET_PAs>
}
 80002fa:	bf00      	nop
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}

08000302 <SPI_WriteCmd>:

void SPI_WriteCmd(unsigned char value)
{
 8000302:	b580      	push	{r7, lr}
 8000304:	b082      	sub	sp, #8
 8000306:	af00      	add	r7, sp, #0
 8000308:	4603      	mov	r3, r0
 800030a:	71fb      	strb	r3, [r7, #7]
	SPI_3W_SET_Cmd(value);
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	4618      	mov	r0, r3
 8000310:	f7ff ff46 	bl	80001a0 <SPI_3W_SET_Cmd>
}
 8000314:	bf00      	nop
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <SSD2828_initial>:

}


void  SSD2828_initial()
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0

	SPI_WriteCmd(0xb7);
 8000320:	20b7      	movs	r0, #183	; 0xb7
 8000322:	f7ff ffee 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x50);//50=TX_CLK 70=PCLK
 8000326:	2050      	movs	r0, #80	; 0x50
 8000328:	f7ff ffde 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x00);   //Configuration Register
 800032c:	2000      	movs	r0, #0
 800032e:	f7ff ffdb 	bl	80002e8 <SPI_WriteData>

	SPI_WriteCmd(0xb8);
 8000332:	20b8      	movs	r0, #184	; 0xb8
 8000334:	f7ff ffe5 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x00);
 8000338:	2000      	movs	r0, #0
 800033a:	f7ff ffd5 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x00);   //VC(Virtual ChannelID) Control Register
 800033e:	2000      	movs	r0, #0
 8000340:	f7ff ffd2 	bl	80002e8 <SPI_WriteData>

	SPI_WriteCmd(0xb9);
 8000344:	20b9      	movs	r0, #185	; 0xb9
 8000346:	f7ff ffdc 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x00);//1=PLL disable
 800034a:	2000      	movs	r0, #0
 800034c:	f7ff ffcc 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x00);
 8000350:	2000      	movs	r0, #0
 8000352:	f7ff ffc9 	bl	80002e8 <SPI_WriteData>



 	SPI_WriteCmd(0xBA);//PLL=(TX_CLK/MS)*NS
 8000356:	20ba      	movs	r0, #186	; 0xba
 8000358:	f7ff ffd3 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x14);//14,D7-0=NS(0x01 : NS=1)
 800035c:	2014      	movs	r0, #20
 800035e:	f7ff ffc3 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x42);//42,D15-14=PLL00=62.5-125 01=126-250 10=251-500 11=501-1000  DB12-8=MS(01:MS=1)
 8000362:	2042      	movs	r0, #66	; 0x42
 8000364:	f7ff ffc0 	bl	80002e8 <SPI_WriteData>



	SPI_WriteCmd(0xBB);//LP Clock Divider LP clock = 400MHz / LPD / 8 = 480 / 8/ 8 = 7MHz
 8000368:	20bb      	movs	r0, #187	; 0xbb
 800036a:	f7ff ffca 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x03);//D5-0=LPD=0x1 C Divide by 2
 800036e:	2003      	movs	r0, #3
 8000370:	f7ff ffba 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x00);
 8000374:	2000      	movs	r0, #0
 8000376:	f7ff ffb7 	bl	80002e8 <SPI_WriteData>

	 SPI_WriteCmd(0xb9);
 800037a:	20b9      	movs	r0, #185	; 0xb9
 800037c:	f7ff ffc1 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x01);//1=PLL disable
 8000380:	2001      	movs	r0, #1
 8000382:	f7ff ffb1 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x00);
 8000386:	2000      	movs	r0, #0
 8000388:	f7ff ffae 	bl	80002e8 <SPI_WriteData>
	//MIPI lane configuration
	SPI_WriteCmd(0xDE);
 800038c:	20de      	movs	r0, #222	; 0xde
 800038e:	f7ff ffb8 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x00);//11=4LANE 10=3LANE 01=2LANE 00=1LANE
 8000392:	2000      	movs	r0, #0
 8000394:	f7ff ffa8 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x00);
 8000398:	2000      	movs	r0, #0
 800039a:	f7ff ffa5 	bl	80002e8 <SPI_WriteData>

	SPI_WriteCmd(0xc9);
 800039e:	20c9      	movs	r0, #201	; 0xc9
 80003a0:	f7ff ffaf 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x02);
 80003a4:	2002      	movs	r0, #2
 80003a6:	f7ff ff9f 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x23);   //p1: HS-Data-zero  p2: HS-Data- prepare  --> 8031 issue
 80003aa:	2023      	movs	r0, #35	; 0x23
 80003ac:	f7ff ff9c 	bl	80002e8 <SPI_WriteData>

 //    LCD_initial();



	SPI_WriteCmd(0xb7);
 80003b0:	20b7      	movs	r0, #183	; 0xb7
 80003b2:	f7ff ffa6 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x50);
 80003b6:	2050      	movs	r0, #80	; 0x50
 80003b8:	f7ff ff96 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x00);   //Configuration Register
 80003bc:	2000      	movs	r0, #0
 80003be:	f7ff ff93 	bl	80002e8 <SPI_WriteData>

	SPI_WriteCmd(0xb8);
 80003c2:	20b8      	movs	r0, #184	; 0xb8
 80003c4:	f7ff ff9d 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x00);
 80003c8:	2000      	movs	r0, #0
 80003ca:	f7ff ff8d 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x00);   //VC(Virtual ChannelID) Control Register
 80003ce:	2000      	movs	r0, #0
 80003d0:	f7ff ff8a 	bl	80002e8 <SPI_WriteData>

	SPI_WriteCmd(0xb9);
 80003d4:	20b9      	movs	r0, #185	; 0xb9
 80003d6:	f7ff ff94 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x00);//1=PLL disable
 80003da:	2000      	movs	r0, #0
 80003dc:	f7ff ff84 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x00);
 80003e0:	2000      	movs	r0, #0
 80003e2:	f7ff ff81 	bl	80002e8 <SPI_WriteData>

    SPI_WriteCmd(0xBA);//
 80003e6:	20ba      	movs	r0, #186	; 0xba
 80003e8:	f7ff ff8b 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x2d);//14,D7-0=NS(0x01 : NS=1)		 //0x25
 80003ec:	202d      	movs	r0, #45	; 0x2d
 80003ee:	f7ff ff7b 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x82);//42,D15-14=PLL00=62.5-125 01=126-250 10=251-500 11=501-1000  DB12-8=MS(01:MS=1)
 80003f2:	2082      	movs	r0, #130	; 0x82
 80003f4:	f7ff ff78 	bl	80002e8 <SPI_WriteData>


	SPI_WriteCmd(0xBB);//LP Clock Divider LP clock = 400MHz / LPD / 8 = 480 / 8/ 8 = 7MHz
 80003f8:	20bb      	movs	r0, #187	; 0xbb
 80003fa:	f7ff ff82 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x07);//D5-0=LPD=0x1 C Divide by 2
 80003fe:	2007      	movs	r0, #7
 8000400:	f7ff ff72 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x00);
 8000404:	2000      	movs	r0, #0
 8000406:	f7ff ff6f 	bl	80002e8 <SPI_WriteData>

	SPI_WriteCmd(0xb9);
 800040a:	20b9      	movs	r0, #185	; 0xb9
 800040c:	f7ff ff79 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x01);//1=PLL disable
 8000410:	2001      	movs	r0, #1
 8000412:	f7ff ff69 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x00);
 8000416:	2000      	movs	r0, #0
 8000418:	f7ff ff66 	bl	80002e8 <SPI_WriteData>

	SPI_WriteCmd(0xc9);
 800041c:	20c9      	movs	r0, #201	; 0xc9
 800041e:	f7ff ff70 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x02);
 8000422:	2002      	movs	r0, #2
 8000424:	f7ff ff60 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x23);   //p1: HS-Data-zero  p2: HS-Data- prepare  --> 8031 issue
 8000428:	2023      	movs	r0, #35	; 0x23
 800042a:	f7ff ff5d 	bl	80002e8 <SPI_WriteData>
	delay_ms(100);
 800042e:	2064      	movs	r0, #100	; 0x64
 8000430:	f002 f83f 	bl	80024b2 <delay_ms>

	SPI_WriteCmd(0xCA);
 8000434:	20ca      	movs	r0, #202	; 0xca
 8000436:	f7ff ff64 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x01);//CLK Prepare
 800043a:	2001      	movs	r0, #1
 800043c:	f7ff ff54 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x23);//Clk Zero
 8000440:	2023      	movs	r0, #35	; 0x23
 8000442:	f7ff ff51 	bl	80002e8 <SPI_WriteData>

	SPI_WriteCmd(0xCB); //local_write_reg(addr=0xCB,data=0x0510)
 8000446:	20cb      	movs	r0, #203	; 0xcb
 8000448:	f7ff ff5b 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x10); //Clk Post
 800044c:	2010      	movs	r0, #16
 800044e:	f7ff ff4b 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x05); //Clk Per
 8000452:	2005      	movs	r0, #5
 8000454:	f7ff ff48 	bl	80002e8 <SPI_WriteData>

	SPI_WriteCmd(0xCC); //local_write_reg(addr=0xCC,data=0x100A)
 8000458:	20cc      	movs	r0, #204	; 0xcc
 800045a:	f7ff ff52 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x05); //HS Trail
 800045e:	2005      	movs	r0, #5
 8000460:	f7ff ff42 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x10); //Clk Trail
 8000464:	2010      	movs	r0, #16
 8000466:	f7ff ff3f 	bl	80002e8 <SPI_WriteData>

	SPI_WriteCmd(0xD0);
 800046a:	20d0      	movs	r0, #208	; 0xd0
 800046c:	f7ff ff49 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x00);
 8000470:	2000      	movs	r0, #0
 8000472:	f7ff ff39 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x00);
 8000476:	2000      	movs	r0, #0
 8000478:	f7ff ff36 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0xa0);//HFPD 8
	SPI_WriteData(0x0c);//VFPD 10
 */


    SPI_WriteCmd(0xB1); //local_write_reg(addr=0xB2,data=0x1224)
 800047c:	20b1      	movs	r0, #177	; 0xb1
 800047e:	f7ff ff40 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(LCD_HSPW); //HSA
 8000482:	2018      	movs	r0, #24
 8000484:	f7ff ff30 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(LCD_VSPW); //VSA
 8000488:	2002      	movs	r0, #2
 800048a:	f7ff ff2d 	bl	80002e8 <SPI_WriteData>


	SPI_WriteCmd(0xB2); //local_write_reg(addr=0xB2,data=0x1224)
 800048e:	20b2      	movs	r0, #178	; 0xb2
 8000490:	f7ff ff37 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(LCD_HBPD); //HBP
 8000494:	20a0      	movs	r0, #160	; 0xa0
 8000496:	f7ff ff27 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(LCD_VBPD); //VBP
 800049a:	200a      	movs	r0, #10
 800049c:	f7ff ff24 	bl	80002e8 <SPI_WriteData>

	SPI_WriteCmd(0xB3); //local_write_reg(addr=0xB3,data=0x060C)
 80004a0:	20b3      	movs	r0, #179	; 0xb3
 80004a2:	f7ff ff2e 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(LCD_HFPD); //HFP
 80004a6:	20a0      	movs	r0, #160	; 0xa0
 80004a8:	f7ff ff1e 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(LCD_VFPD); //VFP
 80004ac:	200c      	movs	r0, #12
 80004ae:	f7ff ff1b 	bl	80002e8 <SPI_WriteData>




	SPI_WriteCmd(0xB4);//Horizontal active period 400
 80004b2:	20b4      	movs	r0, #180	; 0xb4
 80004b4:	f7ff ff25 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x90);//013F=319 02D0=72
 80004b8:	2090      	movs	r0, #144	; 0x90
 80004ba:	f7ff ff15 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x01);
 80004be:	2001      	movs	r0, #1
 80004c0:	f7ff ff12 	bl	80002e8 <SPI_WriteData>

	SPI_WriteCmd(0xB5);//Vertical active period 1280
 80004c4:	20b5      	movs	r0, #181	; 0xb5
 80004c6:	f7ff ff1c 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x00);//
 80004ca:	2000      	movs	r0, #0
 80004cc:	f7ff ff0c 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x05);
 80004d0:	2005      	movs	r0, #5
 80004d2:	f7ff ff09 	bl	80002e8 <SPI_WriteData>


	SPI_WriteCmd(0xB6);//RGB CLK  16BPP=00 18BPP=01
 80004d6:	20b6      	movs	r0, #182	; 0xb6
 80004d8:	f7ff ff13 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x0b);//D7=0 D6=0 D5=0  D1-0=11 C 24bpp	 //07
 80004dc:	200b      	movs	r0, #11
 80004de:	f7ff ff03 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0xc0);//D15=VS D14=HS D13=CLK D12-9=NC D8=0=Video with blanking packet. 00-F0
 80004e2:	20c0      	movs	r0, #192	; 0xc0
 80004e4:	f7ff ff00 	bl	80002e8 <SPI_WriteData>



	//MIPI lane configuration
	SPI_WriteCmd(0xDE);//
 80004e8:	20de      	movs	r0, #222	; 0xde
 80004ea:	f7ff ff0a 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x03);//11=4LANE 10=3LANE 01=2LANE 00=1LANE
 80004ee:	2003      	movs	r0, #3
 80004f0:	f7ff fefa 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x00);
 80004f4:	2000      	movs	r0, #0
 80004f6:	f7ff fef7 	bl	80002e8 <SPI_WriteData>

	SPI_WriteCmd(0xD6);//  05=BGR  04=RGB
 80004fa:	20d6      	movs	r0, #214	; 0xd6
 80004fc:	f7ff ff01 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x01);//D0=0=RGB 1:BGR D1=1=Most significant byte sent first
 8000500:	2001      	movs	r0, #1
 8000502:	f7ff fef1 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x00);
 8000506:	2000      	movs	r0, #0
 8000508:	f7ff feee 	bl	80002e8 <SPI_WriteData>

 	SPI_WriteCmd(0xDB);
 800050c:	20db      	movs	r0, #219	; 0xdb
 800050e:	f7ff fef8 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x58);
 8000512:	2058      	movs	r0, #88	; 0x58
 8000514:	f7ff fee8 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x00);
 8000518:	2000      	movs	r0, #0
 800051a:	f7ff fee5 	bl	80002e8 <SPI_WriteData>


	SPI_WriteCmd(0xB7);
 800051e:	20b7      	movs	r0, #183	; 0xb7
 8000520:	f7ff feef 	bl	8000302 <SPI_WriteCmd>
	SPI_WriteData(0x4B);
 8000524:	204b      	movs	r0, #75	; 0x4b
 8000526:	f7ff fedf 	bl	80002e8 <SPI_WriteData>
	SPI_WriteData(0x02);
 800052a:	2002      	movs	r0, #2
 800052c:	f7ff fedc 	bl	80002e8 <SPI_WriteData>

	SPI_WriteCmd(0x2c);
 8000530:	202c      	movs	r0, #44	; 0x2c
 8000532:	f7ff fee6 	bl	8000302 <SPI_WriteCmd>
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
	...

0800053c <BTE_Color_Expansion>:

}


void BTE_Color_Expansion(void)
{    unsigned int i,j;
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
    unsigned long im=1;
 8000542:	2301      	movs	r3, #1
 8000544:	607b      	str	r3, [r7, #4]

 	Select_Main_Window_16bpp();
 8000546:	f002 fc8c 	bl	8002e62 <Select_Main_Window_16bpp>
	Main_Image_Start_Address(0);
 800054a:	2000      	movs	r0, #0
 800054c:	f002 fea3 	bl	8003296 <Main_Image_Start_Address>
	Main_Image_Width(400);
 8000550:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000554:	f002 fec2 	bl	80032dc <Main_Image_Width>
	Main_Window_Start_XY(0,0);
 8000558:	2100      	movs	r1, #0
 800055a:	2000      	movs	r0, #0
 800055c:	f002 fed5 	bl	800330a <Main_Window_Start_XY>

	Canvas_Image_Start_address(layer1_start_addr);//Layer 1
 8000560:	2000      	movs	r0, #0
 8000562:	f003 f804 	bl	800356e <Canvas_Image_Start_address>
	Canvas_image_width(400);//
 8000566:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800056a:	f003 f823 	bl	80035b4 <Canvas_image_width>
    Active_Window_XY(0,0);
 800056e:	2100      	movs	r1, #0
 8000570:	2000      	movs	r0, #0
 8000572:	f003 f836 	bl	80035e2 <Active_Window_XY>
	Active_Window_WH(400,1280);
 8000576:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800057a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800057e:	f003 f858 	bl	8003632 <Active_Window_WH>

 	Foreground_color_65k(Black);
 8000582:	2000      	movs	r0, #0
 8000584:	f003 ff04 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,0);
 8000588:	2100      	movs	r1, #0
 800058a:	2000      	movs	r0, #0
 800058c:	f003 f905 	bl	800379a <Line_Start_XY>
	Line_End_XY(399,1247);
 8000590:	f240 41df 	movw	r1, #1247	; 0x4df
 8000594:	f240 108f 	movw	r0, #399	; 0x18f
 8000598:	f003 f92f 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 800059c:	f003 f95d 	bl	800385a <Start_Square_Fill>

	Foreground_color_65k(Blue2);
 80005a0:	f240 501f 	movw	r0, #1311	; 0x51f
 80005a4:	f003 fef4 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,1248);
 80005a8:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 80005ac:	2000      	movs	r0, #0
 80005ae:	f003 f8f4 	bl	800379a <Line_Start_XY>
	Line_End_XY(399,1279);
 80005b2:	f240 41ff 	movw	r1, #1279	; 0x4ff
 80005b6:	f240 108f 	movw	r0, #399	; 0x18f
 80005ba:	f003 f91e 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 80005be:	f003 f94c 	bl	800385a <Start_Square_Fill>


	Foreground_color_65k(White);
 80005c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80005c6:	f003 fee3 	bl	8004390 <Foreground_color_65k>
	Background_color_65k(Blue2);
 80005ca:	f240 501f 	movw	r0, #1311	; 0x51f
 80005ce:	f003 ff06 	bl	80043de <Background_color_65k>
	CGROM_Select_Internal_CGROM();
 80005d2:	f003 fdcd 	bl	8004170 <CGROM_Select_Internal_CGROM>
	Font_Select_12x24_24x24();
 80005d6:	f003 fe19 	bl	800420c <Font_Select_12x24_24x24>
	Goto_Text_XY(0,Line52);
 80005da:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 80005de:	2000      	movs	r0, #0
 80005e0:	f003 f8a7 	bl	8003732 <Goto_Text_XY>
	Show_String(" Demo BTE Color Expansion");
 80005e4:	48a5      	ldr	r0, [pc, #660]	; (800087c <BTE_Color_Expansion+0x340>)
 80005e6:	f003 ff21 	bl	800442c <Show_String>


    //DMA initial setting
	Enable_SFlash_SPI();
 80005ea:	f002 face 	bl	8002b8a <Enable_SFlash_SPI>
    Select_SFI_1();
 80005ee:	f003 fc25 	bl	8003e3c <Select_SFI_1>
    Select_SFI_DMA_Mode();
 80005f2:	f003 fc4f 	bl	8003e94 <Select_SFI_DMA_Mode>
    Select_SFI_24bit_Address();
 80005f6:	f003 fc63 	bl	8003ec0 <Select_SFI_24bit_Address>

    //Select_SFI_Waveform_Mode_0();
    Select_SFI_Waveform_Mode_3();
 80005fa:	f003 fc8d 	bl	8003f18 <Select_SFI_Waveform_Mode_3>

    //Select_SFI_0_DummyRead();	//normal read mode
    Select_SFI_8_DummyRead(); //1byte dummy cycle
 80005fe:	f003 fcb7 	bl	8003f70 <Select_SFI_8_DummyRead>
    //Select_SFI_16_DummyRead();
    //Select_SFI_24_DummyRead();

    Select_SFI_Single_Mode();
 8000602:	f003 fccf 	bl	8003fa4 <Select_SFI_Single_Mode>
    //Select_SFI_Dual_Mode0();
    //Select_SFI_Dual_Mode1();

    SPI_Clock_Period(0);
 8000606:	2000      	movs	r0, #0
 8000608:	f003 fcfc 	bl	8004004 <SPI_Clock_Period>


	SFI_DMA_Destination_Upper_Left_Corner(0,0);
 800060c:	2100      	movs	r1, #0
 800060e:	2000      	movs	r0, #0
 8000610:	f003 fd33 	bl	800407a <SFI_DMA_Destination_Upper_Left_Corner>
    SFI_DMA_Transfer_Width_Height(400,400);
 8000614:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000618:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800061c:	f003 fd5d 	bl	80040da <SFI_DMA_Transfer_Width_Height>
    SFI_DMA_Source_Width(400);//
 8000620:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000624:	f003 fd89 	bl	800413a <SFI_DMA_Source_Width>

	SFI_DMA_Source_Start_Address(im*400*1280*3);//
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4a95      	ldr	r2, [pc, #596]	; (8000880 <BTE_Color_Expansion+0x344>)
 800062c:	fb02 f303 	mul.w	r3, r2, r3
 8000630:	4618      	mov	r0, r3
 8000632:	f003 fcf7 	bl	8004024 <SFI_DMA_Source_Start_Address>
	Start_SFI_DMA();
 8000636:	f003 fbc6 	bl	8003dc6 <Start_SFI_DMA>
    Check_Busy_SFI_DMA();
 800063a:	f003 fbda 	bl	8003df2 <Check_Busy_SFI_DMA>



	//color expansion and bte memory copy(move)

  j=0;
 800063e:	2300      	movs	r3, #0
 8000640:	60bb      	str	r3, [r7, #8]
 do
 {
   for(i=0;i<3;i++)
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	e10b      	b.n	8000860 <BTE_Color_Expansion+0x324>
   {
	 //switch to layer2 update screen, and execute color expansion and copy to layer1
	 Canvas_Image_Start_address(layer2_start_addr);//
 8000648:	f44f 207a 	mov.w	r0, #1024000	; 0xfa000
 800064c:	f002 ff8f 	bl	800356e <Canvas_Image_Start_address>
 	 Foreground_color_65k(Black);
 8000650:	2000      	movs	r0, #0
 8000652:	f003 fe9d 	bl	8004390 <Foreground_color_65k>
	 Line_Start_XY(0,0);
 8000656:	2100      	movs	r1, #0
 8000658:	2000      	movs	r0, #0
 800065a:	f003 f89e 	bl	800379a <Line_Start_XY>
	 Line_End_XY(399,1247);
 800065e:	f240 41df 	movw	r1, #1247	; 0x4df
 8000662:	f240 108f 	movw	r0, #399	; 0x18f
 8000666:	f003 f8c8 	bl	80037fa <Line_End_XY>
	 Start_Square_Fill();
 800066a:	f003 f8f6 	bl	800385a <Start_Square_Fill>
	 //SFI_DMA_Source_Start_Address(640*480*2*i);//
	 Start_SFI_DMA();
 800066e:	f003 fbaa 	bl	8003dc6 <Start_SFI_DMA>
     Check_Busy_SFI_DMA();
 8000672:	f003 fbbe 	bl	8003df2 <Check_Busy_SFI_DMA>

	 BTE_S0_Color_16bpp();
 8000676:	f003 fa06 	bl	8003a86 <BTE_S0_Color_16bpp>

     BTE_S1_Color_16bpp();
 800067a:	f003 fa1e 	bl	8003aba <BTE_S1_Color_16bpp>

     BTE_Destination_Color_16bpp();
 800067e:	f003 fa3a 	bl	8003af6 <BTE_Destination_Color_16bpp>
     BTE_Destination_Memory_Start_Address(layer2_start_addr);
 8000682:	f44f 207a 	mov.w	r0, #1024000	; 0xfa000
 8000686:	f003 fb14 	bl	8003cb2 <BTE_Destination_Memory_Start_Address>
     BTE_Destination_Image_Width(400);
 800068a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800068e:	f003 fb33 	bl	8003cf8 <BTE_Destination_Image_Width>
     BTE_Destination_Window_Start_XY(0+70,0+70);
 8000692:	2146      	movs	r1, #70	; 0x46
 8000694:	2046      	movs	r0, #70	; 0x46
 8000696:	f003 fb46 	bl	8003d26 <BTE_Destination_Window_Start_XY>
     BTE_Window_Size(160,160);
 800069a:	21a0      	movs	r1, #160	; 0xa0
 800069c:	20a0      	movs	r0, #160	; 0xa0
 800069e:	f003 fb6a 	bl	8003d76 <BTE_Window_Size>
	 Foreground_color_65k(color65k_blue);
 80006a2:	201f      	movs	r0, #31
 80006a4:	f003 fe74 	bl	8004390 <Foreground_color_65k>
     Background_color_65k(color65k_red);
 80006a8:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80006ac:	f003 fe97 	bl	80043de <Background_color_65k>
	 BTE_ROP_Code(15);
 80006b0:	200f      	movs	r0, #15
 80006b2:	f003 f9ac 	bl	8003a0e <BTE_ROP_Code>
     BTE_Operation_Code(8); //BTE color expansion
 80006b6:	2008      	movs	r0, #8
 80006b8:	f003 f9c9 	bl	8003a4e <BTE_Operation_Code>

	 BTE_Enable();
 80006bc:	f003 f96a 	bl	8003994 <BTE_Enable>
	 LCD_CmdWrite(0x04);
 80006c0:	2004      	movs	r0, #4
 80006c2:	f001 ff85 	bl	80025d0 <LCD_CmdWrite>

	 switch(i)
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2b02      	cmp	r3, #2
 80006ca:	d01d      	beq.n	8000708 <BTE_Color_Expansion+0x1cc>
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	d824      	bhi.n	800071c <BTE_Color_Expansion+0x1e0>
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d003      	beq.n	80006e0 <BTE_Color_Expansion+0x1a4>
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d00a      	beq.n	80006f4 <BTE_Color_Expansion+0x1b8>
			  Show_picture1(10*160,f3);
			  Check_Mem_WR_FIFO_Empty();
	          Check_BTE_Busy();
			  break;
	   default:
			  break;
 80006de:	e01d      	b.n	800071c <BTE_Color_Expansion+0x1e0>
			  Show_picture1(10*160,f1);
 80006e0:	4968      	ldr	r1, [pc, #416]	; (8000884 <BTE_Color_Expansion+0x348>)
 80006e2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80006e6:	f003 feee 	bl	80044c6 <Show_picture1>
			  Check_Mem_WR_FIFO_Empty();
 80006ea:	f002 f9da 	bl	8002aa2 <Check_Mem_WR_FIFO_Empty>
	          Check_BTE_Busy();
 80006ee:	f003 f967 	bl	80039c0 <Check_BTE_Busy>
			  break;
 80006f2:	e014      	b.n	800071e <BTE_Color_Expansion+0x1e2>
			  Show_picture1(10*160,f2);
 80006f4:	4964      	ldr	r1, [pc, #400]	; (8000888 <BTE_Color_Expansion+0x34c>)
 80006f6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80006fa:	f003 fee4 	bl	80044c6 <Show_picture1>
			  Check_Mem_WR_FIFO_Empty();
 80006fe:	f002 f9d0 	bl	8002aa2 <Check_Mem_WR_FIFO_Empty>
	          Check_BTE_Busy();
 8000702:	f003 f95d 	bl	80039c0 <Check_BTE_Busy>
			  break;
 8000706:	e00a      	b.n	800071e <BTE_Color_Expansion+0x1e2>
			  Show_picture1(10*160,f3);
 8000708:	4960      	ldr	r1, [pc, #384]	; (800088c <BTE_Color_Expansion+0x350>)
 800070a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800070e:	f003 feda 	bl	80044c6 <Show_picture1>
			  Check_Mem_WR_FIFO_Empty();
 8000712:	f002 f9c6 	bl	8002aa2 <Check_Mem_WR_FIFO_Empty>
	          Check_BTE_Busy();
 8000716:	f003 f953 	bl	80039c0 <Check_BTE_Busy>
			  break;
 800071a:	e000      	b.n	800071e <BTE_Color_Expansion+0x1e2>
			  break;
 800071c:	bf00      	nop
	 }


		Foreground_color_65k(Black);
 800071e:	2000      	movs	r0, #0
 8000720:	f003 fe36 	bl	8004390 <Foreground_color_65k>
	Background_color_65k(White);
 8000724:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000728:	f003 fe59 	bl	80043de <Background_color_65k>
	CGROM_Select_Internal_CGROM();
 800072c:	f003 fd20 	bl	8004170 <CGROM_Select_Internal_CGROM>
	Font_Select_12x24_24x24();
 8000730:	f003 fd6c 	bl	800420c <Font_Select_12x24_24x24>
	Goto_Text_XY(0+70,0+70+160+20);
 8000734:	21fa      	movs	r1, #250	; 0xfa
 8000736:	2046      	movs	r0, #70	; 0x46
 8000738:	f002 fffb 	bl	8003732 <Goto_Text_XY>
	Show_String("Color Expansion");
 800073c:	4854      	ldr	r0, [pc, #336]	; (8000890 <BTE_Color_Expansion+0x354>)
 800073e:	f003 fe75 	bl	800442c <Show_String>



	 Foreground_color_65k(color65k_blue);
 8000742:	201f      	movs	r0, #31
 8000744:	f003 fe24 	bl	8004390 <Foreground_color_65k>
     Background_color_65k(color65k_red);
 8000748:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800074c:	f003 fe47 	bl	80043de <Background_color_65k>

	 BTE_Operation_Code(9); //BTE color expansion with chroma key
 8000750:	2009      	movs	r0, #9
 8000752:	f003 f97c 	bl	8003a4e <BTE_Operation_Code>
	 BTE_Destination_Window_Start_XY(70,460);
 8000756:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800075a:	2046      	movs	r0, #70	; 0x46
 800075c:	f003 fae3 	bl	8003d26 <BTE_Destination_Window_Start_XY>
	 BTE_Enable();
 8000760:	f003 f918 	bl	8003994 <BTE_Enable>
	 LCD_CmdWrite(0x04);
 8000764:	2004      	movs	r0, #4
 8000766:	f001 ff33 	bl	80025d0 <LCD_CmdWrite>

	 switch(i)
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	2b02      	cmp	r3, #2
 800076e:	d01d      	beq.n	80007ac <BTE_Color_Expansion+0x270>
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	2b02      	cmp	r3, #2
 8000774:	d824      	bhi.n	80007c0 <BTE_Color_Expansion+0x284>
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d003      	beq.n	8000784 <BTE_Color_Expansion+0x248>
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d00a      	beq.n	8000798 <BTE_Color_Expansion+0x25c>
			  Show_picture1(10*160,f3);
			  Check_Mem_WR_FIFO_Empty();
	          Check_BTE_Busy();
			  break;
	   default:
			  break;
 8000782:	e01d      	b.n	80007c0 <BTE_Color_Expansion+0x284>
			  Show_picture1(10*160,f1);
 8000784:	493f      	ldr	r1, [pc, #252]	; (8000884 <BTE_Color_Expansion+0x348>)
 8000786:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800078a:	f003 fe9c 	bl	80044c6 <Show_picture1>
			  Check_Mem_WR_FIFO_Empty();
 800078e:	f002 f988 	bl	8002aa2 <Check_Mem_WR_FIFO_Empty>
	          Check_BTE_Busy();
 8000792:	f003 f915 	bl	80039c0 <Check_BTE_Busy>
			  break;
 8000796:	e014      	b.n	80007c2 <BTE_Color_Expansion+0x286>
			  Show_picture1(10*160,f2);
 8000798:	493b      	ldr	r1, [pc, #236]	; (8000888 <BTE_Color_Expansion+0x34c>)
 800079a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800079e:	f003 fe92 	bl	80044c6 <Show_picture1>
			  Check_Mem_WR_FIFO_Empty();
 80007a2:	f002 f97e 	bl	8002aa2 <Check_Mem_WR_FIFO_Empty>
	          Check_BTE_Busy();
 80007a6:	f003 f90b 	bl	80039c0 <Check_BTE_Busy>
			  break;
 80007aa:	e00a      	b.n	80007c2 <BTE_Color_Expansion+0x286>
			  Show_picture1(10*160,f3);
 80007ac:	4937      	ldr	r1, [pc, #220]	; (800088c <BTE_Color_Expansion+0x350>)
 80007ae:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80007b2:	f003 fe88 	bl	80044c6 <Show_picture1>
			  Check_Mem_WR_FIFO_Empty();
 80007b6:	f002 f974 	bl	8002aa2 <Check_Mem_WR_FIFO_Empty>
	          Check_BTE_Busy();
 80007ba:	f003 f901 	bl	80039c0 <Check_BTE_Busy>
			  break;
 80007be:	e000      	b.n	80007c2 <BTE_Color_Expansion+0x286>
			  break;
 80007c0:	bf00      	nop
	 }


	Foreground_color_65k(Black);
 80007c2:	2000      	movs	r0, #0
 80007c4:	f003 fde4 	bl	8004390 <Foreground_color_65k>
	Background_color_65k(White);
 80007c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80007cc:	f003 fe07 	bl	80043de <Background_color_65k>
	CGROM_Select_Internal_CGROM();
 80007d0:	f003 fcce 	bl	8004170 <CGROM_Select_Internal_CGROM>
	Font_Select_12x24_24x24();
 80007d4:	f003 fd1a 	bl	800420c <Font_Select_12x24_24x24>
	Goto_Text_XY(70,650);
 80007d8:	f240 218a 	movw	r1, #650	; 0x28a
 80007dc:	2046      	movs	r0, #70	; 0x46
 80007de:	f002 ffa8 	bl	8003732 <Goto_Text_XY>
	Show_String("Color Expansion");
 80007e2:	482b      	ldr	r0, [pc, #172]	; (8000890 <BTE_Color_Expansion+0x354>)
 80007e4:	f003 fe22 	bl	800442c <Show_String>
	Goto_Text_XY(70,674);
 80007e8:	f240 21a2 	movw	r1, #674	; 0x2a2
 80007ec:	2046      	movs	r0, #70	; 0x46
 80007ee:	f002 ffa0 	bl	8003732 <Goto_Text_XY>
	Show_String("Color With chroma key");
 80007f2:	4828      	ldr	r0, [pc, #160]	; (8000894 <BTE_Color_Expansion+0x358>)
 80007f4:	f003 fe1a 	bl	800442c <Show_String>

  	 Foreground_color_65k(color65k_blue);
 80007f8:	201f      	movs	r0, #31
 80007fa:	f003 fdc9 	bl	8004390 <Foreground_color_65k>
     Background_color_65k(color65k_red);
 80007fe:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000802:	f003 fdec 	bl	80043de <Background_color_65k>

	   //BTE memory(move) layer2 to layer1
	   //BTE_S0_Color_16bpp();
       BTE_S0_Memory_Start_Address(layer2_start_addr);
 8000806:	f44f 207a 	mov.w	r0, #1024000	; 0xfa000
 800080a:	f003 f98e 	bl	8003b2a <BTE_S0_Memory_Start_Address>
       BTE_S0_Image_Width(400);
 800080e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000812:	f003 f9ad 	bl	8003b70 <BTE_S0_Image_Width>
       BTE_S0_Window_Start_XY(0,0);
 8000816:	2100      	movs	r1, #0
 8000818:	2000      	movs	r0, #0
 800081a:	f003 f9c0 	bl	8003b9e <BTE_S0_Window_Start_XY>

       //BTE_Destination_Color_16bpp();
       BTE_Destination_Memory_Start_Address(layer1_start_addr);
 800081e:	2000      	movs	r0, #0
 8000820:	f003 fa47 	bl	8003cb2 <BTE_Destination_Memory_Start_Address>
       BTE_Destination_Image_Width(400);
 8000824:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000828:	f003 fa66 	bl	8003cf8 <BTE_Destination_Image_Width>
       BTE_Destination_Window_Start_XY(0,0);
 800082c:	2100      	movs	r1, #0
 800082e:	2000      	movs	r0, #0
 8000830:	f003 fa79 	bl	8003d26 <BTE_Destination_Window_Start_XY>
       BTE_Window_Size(400,1247);
 8000834:	f240 41df 	movw	r1, #1247	; 0x4df
 8000838:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800083c:	f003 fa9b 	bl	8003d76 <BTE_Window_Size>

       BTE_ROP_Code(12);
 8000840:	200c      	movs	r0, #12
 8000842:	f003 f8e4 	bl	8003a0e <BTE_ROP_Code>
       BTE_Operation_Code(2); //BTE move
 8000846:	2002      	movs	r0, #2
 8000848:	f003 f901 	bl	8003a4e <BTE_Operation_Code>
       BTE_Enable();		  //memory copy s0(layer2) to layer1
 800084c:	f003 f8a2 	bl	8003994 <BTE_Enable>
       Check_BTE_Busy();
 8000850:	f003 f8b6 	bl	80039c0 <Check_BTE_Busy>


	  j++;
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	3301      	adds	r3, #1
 8000858:	60bb      	str	r3, [r7, #8]
   for(i=0;i<3;i++)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	3301      	adds	r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	2b02      	cmp	r3, #2
 8000864:	f67f aef0 	bls.w	8000648 <BTE_Color_Expansion+0x10c>
	}

   }while(j<5);
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	2b04      	cmp	r3, #4
 800086c:	f67f aee9 	bls.w	8000642 <BTE_Color_Expansion+0x106>

 			NextStep();
 8000870:	f001 fdee 	bl	8002450 <NextStep>

}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	080087a4 	.word	0x080087a4
 8000880:	00177000 	.word	0x00177000
 8000884:	0800a124 	.word	0x0800a124
 8000888:	0800ba24 	.word	0x0800ba24
 800088c:	0800c6a4 	.word	0x0800c6a4
 8000890:	080087c0 	.word	0x080087c0
 8000894:	080087d0 	.word	0x080087d0

08000898 <BTE_Pattern_Fill>:



void BTE_Pattern_Fill(void)
{	    unsigned long im=1;
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	2301      	movs	r3, #1
 80008a0:	607b      	str	r3, [r7, #4]

 	Select_Main_Window_16bpp();
 80008a2:	f002 fade 	bl	8002e62 <Select_Main_Window_16bpp>
	Main_Image_Start_Address(0);
 80008a6:	2000      	movs	r0, #0
 80008a8:	f002 fcf5 	bl	8003296 <Main_Image_Start_Address>
	Main_Image_Width(400);
 80008ac:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80008b0:	f002 fd14 	bl	80032dc <Main_Image_Width>
	Main_Window_Start_XY(0,0);
 80008b4:	2100      	movs	r1, #0
 80008b6:	2000      	movs	r0, #0
 80008b8:	f002 fd27 	bl	800330a <Main_Window_Start_XY>

	Canvas_Image_Start_address(0);//Layer 1
 80008bc:	2000      	movs	r0, #0
 80008be:	f002 fe56 	bl	800356e <Canvas_Image_Start_address>
	Canvas_image_width(400);//
 80008c2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80008c6:	f002 fe75 	bl	80035b4 <Canvas_image_width>
    Active_Window_XY(0,0);
 80008ca:	2100      	movs	r1, #0
 80008cc:	2000      	movs	r0, #0
 80008ce:	f002 fe88 	bl	80035e2 <Active_Window_XY>
	Active_Window_WH(400,1280);
 80008d2:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80008d6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80008da:	f002 feaa 	bl	8003632 <Active_Window_WH>

 	Foreground_color_65k(Black);
 80008de:	2000      	movs	r0, #0
 80008e0:	f003 fd56 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,0);
 80008e4:	2100      	movs	r1, #0
 80008e6:	2000      	movs	r0, #0
 80008e8:	f002 ff57 	bl	800379a <Line_Start_XY>
	Line_End_XY(399,1247);
 80008ec:	f240 41df 	movw	r1, #1247	; 0x4df
 80008f0:	f240 108f 	movw	r0, #399	; 0x18f
 80008f4:	f002 ff81 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 80008f8:	f002 ffaf 	bl	800385a <Start_Square_Fill>

	Foreground_color_65k(Blue2);
 80008fc:	f240 501f 	movw	r0, #1311	; 0x51f
 8000900:	f003 fd46 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,1248);
 8000904:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8000908:	2000      	movs	r0, #0
 800090a:	f002 ff46 	bl	800379a <Line_Start_XY>
	Line_End_XY(399,1279);
 800090e:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8000912:	f240 108f 	movw	r0, #399	; 0x18f
 8000916:	f002 ff70 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 800091a:	f002 ff9e 	bl	800385a <Start_Square_Fill>

	Foreground_color_65k(White);
 800091e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000922:	f003 fd35 	bl	8004390 <Foreground_color_65k>
	Background_color_65k(Blue2);
 8000926:	f240 501f 	movw	r0, #1311	; 0x51f
 800092a:	f003 fd58 	bl	80043de <Background_color_65k>
	CGROM_Select_Internal_CGROM();
 800092e:	f003 fc1f 	bl	8004170 <CGROM_Select_Internal_CGROM>
	Font_Select_12x24_24x24();
 8000932:	f003 fc6b 	bl	800420c <Font_Select_12x24_24x24>
	Goto_Text_XY(0,Line52);
 8000936:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 800093a:	2000      	movs	r0, #0
 800093c:	f002 fef9 	bl	8003732 <Goto_Text_XY>
	Show_String("Demo BTE Pattern Fill");
 8000940:	4873      	ldr	r0, [pc, #460]	; (8000b10 <BTE_Pattern_Fill+0x278>)
 8000942:	f003 fd73 	bl	800442c <Show_String>


    //DMA initial setting
	Enable_SFlash_SPI();
 8000946:	f002 f920 	bl	8002b8a <Enable_SFlash_SPI>
    Select_SFI_1();
 800094a:	f003 fa77 	bl	8003e3c <Select_SFI_1>
    Select_SFI_DMA_Mode();
 800094e:	f003 faa1 	bl	8003e94 <Select_SFI_DMA_Mode>
    Select_SFI_24bit_Address();
 8000952:	f003 fab5 	bl	8003ec0 <Select_SFI_24bit_Address>

    //Select_SFI_Waveform_Mode_0();
    Select_SFI_Waveform_Mode_3();
 8000956:	f003 fadf 	bl	8003f18 <Select_SFI_Waveform_Mode_3>

    //Select_SFI_0_DummyRead();	//normal read mode
    Select_SFI_8_DummyRead(); //1byte dummy cycle
 800095a:	f003 fb09 	bl	8003f70 <Select_SFI_8_DummyRead>
    //Select_SFI_16_DummyRead();
    //Select_SFI_24_DummyRead();

    Select_SFI_Single_Mode();
 800095e:	f003 fb21 	bl	8003fa4 <Select_SFI_Single_Mode>
    //Select_SFI_Dual_Mode0();
    //Select_SFI_Dual_Mode1();

    SPI_Clock_Period(0);
 8000962:	2000      	movs	r0, #0
 8000964:	f003 fb4e 	bl	8004004 <SPI_Clock_Period>


	SFI_DMA_Destination_Upper_Left_Corner(0,40);
 8000968:	2128      	movs	r1, #40	; 0x28
 800096a:	2000      	movs	r0, #0
 800096c:	f003 fb85 	bl	800407a <SFI_DMA_Destination_Upper_Left_Corner>
    SFI_DMA_Transfer_Width_Height(400,400);
 8000970:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000974:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000978:	f003 fbaf 	bl	80040da <SFI_DMA_Transfer_Width_Height>
    SFI_DMA_Source_Width(400);//
 800097c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000980:	f003 fbdb 	bl	800413a <SFI_DMA_Source_Width>

	SFI_DMA_Source_Start_Address(im*400*1280*2*1);//
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f44f 227a 	mov.w	r2, #1024000	; 0xfa000
 800098a:	fb02 f303 	mul.w	r3, r2, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f003 fb48 	bl	8004024 <SFI_DMA_Source_Start_Address>
	Start_SFI_DMA();
 8000994:	f003 fa17 	bl	8003dc6 <Start_SFI_DMA>
    Check_Busy_SFI_DMA();
 8000998:	f003 fa2b 	bl	8003df2 <Check_Busy_SFI_DMA>


	//write 16x16 pattern to sdram
	Pattern_Format_16X16();
 800099c:	f003 f821 	bl	80039e2 <Pattern_Format_16X16>
	Canvas_Image_Start_address(layer6_start_addr);//any layer
 80009a0:	485c      	ldr	r0, [pc, #368]	; (8000b14 <BTE_Pattern_Fill+0x27c>)
 80009a2:	f002 fde4 	bl	800356e <Canvas_Image_Start_address>
    Canvas_image_width(16);
 80009a6:	2010      	movs	r0, #16
 80009a8:	f002 fe04 	bl	80035b4 <Canvas_image_width>
    Active_Window_XY(0,0);
 80009ac:	2100      	movs	r1, #0
 80009ae:	2000      	movs	r0, #0
 80009b0:	f002 fe17 	bl	80035e2 <Active_Window_XY>
    Active_Window_WH(16,16);
 80009b4:	2110      	movs	r1, #16
 80009b6:	2010      	movs	r0, #16
 80009b8:	f002 fe3b 	bl	8003632 <Active_Window_WH>
    Goto_Pixel_XY(0,0);
 80009bc:	2100      	movs	r1, #0
 80009be:	2000      	movs	r0, #0
 80009c0:	f002 fe8f 	bl	80036e2 <Goto_Pixel_XY>
    Show_picture(16*16,pattern16x16_16bpp);
 80009c4:	4954      	ldr	r1, [pc, #336]	; (8000b18 <BTE_Pattern_Fill+0x280>)
 80009c6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80009ca:	f003 fd4f 	bl	800446c <Show_picture>

	Canvas_Image_Start_address(layer1_start_addr);//
 80009ce:	2000      	movs	r0, #0
 80009d0:	f002 fdcd 	bl	800356e <Canvas_Image_Start_address>
    Canvas_image_width(400);
 80009d4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80009d8:	f002 fdec 	bl	80035b4 <Canvas_image_width>
    Active_Window_XY(0,0);
 80009dc:	2100      	movs	r1, #0
 80009de:	2000      	movs	r0, #0
 80009e0:	f002 fdff 	bl	80035e2 <Active_Window_XY>
    Active_Window_WH(400,1280);
 80009e4:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80009e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80009ec:	f002 fe21 	bl	8003632 <Active_Window_WH>


	BTE_S0_Color_16bpp();
 80009f0:	f003 f849 	bl	8003a86 <BTE_S0_Color_16bpp>
    BTE_S0_Memory_Start_Address(layer6_start_addr);
 80009f4:	4847      	ldr	r0, [pc, #284]	; (8000b14 <BTE_Pattern_Fill+0x27c>)
 80009f6:	f003 f898 	bl	8003b2a <BTE_S0_Memory_Start_Address>
    BTE_S0_Image_Width(16);
 80009fa:	2010      	movs	r0, #16
 80009fc:	f003 f8b8 	bl	8003b70 <BTE_S0_Image_Width>

    BTE_S1_Color_16bpp();
 8000a00:	f003 f85b 	bl	8003aba <BTE_S1_Color_16bpp>
    BTE_S1_Memory_Start_Address(0);
 8000a04:	2000      	movs	r0, #0
 8000a06:	f003 f8f2 	bl	8003bee <BTE_S1_Memory_Start_Address>
    BTE_S1_Image_Width(400);
 8000a0a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a0e:	f003 f911 	bl	8003c34 <BTE_S1_Image_Width>

    BTE_Destination_Color_16bpp();
 8000a12:	f003 f870 	bl	8003af6 <BTE_Destination_Color_16bpp>
    BTE_Destination_Memory_Start_Address(layer1_start_addr);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f003 f94b 	bl	8003cb2 <BTE_Destination_Memory_Start_Address>
    BTE_Destination_Image_Width(400);
 8000a1c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a20:	f003 f96a 	bl	8003cf8 <BTE_Destination_Image_Width>

    BTE_ROP_Code(0xc);
 8000a24:	200c      	movs	r0, #12
 8000a26:	f002 fff2 	bl	8003a0e <BTE_ROP_Code>
    BTE_Operation_Code(0x06);//pattern fill
 8000a2a:	2006      	movs	r0, #6
 8000a2c:	f003 f80f 	bl	8003a4e <BTE_Operation_Code>

	BTE_S1_Window_Start_XY(0,0);
 8000a30:	2100      	movs	r1, #0
 8000a32:	2000      	movs	r0, #0
 8000a34:	f003 f915 	bl	8003c62 <BTE_S1_Window_Start_XY>
    BTE_Destination_Window_Start_XY(0,40);
 8000a38:	2128      	movs	r1, #40	; 0x28
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f003 f973 	bl	8003d26 <BTE_Destination_Window_Start_XY>
    BTE_Window_Size(300,300);
 8000a40:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000a44:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a48:	f003 f995 	bl	8003d76 <BTE_Window_Size>

    BTE_Enable();
 8000a4c:	f002 ffa2 	bl	8003994 <BTE_Enable>
    Check_BTE_Busy();
 8000a50:	f002 ffb6 	bl	80039c0 <Check_BTE_Busy>

	Foreground_color_65k(Black);
 8000a54:	2000      	movs	r0, #0
 8000a56:	f003 fc9b 	bl	8004390 <Foreground_color_65k>
	Background_color_65k(White);
 8000a5a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a5e:	f003 fcbe 	bl	80043de <Background_color_65k>
	CGROM_Select_Internal_CGROM();
 8000a62:	f003 fb85 	bl	8004170 <CGROM_Select_Internal_CGROM>
	Font_Select_12x24_24x24();
 8000a66:	f003 fbd1 	bl	800420c <Font_Select_12x24_24x24>
	Goto_Text_XY(0,350);
 8000a6a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f002 fe5f 	bl	8003732 <Goto_Text_XY>
	Show_String("Pattern Fill");
 8000a74:	4829      	ldr	r0, [pc, #164]	; (8000b1c <BTE_Pattern_Fill+0x284>)
 8000a76:	f003 fcd9 	bl	800442c <Show_String>

	Background_color_65k(color65k_red);
 8000a7a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000a7e:	f003 fcae 	bl	80043de <Background_color_65k>
	BTE_S1_Window_Start_XY(0,0);
 8000a82:	2100      	movs	r1, #0
 8000a84:	2000      	movs	r0, #0
 8000a86:	f003 f8ec 	bl	8003c62 <BTE_S1_Window_Start_XY>
    BTE_Destination_Window_Start_XY(0,440);
 8000a8a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f003 f949 	bl	8003d26 <BTE_Destination_Window_Start_XY>
    BTE_Window_Size(300,300);
 8000a94:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000a98:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a9c:	f003 f96b 	bl	8003d76 <BTE_Window_Size>
	BTE_Operation_Code(0x07);//pattern fill with chroma key
 8000aa0:	2007      	movs	r0, #7
 8000aa2:	f002 ffd4 	bl	8003a4e <BTE_Operation_Code>

	BTE_Enable();
 8000aa6:	f002 ff75 	bl	8003994 <BTE_Enable>
    Check_BTE_Busy();
 8000aaa:	f002 ff89 	bl	80039c0 <Check_BTE_Busy>

	Foreground_color_65k(Black);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f003 fc6e 	bl	8004390 <Foreground_color_65k>
	Background_color_65k(White);
 8000ab4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000ab8:	f003 fc91 	bl	80043de <Background_color_65k>
	CGROM_Select_Internal_CGROM();
 8000abc:	f003 fb58 	bl	8004170 <CGROM_Select_Internal_CGROM>
	Font_Select_12x24_24x24();
 8000ac0:	f003 fba4 	bl	800420c <Font_Select_12x24_24x24>
	Goto_Text_XY(40,750);
 8000ac4:	f240 21ee 	movw	r1, #750	; 0x2ee
 8000ac8:	2028      	movs	r0, #40	; 0x28
 8000aca:	f002 fe32 	bl	8003732 <Goto_Text_XY>
	Show_String("Pattern Fill With");
 8000ace:	4814      	ldr	r0, [pc, #80]	; (8000b20 <BTE_Pattern_Fill+0x288>)
 8000ad0:	f003 fcac 	bl	800442c <Show_String>

	Foreground_color_65k(Black);
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f003 fc5b 	bl	8004390 <Foreground_color_65k>
	Background_color_65k(White);
 8000ada:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000ade:	f003 fc7e 	bl	80043de <Background_color_65k>
	CGROM_Select_Internal_CGROM();
 8000ae2:	f003 fb45 	bl	8004170 <CGROM_Select_Internal_CGROM>
	Font_Select_12x24_24x24();
 8000ae6:	f003 fb91 	bl	800420c <Font_Select_12x24_24x24>
	Goto_Text_XY(40,774);
 8000aea:	f240 3106 	movw	r1, #774	; 0x306
 8000aee:	2028      	movs	r0, #40	; 0x28
 8000af0:	f002 fe1f 	bl	8003732 <Goto_Text_XY>
	Show_String("Chroma Key");
 8000af4:	480b      	ldr	r0, [pc, #44]	; (8000b24 <BTE_Pattern_Fill+0x28c>)
 8000af6:	f003 fc99 	bl	800442c <Show_String>
    delay_ms(1000);
 8000afa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000afe:	f001 fcd8 	bl	80024b2 <delay_ms>
  	NextStep();
 8000b02:	f001 fca5 	bl	8002450 <NextStep>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	080087e8 	.word	0x080087e8
 8000b14:	004e2000 	.word	0x004e2000
 8000b18:	08009d24 	.word	0x08009d24
 8000b1c:	08008800 	.word	0x08008800
 8000b20:	08008810 	.word	0x08008810
 8000b24:	08008824 	.word	0x08008824

08000b28 <PIP_Demo>:


void PIP_Demo(void)
{   unsigned long i;
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 	 unsigned long im=1;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	603b      	str	r3, [r7, #0]

	Select_Main_Window_16bpp();
 8000b32:	f002 f996 	bl	8002e62 <Select_Main_Window_16bpp>
	Main_Image_Start_Address(0);
 8000b36:	2000      	movs	r0, #0
 8000b38:	f002 fbad 	bl	8003296 <Main_Image_Start_Address>
	Main_Image_Width(400);
 8000b3c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b40:	f002 fbcc 	bl	80032dc <Main_Image_Width>
	Main_Window_Start_XY(0,0);
 8000b44:	2100      	movs	r1, #0
 8000b46:	2000      	movs	r0, #0
 8000b48:	f002 fbdf 	bl	800330a <Main_Window_Start_XY>

	Canvas_Image_Start_address(0);//Layer 1
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f002 fd0e 	bl	800356e <Canvas_Image_Start_address>
	Canvas_image_width(400);//
 8000b52:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b56:	f002 fd2d 	bl	80035b4 <Canvas_image_width>
    Active_Window_XY(0,0);
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f002 fd40 	bl	80035e2 <Active_Window_XY>
	Active_Window_WH(400,1280);
 8000b62:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000b66:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b6a:	f002 fd62 	bl	8003632 <Active_Window_WH>

 	Foreground_color_65k(White);
 8000b6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b72:	f003 fc0d 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,0);
 8000b76:	2100      	movs	r1, #0
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f002 fe0e 	bl	800379a <Line_Start_XY>
	Line_End_XY(399,1247);
 8000b7e:	f240 41df 	movw	r1, #1247	; 0x4df
 8000b82:	f240 108f 	movw	r0, #399	; 0x18f
 8000b86:	f002 fe38 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 8000b8a:	f002 fe66 	bl	800385a <Start_Square_Fill>

	Foreground_color_65k(Blue2);
 8000b8e:	f240 501f 	movw	r0, #1311	; 0x51f
 8000b92:	f003 fbfd 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,1248);
 8000b96:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f002 fdfd 	bl	800379a <Line_Start_XY>
	Line_End_XY(399,1279);
 8000ba0:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8000ba4:	f240 108f 	movw	r0, #399	; 0x18f
 8000ba8:	f002 fe27 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 8000bac:	f002 fe55 	bl	800385a <Start_Square_Fill>

	Foreground_color_65k(White);
 8000bb0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000bb4:	f003 fbec 	bl	8004390 <Foreground_color_65k>
	Background_color_65k(Blue2);
 8000bb8:	f240 501f 	movw	r0, #1311	; 0x51f
 8000bbc:	f003 fc0f 	bl	80043de <Background_color_65k>
	CGROM_Select_Internal_CGROM();
 8000bc0:	f003 fad6 	bl	8004170 <CGROM_Select_Internal_CGROM>
	Font_Select_12x24_24x24();
 8000bc4:	f003 fb22 	bl	800420c <Font_Select_12x24_24x24>
	Goto_Text_XY(0,Line52);
 8000bc8:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f002 fdb0 	bl	8003732 <Goto_Text_XY>
	Show_String(" Demo PIP");
 8000bd2:	48c8      	ldr	r0, [pc, #800]	; (8000ef4 <PIP_Demo+0x3cc>)
 8000bd4:	f003 fc2a 	bl	800442c <Show_String>



	 Memory_16bpp_Mode();
 8000bd8:	f002 fd69 	bl	80036ae <Memory_16bpp_Mode>
	 delay_ms(20);
 8000bdc:	2014      	movs	r0, #20
 8000bde:	f001 fc68 	bl	80024b2 <delay_ms>
	 Canvas_Image_Start_address(layer2_start_addr);//Layer 2
 8000be2:	f44f 207a 	mov.w	r0, #1024000	; 0xfa000
 8000be6:	f002 fcc2 	bl	800356e <Canvas_Image_Start_address>
	 Canvas_image_width(400);//
 8000bea:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000bee:	f002 fce1 	bl	80035b4 <Canvas_image_width>
     Active_Window_XY(0,0);
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f002 fcf4 	bl	80035e2 <Active_Window_XY>
	 Active_Window_WH(200,200);
 8000bfa:	21c8      	movs	r1, #200	; 0xc8
 8000bfc:	20c8      	movs	r0, #200	; 0xc8
 8000bfe:	f002 fd18 	bl	8003632 <Active_Window_WH>
     Goto_Pixel_XY(0,0);
 8000c02:	2100      	movs	r1, #0
 8000c04:	2000      	movs	r0, #0
 8000c06:	f002 fd6c 	bl	80036e2 <Goto_Pixel_XY>
	 LCD_CmdWrite(0x04);
 8000c0a:	2004      	movs	r0, #4
 8000c0c:	f001 fce0 	bl	80025d0 <LCD_CmdWrite>
	 for(i=0;i<40000;i++)
 8000c10:	2300      	movs	r3, #0
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	e008      	b.n	8000c28 <PIP_Demo+0x100>
	 {
	  LCD_DataWrite(color65k_blue);
 8000c16:	201f      	movs	r0, #31
 8000c18:	f001 fd02 	bl	8002620 <LCD_DataWrite>
	  LCD_DataWrite(color65k_blue>>8);
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f001 fcff 	bl	8002620 <LCD_DataWrite>
	 for(i=0;i<40000;i++)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3301      	adds	r3, #1
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d9f1      	bls.n	8000c16 <PIP_Demo+0xee>
	  //Check_Mem_WR_FIFO_not_Full();
 	 }
	  Check_Mem_WR_FIFO_Empty();
 8000c32:	f001 ff36 	bl	8002aa2 <Check_Mem_WR_FIFO_Empty>

	Foreground_color_65k(White);
 8000c36:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c3a:	f003 fba9 	bl	8004390 <Foreground_color_65k>
	Background_color_65k(color65k_blue);
 8000c3e:	201f      	movs	r0, #31
 8000c40:	f003 fbcd 	bl	80043de <Background_color_65k>
	CGROM_Select_Internal_CGROM();
 8000c44:	f003 fa94 	bl	8004170 <CGROM_Select_Internal_CGROM>
	Font_Select_12x24_24x24();
 8000c48:	f003 fae0 	bl	800420c <Font_Select_12x24_24x24>
	Goto_Text_XY(120,120);
 8000c4c:	2178      	movs	r1, #120	; 0x78
 8000c4e:	2078      	movs	r0, #120	; 0x78
 8000c50:	f002 fd6f 	bl	8003732 <Goto_Text_XY>
	Show_String("PIP1");
 8000c54:	48a8      	ldr	r0, [pc, #672]	; (8000ef8 <PIP_Demo+0x3d0>)
 8000c56:	f003 fbe9 	bl	800442c <Show_String>


	Canvas_Image_Start_address(layer3_start_addr);//Layer 3
 8000c5a:	f44f 10fa 	mov.w	r0, #2048000	; 0x1f4000
 8000c5e:	f002 fc86 	bl	800356e <Canvas_Image_Start_address>
	Canvas_image_width(400);//
 8000c62:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000c66:	f002 fca5 	bl	80035b4 <Canvas_image_width>
    Active_Window_XY(0,0);
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f002 fcb8 	bl	80035e2 <Active_Window_XY>
	Active_Window_WH(200,200);
 8000c72:	21c8      	movs	r1, #200	; 0xc8
 8000c74:	20c8      	movs	r0, #200	; 0xc8
 8000c76:	f002 fcdc 	bl	8003632 <Active_Window_WH>
    Goto_Pixel_XY(0,0);
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f002 fd30 	bl	80036e2 <Goto_Pixel_XY>
	LCD_CmdWrite(0x04);
 8000c82:	2004      	movs	r0, #4
 8000c84:	f001 fca4 	bl	80025d0 <LCD_CmdWrite>
	 for(i=0;i<40000;i++)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	e008      	b.n	8000ca0 <PIP_Demo+0x178>
	 {
	  LCD_DataWrite(color65k_blue);
 8000c8e:	201f      	movs	r0, #31
 8000c90:	f001 fcc6 	bl	8002620 <LCD_DataWrite>
	  LCD_DataWrite(color65k_blue>>8);
 8000c94:	2000      	movs	r0, #0
 8000c96:	f001 fcc3 	bl	8002620 <LCD_DataWrite>
	 for(i=0;i<40000;i++)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d9f1      	bls.n	8000c8e <PIP_Demo+0x166>
	  //Check_Mem_WR_FIFO_not_Full();
 	 }
	Check_Mem_WR_FIFO_Empty();
 8000caa:	f001 fefa 	bl	8002aa2 <Check_Mem_WR_FIFO_Empty>

	Foreground_color_65k(White);
 8000cae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000cb2:	f003 fb6d 	bl	8004390 <Foreground_color_65k>
	Background_color_65k(color65k_red);
 8000cb6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000cba:	f003 fb90 	bl	80043de <Background_color_65k>
	CGROM_Select_Internal_CGROM();
 8000cbe:	f003 fa57 	bl	8004170 <CGROM_Select_Internal_CGROM>
	Font_Select_12x24_24x24();
 8000cc2:	f003 faa3 	bl	800420c <Font_Select_12x24_24x24>
	Goto_Text_XY(120,120);
 8000cc6:	2178      	movs	r1, #120	; 0x78
 8000cc8:	2078      	movs	r0, #120	; 0x78
 8000cca:	f002 fd32 	bl	8003732 <Goto_Text_XY>
	Show_String("PIP2");
 8000cce:	488b      	ldr	r0, [pc, #556]	; (8000efc <PIP_Demo+0x3d4>)
 8000cd0:	f003 fbac 	bl	800442c <Show_String>


 	//PIP1
 	Select_PIP1_Window_16bpp();//
 8000cd4:	f002 f8f9 	bl	8002eca <Select_PIP1_Window_16bpp>
	Select_PIP1_Parameter();
 8000cd8:	f002 f897 	bl	8002e0a <Select_PIP1_Parameter>
	PIP_Image_Start_Address(layer2_start_addr);
 8000cdc:	f44f 207a 	mov.w	r0, #1024000	; 0xfa000
 8000ce0:	f002 fb63 	bl	80033aa <PIP_Image_Start_Address>
	PIP_Image_Width(400);
 8000ce4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000ce8:	f002 fb82 	bl	80033f0 <PIP_Image_Width>
	PIP_Window_Width_Height(200,200);
 8000cec:	21c8      	movs	r1, #200	; 0xc8
 8000cee:	20c8      	movs	r0, #200	; 0xc8
 8000cf0:	f002 fbbd 	bl	800346e <PIP_Window_Width_Height>
	PIP_Window_Image_Start_XY(0,0);
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f002 fb91 	bl	800341e <PIP_Window_Image_Start_XY>
	PIP_Display_Start_XY(0,40);
 8000cfc:	2128      	movs	r1, #40	; 0x28
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f002 fb2b 	bl	800335a <PIP_Display_Start_XY>
	Enable_PIP1();
 8000d04:	f002 f829 	bl	8002d5a <Enable_PIP1>
	delay_ms(50);
 8000d08:	2032      	movs	r0, #50	; 0x32
 8000d0a:	f001 fbd2 	bl	80024b2 <delay_ms>

	//PIP2
    Select_PIP2_Window_16bpp(); //�`�N
 8000d0e:	f002 f8c2 	bl	8002e96 <Select_PIP2_Window_16bpp>
	Select_PIP2_Parameter();
 8000d12:	f002 f890 	bl	8002e36 <Select_PIP2_Parameter>
	PIP_Image_Start_Address(layer3_start_addr);
 8000d16:	f44f 10fa 	mov.w	r0, #2048000	; 0x1f4000
 8000d1a:	f002 fb46 	bl	80033aa <PIP_Image_Start_Address>
	PIP_Image_Width(400);
 8000d1e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000d22:	f002 fb65 	bl	80033f0 <PIP_Image_Width>
	PIP_Window_Width_Height(200,200);
 8000d26:	21c8      	movs	r1, #200	; 0xc8
 8000d28:	20c8      	movs	r0, #200	; 0xc8
 8000d2a:	f002 fba0 	bl	800346e <PIP_Window_Width_Height>
	PIP_Window_Image_Start_XY(0,0);
 8000d2e:	2100      	movs	r1, #0
 8000d30:	2000      	movs	r0, #0
 8000d32:	f002 fb74 	bl	800341e <PIP_Window_Image_Start_XY>
	PIP_Display_Start_XY(200,40+200);
 8000d36:	21f0      	movs	r1, #240	; 0xf0
 8000d38:	20c8      	movs	r0, #200	; 0xc8
 8000d3a:	f002 fb0e 	bl	800335a <PIP_Display_Start_XY>
	Enable_PIP2();
 8000d3e:	f002 f838 	bl	8002db2 <Enable_PIP2>
	delay_ms(50);
 8000d42:	2032      	movs	r0, #50	; 0x32
 8000d44:	f001 fbb5 	bl	80024b2 <delay_ms>


     for(i=0;i<160;i++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	e024      	b.n	8000d98 <PIP_Demo+0x270>
	 {
	  Select_PIP1_Parameter();
 8000d4e:	f002 f85c 	bl	8002e0a <Select_PIP1_Parameter>
	  PIP_Display_Start_XY(0+i,40+i);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	3328      	adds	r3, #40	; 0x28
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4610      	mov	r0, r2
 8000d62:	f002 fafa 	bl	800335a <PIP_Display_Start_XY>
	  // PIP_Display_Start_XY(80,40+i);
	  delay_ms(1);
 8000d66:	2001      	movs	r0, #1
 8000d68:	f001 fba3 	bl	80024b2 <delay_ms>
	  Select_PIP2_Parameter();
 8000d6c:	f002 f863 	bl	8002e36 <Select_PIP2_Parameter>
	  PIP_Display_Start_XY(0+200-i,40+200-i);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	4619      	mov	r1, r3
 8000d86:	4610      	mov	r0, r2
 8000d88:	f002 fae7 	bl	800335a <PIP_Display_Start_XY>
	  //PIP_Display_Start_XY(80+320,40+240-i);
	  delay_ms(10);
 8000d8c:	200a      	movs	r0, #10
 8000d8e:	f001 fb90 	bl	80024b2 <delay_ms>
     for(i=0;i<160;i++)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3301      	adds	r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b9f      	cmp	r3, #159	; 0x9f
 8000d9c:	d9d7      	bls.n	8000d4e <PIP_Demo+0x226>
	 }

	 for(i=0;i<160;i++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	e026      	b.n	8000df2 <PIP_Demo+0x2ca>
	 {
	  Select_PIP1_Parameter();
 8000da4:	f002 f831 	bl	8002e0a <Select_PIP1_Parameter>
	  PIP_Display_Start_XY(0+159-i,40+159-i);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	f1c3 039f 	rsb	r3, r3, #159	; 0x9f
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4610      	mov	r0, r2
 8000dc0:	f002 facb 	bl	800335a <PIP_Display_Start_XY>
	  //PIP_Display_Start_XY(80+159,40+159-i);
	  delay_ms(1);
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f001 fb74 	bl	80024b2 <delay_ms>
	  Select_PIP2_Parameter();
 8000dca:	f002 f834 	bl	8002e36 <Select_PIP2_Parameter>
	  PIP_Display_Start_XY(0+200-159+i,40+200-159+i);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	3329      	adds	r3, #41	; 0x29
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	3351      	adds	r3, #81	; 0x51
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	4619      	mov	r1, r3
 8000de0:	4610      	mov	r0, r2
 8000de2:	f002 faba 	bl	800335a <PIP_Display_Start_XY>
	   //PIP_Display_Start_XY(80+320-159,40+240-159+i);
	  delay_ms(10);
 8000de6:	200a      	movs	r0, #10
 8000de8:	f001 fb63 	bl	80024b2 <delay_ms>
	 for(i=0;i<160;i++)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3301      	adds	r3, #1
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b9f      	cmp	r3, #159	; 0x9f
 8000df6:	d9d5      	bls.n	8000da4 <PIP_Demo+0x27c>
	  }

	  delay_ms(2000);
 8000df8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000dfc:	f001 fb59 	bl	80024b2 <delay_ms>


	//DMA initial setting
	Enable_SFlash_SPI();
 8000e00:	f001 fec3 	bl	8002b8a <Enable_SFlash_SPI>
    Select_SFI_1();
 8000e04:	f003 f81a 	bl	8003e3c <Select_SFI_1>
    Select_SFI_DMA_Mode();
 8000e08:	f003 f844 	bl	8003e94 <Select_SFI_DMA_Mode>
    Select_SFI_24bit_Address();
 8000e0c:	f003 f858 	bl	8003ec0 <Select_SFI_24bit_Address>

    //Select_SFI_Waveform_Mode_0();
    Select_SFI_Waveform_Mode_3();
 8000e10:	f003 f882 	bl	8003f18 <Select_SFI_Waveform_Mode_3>

    //Select_SFI_0_DummyRead();	//normal read mode
    Select_SFI_8_DummyRead(); //1byte dummy cycle
 8000e14:	f003 f8ac 	bl	8003f70 <Select_SFI_8_DummyRead>
    //Select_SFI_16_DummyRead();
    //Select_SFI_24_DummyRead();

    Select_SFI_Single_Mode();
 8000e18:	f003 f8c4 	bl	8003fa4 <Select_SFI_Single_Mode>
    //Select_SFI_Dual_Mode0();
    //Select_SFI_Dual_Mode1();

    SPI_Clock_Period(0);
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f003 f8f1 	bl	8004004 <SPI_Clock_Period>

	Canvas_Image_Start_address(layer2_start_addr);//Layer 2
 8000e22:	f44f 207a 	mov.w	r0, #1024000	; 0xfa000
 8000e26:	f002 fba2 	bl	800356e <Canvas_Image_Start_address>
	Canvas_image_width(400);//
 8000e2a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000e2e:	f002 fbc1 	bl	80035b4 <Canvas_image_width>

	SFI_DMA_Destination_Upper_Left_Corner(0,0);
 8000e32:	2100      	movs	r1, #0
 8000e34:	2000      	movs	r0, #0
 8000e36:	f003 f920 	bl	800407a <SFI_DMA_Destination_Upper_Left_Corner>
    SFI_DMA_Transfer_Width_Height(200,200);
 8000e3a:	21c8      	movs	r1, #200	; 0xc8
 8000e3c:	20c8      	movs	r0, #200	; 0xc8
 8000e3e:	f003 f94c 	bl	80040da <SFI_DMA_Transfer_Width_Height>
    SFI_DMA_Source_Width(400);//
 8000e42:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000e46:	f003 f978 	bl	800413a <SFI_DMA_Source_Width>
	SFI_DMA_Source_Start_Address(0);//
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f003 f8ea 	bl	8004024 <SFI_DMA_Source_Start_Address>
	Start_SFI_DMA();
 8000e50:	f002 ffb9 	bl	8003dc6 <Start_SFI_DMA>
    Check_Busy_SFI_DMA();
 8000e54:	f002 ffcd 	bl	8003df2 <Check_Busy_SFI_DMA>

    Canvas_Image_Start_address(layer3_start_addr);//Layer 3
 8000e58:	f44f 10fa 	mov.w	r0, #2048000	; 0x1f4000
 8000e5c:	f002 fb87 	bl	800356e <Canvas_Image_Start_address>
	Canvas_image_width(400);//
 8000e60:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000e64:	f002 fba6 	bl	80035b4 <Canvas_image_width>

	SFI_DMA_Destination_Upper_Left_Corner(0,0);
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f003 f905 	bl	800407a <SFI_DMA_Destination_Upper_Left_Corner>
    SFI_DMA_Transfer_Width_Height(200,200);
 8000e70:	21c8      	movs	r1, #200	; 0xc8
 8000e72:	20c8      	movs	r0, #200	; 0xc8
 8000e74:	f003 f931 	bl	80040da <SFI_DMA_Transfer_Width_Height>
    SFI_DMA_Source_Width(400);//
 8000e78:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000e7c:	f003 f95d 	bl	800413a <SFI_DMA_Source_Width>
	SFI_DMA_Source_Start_Address(im*400*1280*2*2);//
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	f44f 12fa 	mov.w	r2, #2048000	; 0x1f4000
 8000e86:	fb02 f303 	mul.w	r3, r2, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 f8ca 	bl	8004024 <SFI_DMA_Source_Start_Address>
	Start_SFI_DMA();
 8000e90:	f002 ff99 	bl	8003dc6 <Start_SFI_DMA>
    Check_Busy_SFI_DMA();
 8000e94:	f002 ffad 	bl	8003df2 <Check_Busy_SFI_DMA>


	 for(i=0;i<160;i++)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	e024      	b.n	8000ee8 <PIP_Demo+0x3c0>
	 {
	  Select_PIP1_Parameter();
 8000e9e:	f001 ffb4 	bl	8002e0a <Select_PIP1_Parameter>
	  PIP_Display_Start_XY(0+i,40+i);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	3328      	adds	r3, #40	; 0x28
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	f002 fa52 	bl	800335a <PIP_Display_Start_XY>
	  //PIP_Display_Start_XY(80+i,40);
	  delay_ms(1);
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f001 fafb 	bl	80024b2 <delay_ms>
	  Select_PIP2_Parameter();
 8000ebc:	f001 ffbb 	bl	8002e36 <Select_PIP2_Parameter>
	  PIP_Display_Start_XY(0+200-i,40+200-i);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4610      	mov	r0, r2
 8000ed8:	f002 fa3f 	bl	800335a <PIP_Display_Start_XY>
	  //PIP_Display_Start_XY(80+320-i,40+240);
	  delay_ms(10);
 8000edc:	200a      	movs	r0, #10
 8000ede:	f001 fae8 	bl	80024b2 <delay_ms>
	 for(i=0;i<160;i++)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b9f      	cmp	r3, #159	; 0x9f
 8000eec:	d9d7      	bls.n	8000e9e <PIP_Demo+0x376>
	 }

	 for(i=0;i<160;i++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	e02c      	b.n	8000f4e <PIP_Demo+0x426>
 8000ef4:	08008830 	.word	0x08008830
 8000ef8:	0800883c 	.word	0x0800883c
 8000efc:	08008844 	.word	0x08008844
	 {
	  Select_PIP1_Parameter();
 8000f00:	f001 ff83 	bl	8002e0a <Select_PIP1_Parameter>
	  PIP_Display_Start_XY(0+159-i,40+159-i);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	f1c3 039f 	rsb	r3, r3, #159	; 0x9f
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	f002 fa1d 	bl	800335a <PIP_Display_Start_XY>
	  //PIP_Display_Start_XY(80+159-i,40+159);
	  delay_ms(1);
 8000f20:	2001      	movs	r0, #1
 8000f22:	f001 fac6 	bl	80024b2 <delay_ms>
	  Select_PIP2_Parameter();
 8000f26:	f001 ff86 	bl	8002e36 <Select_PIP2_Parameter>
	  PIP_Display_Start_XY(0+200-159+i,40+200-159+i);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	3329      	adds	r3, #41	; 0x29
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	3351      	adds	r3, #81	; 0x51
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	f002 fa0c 	bl	800335a <PIP_Display_Start_XY>
	  //PIP_Display_Start_XY(80+320-159+i,40+240-159);
	  delay_ms(10);
 8000f42:	200a      	movs	r0, #10
 8000f44:	f001 fab5 	bl	80024b2 <delay_ms>
	 for(i=0;i<160;i++)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b9f      	cmp	r3, #159	; 0x9f
 8000f52:	d9d5      	bls.n	8000f00 <PIP_Demo+0x3d8>
	  }

	  delay_ms(1000);
 8000f54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f58:	f001 faab 	bl	80024b2 <delay_ms>
		NextStep();
 8000f5c:	f001 fa78 	bl	8002450 <NextStep>

	  Disable_PIP1();
 8000f60:	f001 ff11 	bl	8002d86 <Disable_PIP1>
	  Disable_PIP2();
 8000f64:	f001 ff3b 	bl	8002dde <Disable_PIP2>

}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <App_Demo_Waveform>:


void App_Demo_Waveform(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
    unsigned int i,h;

	unsigned int point1y,point2y;
	unsigned int point21y,point22y;
	unsigned int point31y,point32y;
	point2y = 0; //initial value
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
	point22y = 0; //initial value
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
	point32y = 0; //initial value
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]

  #define grid_width 601
  #define grid_high  401
  #define grid_gap 50

	Select_Main_Window_16bpp();
 8000f82:	f001 ff6e 	bl	8002e62 <Select_Main_Window_16bpp>
	Main_Image_Start_Address(0);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f002 f985 	bl	8003296 <Main_Image_Start_Address>
	Main_Image_Width(400);
 8000f8c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000f90:	f002 f9a4 	bl	80032dc <Main_Image_Width>
	Main_Window_Start_XY(0,0);
 8000f94:	2100      	movs	r1, #0
 8000f96:	2000      	movs	r0, #0
 8000f98:	f002 f9b7 	bl	800330a <Main_Window_Start_XY>

 	Canvas_Image_Start_address(0);//Layer 1
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f002 fae6 	bl	800356e <Canvas_Image_Start_address>
	Canvas_image_width(400);//
 8000fa2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000fa6:	f002 fb05 	bl	80035b4 <Canvas_image_width>
    Active_Window_XY(0,0);
 8000faa:	2100      	movs	r1, #0
 8000fac:	2000      	movs	r0, #0
 8000fae:	f002 fb18 	bl	80035e2 <Active_Window_XY>
	Active_Window_WH(400,1280);
 8000fb2:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000fb6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000fba:	f002 fb3a 	bl	8003632 <Active_Window_WH>

 	Foreground_color_65k(Blue);
 8000fbe:	201f      	movs	r0, #31
 8000fc0:	f003 f9e6 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,0);
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f002 fbe7 	bl	800379a <Line_Start_XY>
	Line_End_XY(399,1247);
 8000fcc:	f240 41df 	movw	r1, #1247	; 0x4df
 8000fd0:	f240 108f 	movw	r0, #399	; 0x18f
 8000fd4:	f002 fc11 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 8000fd8:	f002 fc3f 	bl	800385a <Start_Square_Fill>

	Foreground_color_65k(Blue2);
 8000fdc:	f240 501f 	movw	r0, #1311	; 0x51f
 8000fe0:	f003 f9d6 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,1248);
 8000fe4:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f002 fbd6 	bl	800379a <Line_Start_XY>
	Line_End_XY(399,1279);
 8000fee:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8000ff2:	f240 108f 	movw	r0, #399	; 0x18f
 8000ff6:	f002 fc00 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 8000ffa:	f002 fc2e 	bl	800385a <Start_Square_Fill>

 	Foreground_color_65k(White);
 8000ffe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001002:	f003 f9c5 	bl	8004390 <Foreground_color_65k>
	Background_color_65k(Blue2);
 8001006:	f240 501f 	movw	r0, #1311	; 0x51f
 800100a:	f003 f9e8 	bl	80043de <Background_color_65k>
	CGROM_Select_Internal_CGROM();
 800100e:	f003 f8af 	bl	8004170 <CGROM_Select_Internal_CGROM>
	Font_Select_12x24_24x24();
 8001012:	f003 f8fb 	bl	800420c <Font_Select_12x24_24x24>
	Goto_Text_XY(0,Line52);
 8001016:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 800101a:	2000      	movs	r0, #0
 800101c:	f002 fb89 	bl	8003732 <Goto_Text_XY>
	Show_String("Application Demo Waveform");
 8001020:	48aa      	ldr	r0, [pc, #680]	; (80012cc <App_Demo_Waveform+0x35c>)
 8001022:	f003 fa03 	bl	800442c <Show_String>


 	Foreground_color_65k(White);
 8001026:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800102a:	f003 f9b1 	bl	8004390 <Foreground_color_65k>
	Background_color_65k(Blue);
 800102e:	201f      	movs	r0, #31
 8001030:	f003 f9d5 	bl	80043de <Background_color_65k>
	CGROM_Select_Internal_CGROM();
 8001034:	f003 f89c 	bl	8004170 <CGROM_Select_Internal_CGROM>
	Font_Select_12x24_24x24();
 8001038:	f003 f8e8 	bl	800420c <Font_Select_12x24_24x24>
	Goto_Text_XY(0,Line50);
 800103c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8001040:	2000      	movs	r0, #0
 8001042:	f002 fb76 	bl	8003732 <Goto_Text_XY>
	Show_String("BTE memory copy + Geometric draw demo waveform");
 8001046:	48a2      	ldr	r0, [pc, #648]	; (80012d0 <App_Demo_Waveform+0x360>)
 8001048:	f003 f9f0 	bl	800442c <Show_String>

	//creat grid 500*400 to layer2 used geometric draw

	Canvas_Image_Start_address(layer2_start_addr);//Layer 2
 800104c:	f44f 207a 	mov.w	r0, #1024000	; 0xfa000
 8001050:	f002 fa8d 	bl	800356e <Canvas_Image_Start_address>

;

    Foreground_color_65k(Black);  //clear layer2 to color black
 8001054:	2000      	movs	r0, #0
 8001056:	f003 f99b 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,0);
 800105a:	2100      	movs	r1, #0
 800105c:	2000      	movs	r0, #0
 800105e:	f002 fb9c 	bl	800379a <Line_Start_XY>
	Line_End_XY(399,1279);
 8001062:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8001066:	f240 108f 	movw	r0, #399	; 0x18f
 800106a:	f002 fbc6 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 800106e:	f002 fbf4 	bl	800385a <Start_Square_Fill>

    for(i=0;i<=grid_width;i+=grid_gap)
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
 8001076:	e015      	b.n	80010a4 <App_Demo_Waveform+0x134>
	{
	 Foreground_color_65k(color65k_grayscale12);
 8001078:	f246 300c 	movw	r0, #25356	; 0x630c
 800107c:	f003 f988 	bl	8004390 <Foreground_color_65k>
	 Line_Start_XY(i,0);
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	b29b      	uxth	r3, r3
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f002 fb87 	bl	800379a <Line_Start_XY>
     Line_End_XY(i,grid_high-1);
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	b29b      	uxth	r3, r3
 8001090:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001094:	4618      	mov	r0, r3
 8001096:	f002 fbb0 	bl	80037fa <Line_End_XY>
	 Start_Line();
 800109a:	f002 fb72 	bl	8003782 <Start_Line>
    for(i=0;i<=grid_width;i+=grid_gap)
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3332      	adds	r3, #50	; 0x32
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f240 2259 	movw	r2, #601	; 0x259
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d9e4      	bls.n	8001078 <App_Demo_Waveform+0x108>
	}

	 for(i=0;i<=grid_high;i+=grid_gap)
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
 80010b2:	e015      	b.n	80010e0 <App_Demo_Waveform+0x170>
	{
	 Foreground_color_65k(color65k_grayscale12);
 80010b4:	f246 300c 	movw	r0, #25356	; 0x630c
 80010b8:	f003 f96a 	bl	8004390 <Foreground_color_65k>
	 Line_Start_XY(0,i);
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	4619      	mov	r1, r3
 80010c2:	2000      	movs	r0, #0
 80010c4:	f002 fb69 	bl	800379a <Line_Start_XY>
     Line_End_XY(grid_width-1,i);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	4619      	mov	r1, r3
 80010ce:	f44f 7016 	mov.w	r0, #600	; 0x258
 80010d2:	f002 fb92 	bl	80037fa <Line_End_XY>
	 Start_Line();
 80010d6:	f002 fb54 	bl	8003782 <Start_Line>
	 for(i=0;i<=grid_high;i+=grid_gap)
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3332      	adds	r3, #50	; 0x32
 80010de:	61fb      	str	r3, [r7, #28]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f5b3 7fc9 	cmp.w	r3, #402	; 0x192
 80010e6:	d3e5      	bcc.n	80010b4 <App_Demo_Waveform+0x144>
	}

	//BTE memory(move) grid to layer1
	   BTE_S0_Color_16bpp();
 80010e8:	f002 fccd 	bl	8003a86 <BTE_S0_Color_16bpp>
       BTE_S0_Memory_Start_Address(layer2_start_addr);
 80010ec:	f44f 207a 	mov.w	r0, #1024000	; 0xfa000
 80010f0:	f002 fd1b 	bl	8003b2a <BTE_S0_Memory_Start_Address>
       BTE_S0_Image_Width(400);
 80010f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010f8:	f002 fd3a 	bl	8003b70 <BTE_S0_Image_Width>
       BTE_S0_Window_Start_XY(0,0);
 80010fc:	2100      	movs	r1, #0
 80010fe:	2000      	movs	r0, #0
 8001100:	f002 fd4d 	bl	8003b9e <BTE_S0_Window_Start_XY>
//       BTE_S1_Color_16bpp();
//       BTE_S1_Memory_Start_Address(800*600*2*2);
//       BTE_S1_Image_Width(800);
//       BTE_S1_Window_Start_XY(0,0);

       BTE_Destination_Color_16bpp();
 8001104:	f002 fcf7 	bl	8003af6 <BTE_Destination_Color_16bpp>
       BTE_Destination_Memory_Start_Address(0);
 8001108:	2000      	movs	r0, #0
 800110a:	f002 fdd2 	bl	8003cb2 <BTE_Destination_Memory_Start_Address>
       BTE_Destination_Image_Width(400);
 800110e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001112:	f002 fdf1 	bl	8003cf8 <BTE_Destination_Image_Width>
       BTE_Destination_Window_Start_XY(10,40);
 8001116:	2128      	movs	r1, #40	; 0x28
 8001118:	200a      	movs	r0, #10
 800111a:	f002 fe04 	bl	8003d26 <BTE_Destination_Window_Start_XY>
       BTE_Window_Size(601,401);
 800111e:	f240 1191 	movw	r1, #401	; 0x191
 8001122:	f240 2059 	movw	r0, #601	; 0x259
 8001126:	f002 fe26 	bl	8003d76 <BTE_Window_Size>

	   //move with ROP 0
       BTE_ROP_Code(12); //memory copy s0(layer2)grid to layer1
 800112a:	200c      	movs	r0, #12
 800112c:	f002 fc6f 	bl	8003a0e <BTE_ROP_Code>
       BTE_Operation_Code(2); //BTE move
 8001130:	2002      	movs	r0, #2
 8001132:	f002 fc8c 	bl	8003a4e <BTE_Operation_Code>
       BTE_Enable();
 8001136:	f002 fc2d 	bl	8003994 <BTE_Enable>
       Check_BTE_Busy();
 800113a:	f002 fc41 	bl	80039c0 <Check_BTE_Busy>


	   Canvas_Image_Start_address(0);//Layer 1
 800113e:	2000      	movs	r0, #0
 8001140:	f002 fa15 	bl	800356e <Canvas_Image_Start_address>

	 h=0;
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
	do{
	    for(i=0;i<1280;i+=2)
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
 800114c:	e0ab      	b.n	80012a6 <App_Demo_Waveform+0x336>
	   {
		// copy layer2 grid column to layer1
		 BTE_S0_Window_Start_XY(i,0);
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	b29b      	uxth	r3, r3
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f002 fd22 	bl	8003b9e <BTE_S0_Window_Start_XY>

		 BTE_Destination_Window_Start_XY(10+i,40);
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	b29b      	uxth	r3, r3
 800115e:	330a      	adds	r3, #10
 8001160:	b29b      	uxth	r3, r3
 8001162:	2128      	movs	r1, #40	; 0x28
 8001164:	4618      	mov	r0, r3
 8001166:	f002 fdde 	bl	8003d26 <BTE_Destination_Window_Start_XY>
         BTE_Window_Size(2,401);
 800116a:	f240 1191 	movw	r1, #401	; 0x191
 800116e:	2002      	movs	r0, #2
 8001170:	f002 fe01 	bl	8003d76 <BTE_Window_Size>
		 BTE_Enable();
 8001174:	f002 fc0e 	bl	8003994 <BTE_Enable>
         Check_BTE_Busy();
 8001178:	f002 fc22 	bl	80039c0 <Check_BTE_Busy>


		 point1y = point2y;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	60bb      	str	r3, [r7, #8]
         point2y = rand()%90;//
 8001180:	f006 face 	bl	8007720 <rand>
 8001184:	4603      	mov	r3, r0
 8001186:	4a53      	ldr	r2, [pc, #332]	; (80012d4 <App_Demo_Waveform+0x364>)
 8001188:	fb82 1203 	smull	r1, r2, r2, r3
 800118c:	441a      	add	r2, r3
 800118e:	1191      	asrs	r1, r2, #6
 8001190:	17da      	asrs	r2, r3, #31
 8001192:	1a8a      	subs	r2, r1, r2
 8001194:	215a      	movs	r1, #90	; 0x5a
 8001196:	fb01 f202 	mul.w	r2, r1, r2
 800119a:	1a9a      	subs	r2, r3, r2
 800119c:	617a      	str	r2, [r7, #20]

		 point21y = point22y;
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	607b      	str	r3, [r7, #4]
         point22y = rand()%99;//
 80011a2:	f006 fabd 	bl	8007720 <rand>
 80011a6:	4602      	mov	r2, r0
 80011a8:	4b4b      	ldr	r3, [pc, #300]	; (80012d8 <App_Demo_Waveform+0x368>)
 80011aa:	fb83 1302 	smull	r1, r3, r3, r2
 80011ae:	4413      	add	r3, r2
 80011b0:	1199      	asrs	r1, r3, #6
 80011b2:	17d3      	asrs	r3, r2, #31
 80011b4:	1ac9      	subs	r1, r1, r3
 80011b6:	460b      	mov	r3, r1
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	440b      	add	r3, r1
 80011bc:	0159      	lsls	r1, r3, #5
 80011be:	440b      	add	r3, r1
 80011c0:	1ad1      	subs	r1, r2, r3
 80011c2:	6139      	str	r1, [r7, #16]
//
		 point31y = point32y;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	603b      	str	r3, [r7, #0]
         point32y = rand()%67;//
 80011c8:	f006 faaa 	bl	8007720 <rand>
 80011cc:	4601      	mov	r1, r0
 80011ce:	4b43      	ldr	r3, [pc, #268]	; (80012dc <App_Demo_Waveform+0x36c>)
 80011d0:	fb83 2301 	smull	r2, r3, r3, r1
 80011d4:	105a      	asrs	r2, r3, #1
 80011d6:	17cb      	asrs	r3, r1, #31
 80011d8:	1ad2      	subs	r2, r2, r3
 80011da:	4613      	mov	r3, r2
 80011dc:	015b      	lsls	r3, r3, #5
 80011de:	4413      	add	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4413      	add	r3, r2
 80011e4:	1aca      	subs	r2, r1, r3
 80011e6:	60fa      	str	r2, [r7, #12]

		 Foreground_color_65k(color65k_yellow);//
 80011e8:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80011ec:	f003 f8d0 	bl	8004390 <Foreground_color_65k>
		 Line_Start_XY(i+10,point1y+80);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	330a      	adds	r3, #10
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	3350      	adds	r3, #80	; 0x50
 80011fe:	b29b      	uxth	r3, r3
 8001200:	4619      	mov	r1, r3
 8001202:	4610      	mov	r0, r2
 8001204:	f002 fac9 	bl	800379a <Line_Start_XY>
		 Line_End_XY(i+1+10,point2y+80);
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	b29b      	uxth	r3, r3
 800120c:	330b      	adds	r3, #11
 800120e:	b29a      	uxth	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	b29b      	uxth	r3, r3
 8001214:	3350      	adds	r3, #80	; 0x50
 8001216:	b29b      	uxth	r3, r3
 8001218:	4619      	mov	r1, r3
 800121a:	4610      	mov	r0, r2
 800121c:	f002 faed 	bl	80037fa <Line_End_XY>
	     Start_Line();
 8001220:	f002 faaf 	bl	8003782 <Start_Line>

		 Foreground_color_65k(color65k_purple);//
 8001224:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8001228:	f003 f8b2 	bl	8004390 <Foreground_color_65k>
		 Line_Start_XY(i+10,point21y+200);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	b29b      	uxth	r3, r3
 8001230:	330a      	adds	r3, #10
 8001232:	b29a      	uxth	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	b29b      	uxth	r3, r3
 8001238:	33c8      	adds	r3, #200	; 0xc8
 800123a:	b29b      	uxth	r3, r3
 800123c:	4619      	mov	r1, r3
 800123e:	4610      	mov	r0, r2
 8001240:	f002 faab 	bl	800379a <Line_Start_XY>
		 Line_End_XY(i+1+10,point22y+200);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	b29b      	uxth	r3, r3
 8001248:	330b      	adds	r3, #11
 800124a:	b29a      	uxth	r2, r3
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	b29b      	uxth	r3, r3
 8001250:	33c8      	adds	r3, #200	; 0xc8
 8001252:	b29b      	uxth	r3, r3
 8001254:	4619      	mov	r1, r3
 8001256:	4610      	mov	r0, r2
 8001258:	f002 facf 	bl	80037fa <Line_End_XY>
	     Start_Line();
 800125c:	f002 fa91 	bl	8003782 <Start_Line>
//
		 Foreground_color_65k(color65k_green);//
 8001260:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001264:	f003 f894 	bl	8004390 <Foreground_color_65k>
		 Line_Start_XY(i+10,point31y+300);
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	b29b      	uxth	r3, r3
 800126c:	330a      	adds	r3, #10
 800126e:	b29a      	uxth	r2, r3
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	b29b      	uxth	r3, r3
 8001274:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8001278:	b29b      	uxth	r3, r3
 800127a:	4619      	mov	r1, r3
 800127c:	4610      	mov	r0, r2
 800127e:	f002 fa8c 	bl	800379a <Line_Start_XY>
		 Line_End_XY(i+1+10,point32y+300);
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	b29b      	uxth	r3, r3
 8001286:	330b      	adds	r3, #11
 8001288:	b29a      	uxth	r2, r3
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	b29b      	uxth	r3, r3
 800128e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8001292:	b29b      	uxth	r3, r3
 8001294:	4619      	mov	r1, r3
 8001296:	4610      	mov	r0, r2
 8001298:	f002 faaf 	bl	80037fa <Line_End_XY>
	     Start_Line();
 800129c:	f002 fa71 	bl	8003782 <Start_Line>
	    for(i=0;i<1280;i+=2)
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	3302      	adds	r3, #2
 80012a4:	61fb      	str	r3, [r7, #28]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80012ac:	f4ff af4f 	bcc.w	800114e <App_Demo_Waveform+0x1de>

		 //delay_ms(1000);
	    }

	   h++;
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	3301      	adds	r3, #1
 80012b4:	61bb      	str	r3, [r7, #24]
	  }
	 while(h<4);
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	f67f af45 	bls.w	8001148 <App_Demo_Waveform+0x1d8>

 		NextStep();
 80012be:	f001 f8c7 	bl	8002450 <NextStep>

}
 80012c2:	bf00      	nop
 80012c4:	3720      	adds	r7, #32
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	0800884c 	.word	0x0800884c
 80012d0:	08008868 	.word	0x08008868
 80012d4:	b60b60b7 	.word	0xb60b60b7
 80012d8:	a57eb503 	.word	0xa57eb503
 80012dc:	07a44c6b 	.word	0x07a44c6b

080012e0 <App_Demo_Scrolling_Text>:


void App_Demo_Scrolling_Text(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
    unsigned int i;



 	Select_Main_Window_16bpp();
 80012e6:	f001 fdbc 	bl	8002e62 <Select_Main_Window_16bpp>
	Main_Image_Start_Address(0);
 80012ea:	2000      	movs	r0, #0
 80012ec:	f001 ffd3 	bl	8003296 <Main_Image_Start_Address>
	Main_Image_Width(400);
 80012f0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80012f4:	f001 fff2 	bl	80032dc <Main_Image_Width>
	Main_Window_Start_XY(0,0);
 80012f8:	2100      	movs	r1, #0
 80012fa:	2000      	movs	r0, #0
 80012fc:	f002 f805 	bl	800330a <Main_Window_Start_XY>

	Canvas_Image_Start_address(layer2_start_addr);
 8001300:	f44f 207a 	mov.w	r0, #1024000	; 0xfa000
 8001304:	f002 f933 	bl	800356e <Canvas_Image_Start_address>
	Canvas_image_width(400);//
 8001308:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800130c:	f002 f952 	bl	80035b4 <Canvas_image_width>
    Active_Window_XY(0,0);
 8001310:	2100      	movs	r1, #0
 8001312:	2000      	movs	r0, #0
 8001314:	f002 f965 	bl	80035e2 <Active_Window_XY>
	Active_Window_WH(400,1280);
 8001318:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800131c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001320:	f002 f987 	bl	8003632 <Active_Window_WH>

 	Foreground_color_65k(Black);
 8001324:	2000      	movs	r0, #0
 8001326:	f003 f833 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,0);
 800132a:	2100      	movs	r1, #0
 800132c:	2000      	movs	r0, #0
 800132e:	f002 fa34 	bl	800379a <Line_Start_XY>
	Line_End_XY(399,1247);
 8001332:	f240 41df 	movw	r1, #1247	; 0x4df
 8001336:	f240 108f 	movw	r0, #399	; 0x18f
 800133a:	f002 fa5e 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 800133e:	f002 fa8c 	bl	800385a <Start_Square_Fill>

	Foreground_color_65k(Blue2);
 8001342:	f240 501f 	movw	r0, #1311	; 0x51f
 8001346:	f003 f823 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,1248);
 800134a:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 800134e:	2000      	movs	r0, #0
 8001350:	f002 fa23 	bl	800379a <Line_Start_XY>
	Line_End_XY(399,1279);
 8001354:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8001358:	f240 108f 	movw	r0, #399	; 0x18f
 800135c:	f002 fa4d 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 8001360:	f002 fa7b 	bl	800385a <Start_Square_Fill>



	Foreground_color_65k(White);
 8001364:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001368:	f003 f812 	bl	8004390 <Foreground_color_65k>
	Background_color_65k(Blue2);
 800136c:	f240 501f 	movw	r0, #1311	; 0x51f
 8001370:	f003 f835 	bl	80043de <Background_color_65k>
	CGROM_Select_Internal_CGROM();
 8001374:	f002 fefc 	bl	8004170 <CGROM_Select_Internal_CGROM>
	Font_Select_12x24_24x24();
 8001378:	f002 ff48 	bl	800420c <Font_Select_12x24_24x24>
	Goto_Text_XY(0,Line52);
 800137c:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8001380:	2000      	movs	r0, #0
 8001382:	f002 f9d6 	bl	8003732 <Goto_Text_XY>
	Show_String("Demo Scrolling Text");
 8001386:	48ac      	ldr	r0, [pc, #688]	; (8001638 <App_Demo_Scrolling_Text+0x358>)
 8001388:	f003 f850 	bl	800442c <Show_String>
	Foreground_color_65k(White);
 800138c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001390:	f002 fffe 	bl	8004390 <Foreground_color_65k>
	Background_color_65k(Black);
 8001394:	2000      	movs	r0, #0
 8001396:	f003 f822 	bl	80043de <Background_color_65k>
	Goto_Text_XY(0,Line51);
	Show_String("Used Move BTE with Chroma Key ");
   */

    //DMA initial setting
	Enable_SFlash_SPI();
 800139a:	f001 fbf6 	bl	8002b8a <Enable_SFlash_SPI>
    Select_SFI_1();
 800139e:	f002 fd4d 	bl	8003e3c <Select_SFI_1>
    Select_SFI_DMA_Mode();
 80013a2:	f002 fd77 	bl	8003e94 <Select_SFI_DMA_Mode>
    Select_SFI_24bit_Address();
 80013a6:	f002 fd8b 	bl	8003ec0 <Select_SFI_24bit_Address>

    //Select_SFI_Waveform_Mode_0();
    Select_SFI_Waveform_Mode_3();
 80013aa:	f002 fdb5 	bl	8003f18 <Select_SFI_Waveform_Mode_3>

    //Select_SFI_0_DummyRead();	//normal read mode
    Select_SFI_8_DummyRead(); //1byte dummy cycle
 80013ae:	f002 fddf 	bl	8003f70 <Select_SFI_8_DummyRead>
    //Select_SFI_16_DummyRead();
    //Select_SFI_24_DummyRead();

    Select_SFI_Single_Mode();
 80013b2:	f002 fdf7 	bl	8003fa4 <Select_SFI_Single_Mode>
    //Select_SFI_Dual_Mode0();
    //Select_SFI_Dual_Mode1();

    SPI_Clock_Period(0);
 80013b6:	2000      	movs	r0, #0
 80013b8:	f002 fe24 	bl	8004004 <SPI_Clock_Period>


	SFI_DMA_Destination_Upper_Left_Corner(0,0);
 80013bc:	2100      	movs	r1, #0
 80013be:	2000      	movs	r0, #0
 80013c0:	f002 fe5b 	bl	800407a <SFI_DMA_Destination_Upper_Left_Corner>
    SFI_DMA_Transfer_Width_Height(400,1280);
 80013c4:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80013c8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80013cc:	f002 fe85 	bl	80040da <SFI_DMA_Transfer_Width_Height>
    SFI_DMA_Source_Width(400);//
 80013d0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80013d4:	f002 feb1 	bl	800413a <SFI_DMA_Source_Width>
	SFI_DMA_Source_Start_Address(0);//
 80013d8:	2000      	movs	r0, #0
 80013da:	f002 fe23 	bl	8004024 <SFI_DMA_Source_Start_Address>
	Start_SFI_DMA();
 80013de:	f002 fcf2 	bl	8003dc6 <Start_SFI_DMA>
    Check_Busy_SFI_DMA();
 80013e2:	f002 fd06 	bl	8003df2 <Check_Busy_SFI_DMA>


	//BTE memory(move) layer2 to layer1
	   BTE_S0_Color_16bpp();
 80013e6:	f002 fb4e 	bl	8003a86 <BTE_S0_Color_16bpp>
       BTE_S0_Memory_Start_Address(layer2_start_addr);
 80013ea:	f44f 207a 	mov.w	r0, #1024000	; 0xfa000
 80013ee:	f002 fb9c 	bl	8003b2a <BTE_S0_Memory_Start_Address>
       BTE_S0_Image_Width(400);
 80013f2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80013f6:	f002 fbbb 	bl	8003b70 <BTE_S0_Image_Width>
       BTE_S0_Window_Start_XY(0,0);
 80013fa:	2100      	movs	r1, #0
 80013fc:	2000      	movs	r0, #0
 80013fe:	f002 fbce 	bl	8003b9e <BTE_S0_Window_Start_XY>



       BTE_Destination_Color_16bpp();
 8001402:	f002 fb78 	bl	8003af6 <BTE_Destination_Color_16bpp>
       BTE_Destination_Memory_Start_Address(layer1_start_addr);
 8001406:	2000      	movs	r0, #0
 8001408:	f002 fc53 	bl	8003cb2 <BTE_Destination_Memory_Start_Address>
       BTE_Destination_Image_Width(400);
 800140c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001410:	f002 fc72 	bl	8003cf8 <BTE_Destination_Image_Width>
       BTE_Destination_Window_Start_XY(0,0);
 8001414:	2100      	movs	r1, #0
 8001416:	2000      	movs	r0, #0
 8001418:	f002 fc85 	bl	8003d26 <BTE_Destination_Window_Start_XY>
       BTE_Window_Size(400,1280);
 800141c:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001420:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001424:	f002 fca7 	bl	8003d76 <BTE_Window_Size>

       BTE_ROP_Code(12);
 8001428:	200c      	movs	r0, #12
 800142a:	f002 faf0 	bl	8003a0e <BTE_ROP_Code>
       BTE_Operation_Code(2); //BTE move
 800142e:	2002      	movs	r0, #2
 8001430:	f002 fb0d 	bl	8003a4e <BTE_Operation_Code>
       BTE_Enable();		  //memory copy s0(layer3) to layer1
 8001434:	f002 faae 	bl	8003994 <BTE_Enable>
       Check_BTE_Busy();
 8001438:	f002 fac2 	bl	80039c0 <Check_BTE_Busy>


	  //write text to layer3
	  Canvas_Image_Start_address(layer3_start_addr);
 800143c:	f44f 10fa 	mov.w	r0, #2048000	; 0x1f4000
 8001440:	f002 f895 	bl	800356e <Canvas_Image_Start_address>
	  Canvas_image_width(400);//
 8001444:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001448:	f002 f8b4 	bl	80035b4 <Canvas_image_width>
      Active_Window_XY(0,0);
 800144c:	2100      	movs	r1, #0
 800144e:	2000      	movs	r0, #0
 8001450:	f002 f8c7 	bl	80035e2 <Active_Window_XY>
	  Active_Window_WH(400,1280);
 8001454:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001458:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800145c:	f002 f8e9 	bl	8003632 <Active_Window_WH>

	  Foreground_color_65k(Red);
 8001460:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001464:	f002 ff94 	bl	8004390 <Foreground_color_65k>
	  Line_Start_XY(0,0);
 8001468:	2100      	movs	r1, #0
 800146a:	2000      	movs	r0, #0
 800146c:	f002 f995 	bl	800379a <Line_Start_XY>
	  Line_End_XY(399,1279);
 8001470:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8001474:	f240 108f 	movw	r0, #399	; 0x18f
 8001478:	f002 f9bf 	bl	80037fa <Line_End_XY>
	  Start_Square_Fill();
 800147c:	f002 f9ed 	bl	800385a <Start_Square_Fill>

	Foreground_color_65k(Green);
 8001480:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001484:	f002 ff84 	bl	8004390 <Foreground_color_65k>
	Background_color_65k(Red);
 8001488:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800148c:	f002 ffa7 	bl	80043de <Background_color_65k>
	CGROM_Select_Internal_CGROM();
 8001490:	f002 fe6e 	bl	8004170 <CGROM_Select_Internal_CGROM>
	Font_Select_12x24_24x24();
 8001494:	f002 feba 	bl	800420c <Font_Select_12x24_24x24>
	Goto_Text_XY(0,Line0);
 8001498:	2100      	movs	r1, #0
 800149a:	2000      	movs	r0, #0
 800149c:	f002 f949 	bl	8003732 <Goto_Text_XY>
	Show_String("Demo Scrolling Text");
 80014a0:	4865      	ldr	r0, [pc, #404]	; (8001638 <App_Demo_Scrolling_Text+0x358>)
 80014a2:	f002 ffc3 	bl	800442c <Show_String>

	Foreground_color_65k(Yellow);
 80014a6:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80014aa:	f002 ff71 	bl	8004390 <Foreground_color_65k>
	Background_color_65k(Red);
 80014ae:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80014b2:	f002 ff94 	bl	80043de <Background_color_65k>
	Goto_Text_XY(0,Line1);
 80014b6:	2118      	movs	r1, #24
 80014b8:	2000      	movs	r0, #0
 80014ba:	f002 f93a 	bl	8003732 <Goto_Text_XY>
	Show_String("Demo Scrolling Text");
 80014be:	485e      	ldr	r0, [pc, #376]	; (8001638 <App_Demo_Scrolling_Text+0x358>)
 80014c0:	f002 ffb4 	bl	800442c <Show_String>
	Foreground_color_65k(Magenta);
 80014c4:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80014c8:	f002 ff62 	bl	8004390 <Foreground_color_65k>
	Background_color_65k(Red);
 80014cc:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80014d0:	f002 ff85 	bl	80043de <Background_color_65k>
	Goto_Text_XY(0,Line2);
 80014d4:	2130      	movs	r1, #48	; 0x30
 80014d6:	2000      	movs	r0, #0
 80014d8:	f002 f92b 	bl	8003732 <Goto_Text_XY>
	Show_String("Demo Scrolling Text");
 80014dc:	4856      	ldr	r0, [pc, #344]	; (8001638 <App_Demo_Scrolling_Text+0x358>)
 80014de:	f002 ffa5 	bl	800442c <Show_String>
	Foreground_color_65k(Grey);
 80014e2:	f24f 70de 	movw	r0, #63454	; 0xf7de
 80014e6:	f002 ff53 	bl	8004390 <Foreground_color_65k>
	Background_color_65k(Red);
 80014ea:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80014ee:	f002 ff76 	bl	80043de <Background_color_65k>
	Goto_Text_XY(0,Line3);
 80014f2:	2148      	movs	r1, #72	; 0x48
 80014f4:	2000      	movs	r0, #0
 80014f6:	f002 f91c 	bl	8003732 <Goto_Text_XY>
	Show_String("Demo Scrolling Text");
 80014fa:	484f      	ldr	r0, [pc, #316]	; (8001638 <App_Demo_Scrolling_Text+0x358>)
 80014fc:	f002 ff96 	bl	800442c <Show_String>


	  //Move BTE with chroma key layer3 to layer2 then move layer2 to layer1 to display

	  for(i=0;i<200;i+=8)
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	e091      	b.n	800162a <App_Demo_Scrolling_Text+0x34a>
	  {
	   	Canvas_Image_Start_address(layer2_start_addr);
 8001506:	f44f 207a 	mov.w	r0, #1024000	; 0xfa000
 800150a:	f002 f830 	bl	800356e <Canvas_Image_Start_address>
	    Canvas_image_width(400);//
 800150e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001512:	f002 f84f 	bl	80035b4 <Canvas_image_width>
        Active_Window_XY(0,0);
 8001516:	2100      	movs	r1, #0
 8001518:	2000      	movs	r0, #0
 800151a:	f002 f862 	bl	80035e2 <Active_Window_XY>
	    Active_Window_WH(400,1280);
 800151e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001522:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001526:	f002 f884 	bl	8003632 <Active_Window_WH>

 	     Foreground_color_65k(Black);
 800152a:	2000      	movs	r0, #0
 800152c:	f002 ff30 	bl	8004390 <Foreground_color_65k>
	     Line_Start_XY(0,0);
 8001530:	2100      	movs	r1, #0
 8001532:	2000      	movs	r0, #0
 8001534:	f002 f931 	bl	800379a <Line_Start_XY>
	     Line_End_XY(399,1279);
 8001538:	f240 41ff 	movw	r1, #1279	; 0x4ff
 800153c:	f240 108f 	movw	r0, #399	; 0x18f
 8001540:	f002 f95b 	bl	80037fa <Line_End_XY>
	     Start_Square_Fill();
 8001544:	f002 f989 	bl	800385a <Start_Square_Fill>

		 SFI_DMA_Destination_Upper_Left_Corner(0,0);
 8001548:	2100      	movs	r1, #0
 800154a:	2000      	movs	r0, #0
 800154c:	f002 fd95 	bl	800407a <SFI_DMA_Destination_Upper_Left_Corner>
         SFI_DMA_Transfer_Width_Height(400,1280);
 8001550:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001554:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001558:	f002 fdbf 	bl	80040da <SFI_DMA_Transfer_Width_Height>
         SFI_DMA_Source_Width(400);//
 800155c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001560:	f002 fdeb 	bl	800413a <SFI_DMA_Source_Width>
	     SFI_DMA_Source_Start_Address(0);//
 8001564:	2000      	movs	r0, #0
 8001566:	f002 fd5d 	bl	8004024 <SFI_DMA_Source_Start_Address>
	     Start_SFI_DMA();
 800156a:	f002 fc2c 	bl	8003dc6 <Start_SFI_DMA>
         Check_Busy_SFI_DMA();
 800156e:	f002 fc40 	bl	8003df2 <Check_Busy_SFI_DMA>

	  //BTE memory(move) layer3 to layer2
	   //BTE_S0_Color_16bpp();
       BTE_S0_Memory_Start_Address(layer3_start_addr);
 8001572:	f44f 10fa 	mov.w	r0, #2048000	; 0x1f4000
 8001576:	f002 fad8 	bl	8003b2a <BTE_S0_Memory_Start_Address>
       BTE_S0_Image_Width(400);
 800157a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800157e:	f002 faf7 	bl	8003b70 <BTE_S0_Image_Width>
       BTE_S0_Window_Start_XY(0,0);
 8001582:	2100      	movs	r1, #0
 8001584:	2000      	movs	r0, #0
 8001586:	f002 fb0a 	bl	8003b9e <BTE_S0_Window_Start_XY>



       //BTE_Destination_Color_16bpp();
       BTE_Destination_Memory_Start_Address(layer2_start_addr);
 800158a:	f44f 207a 	mov.w	r0, #1024000	; 0xfa000
 800158e:	f002 fb90 	bl	8003cb2 <BTE_Destination_Memory_Start_Address>
       BTE_Destination_Image_Width(400);
 8001592:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001596:	f002 fbaf 	bl	8003cf8 <BTE_Destination_Image_Width>
       BTE_Destination_Window_Start_XY(391-i,72);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	b29b      	uxth	r3, r3
 800159e:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 80015a2:	3301      	adds	r3, #1
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	2148      	movs	r1, #72	; 0x48
 80015a8:	4618      	mov	r0, r3
 80015aa:	f002 fbbc 	bl	8003d26 <BTE_Destination_Window_Start_XY>
       BTE_Window_Size(0+i,24*4);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	2160      	movs	r1, #96	; 0x60
 80015b4:	4618      	mov	r0, r3
 80015b6:	f002 fbde 	bl	8003d76 <BTE_Window_Size>

	   Background_color_65k(Red);//
 80015ba:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80015be:	f002 ff0e 	bl	80043de <Background_color_65k>

       BTE_ROP_Code(12);
 80015c2:	200c      	movs	r0, #12
 80015c4:	f002 fa23 	bl	8003a0e <BTE_ROP_Code>
       BTE_Operation_Code(5); //BTE move with chroma key
 80015c8:	2005      	movs	r0, #5
 80015ca:	f002 fa40 	bl	8003a4e <BTE_Operation_Code>
       BTE_Enable();		  //memory copy s0(layer3) to layer1
 80015ce:	f002 f9e1 	bl	8003994 <BTE_Enable>
       Check_BTE_Busy();
 80015d2:	f002 f9f5 	bl	80039c0 <Check_BTE_Busy>



   	  //BTE memory(move) layer2 to layer1
	   //BTE_S0_Color_16bpp();
       BTE_S0_Memory_Start_Address(layer2_start_addr);
 80015d6:	f44f 207a 	mov.w	r0, #1024000	; 0xfa000
 80015da:	f002 faa6 	bl	8003b2a <BTE_S0_Memory_Start_Address>
       BTE_S0_Image_Width(400);
 80015de:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80015e2:	f002 fac5 	bl	8003b70 <BTE_S0_Image_Width>
       BTE_S0_Window_Start_XY(0,0);
 80015e6:	2100      	movs	r1, #0
 80015e8:	2000      	movs	r0, #0
 80015ea:	f002 fad8 	bl	8003b9e <BTE_S0_Window_Start_XY>

       //BTE_Destination_Color_16bpp();
       BTE_Destination_Memory_Start_Address(layer1_start_addr);
 80015ee:	2000      	movs	r0, #0
 80015f0:	f002 fb5f 	bl	8003cb2 <BTE_Destination_Memory_Start_Address>
       BTE_Destination_Image_Width(400);
 80015f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80015f8:	f002 fb7e 	bl	8003cf8 <BTE_Destination_Image_Width>
       BTE_Destination_Window_Start_XY(0,0);
 80015fc:	2100      	movs	r1, #0
 80015fe:	2000      	movs	r0, #0
 8001600:	f002 fb91 	bl	8003d26 <BTE_Destination_Window_Start_XY>
       BTE_Window_Size(400,1280);
 8001604:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001608:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800160c:	f002 fbb3 	bl	8003d76 <BTE_Window_Size>

       BTE_ROP_Code(12);
 8001610:	200c      	movs	r0, #12
 8001612:	f002 f9fc 	bl	8003a0e <BTE_ROP_Code>
       BTE_Operation_Code(2); //BTE move
 8001616:	2002      	movs	r0, #2
 8001618:	f002 fa19 	bl	8003a4e <BTE_Operation_Code>
       BTE_Enable();		  //memory copy s0(layer2) to layer1
 800161c:	f002 f9ba 	bl	8003994 <BTE_Enable>
       Check_BTE_Busy();
 8001620:	f002 f9ce 	bl	80039c0 <Check_BTE_Busy>
	  for(i=0;i<200;i+=8)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3308      	adds	r3, #8
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2bc7      	cmp	r3, #199	; 0xc7
 800162e:	f67f af6a 	bls.w	8001506 <App_Demo_Scrolling_Text+0x226>
	  }

	  for(i=0;i<100;i+=8)
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	e093      	b.n	8001760 <App_Demo_Scrolling_Text+0x480>
 8001638:	08008898 	.word	0x08008898
	  {
	   	Canvas_Image_Start_address(layer2_start_addr);
 800163c:	f44f 207a 	mov.w	r0, #1024000	; 0xfa000
 8001640:	f001 ff95 	bl	800356e <Canvas_Image_Start_address>
	    Canvas_image_width(400);//
 8001644:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001648:	f001 ffb4 	bl	80035b4 <Canvas_image_width>
        Active_Window_XY(0,0);
 800164c:	2100      	movs	r1, #0
 800164e:	2000      	movs	r0, #0
 8001650:	f001 ffc7 	bl	80035e2 <Active_Window_XY>
	    Active_Window_WH(400,1280);
 8001654:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001658:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800165c:	f001 ffe9 	bl	8003632 <Active_Window_WH>

 	     Foreground_color_65k(Black);
 8001660:	2000      	movs	r0, #0
 8001662:	f002 fe95 	bl	8004390 <Foreground_color_65k>
	     Line_Start_XY(0,0);
 8001666:	2100      	movs	r1, #0
 8001668:	2000      	movs	r0, #0
 800166a:	f002 f896 	bl	800379a <Line_Start_XY>
	     Line_End_XY(399,1200);
 800166e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8001672:	f240 108f 	movw	r0, #399	; 0x18f
 8001676:	f002 f8c0 	bl	80037fa <Line_End_XY>
	     Start_Square_Fill();
 800167a:	f002 f8ee 	bl	800385a <Start_Square_Fill>

		 SFI_DMA_Destination_Upper_Left_Corner(0,0);
 800167e:	2100      	movs	r1, #0
 8001680:	2000      	movs	r0, #0
 8001682:	f002 fcfa 	bl	800407a <SFI_DMA_Destination_Upper_Left_Corner>
         SFI_DMA_Transfer_Width_Height(400,1280);
 8001686:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800168a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800168e:	f002 fd24 	bl	80040da <SFI_DMA_Transfer_Width_Height>
         SFI_DMA_Source_Width(400);//
 8001692:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001696:	f002 fd50 	bl	800413a <SFI_DMA_Source_Width>
	     SFI_DMA_Source_Start_Address(640000);//	??
 800169a:	4836      	ldr	r0, [pc, #216]	; (8001774 <App_Demo_Scrolling_Text+0x494>)
 800169c:	f002 fcc2 	bl	8004024 <SFI_DMA_Source_Start_Address>
	     Start_SFI_DMA();
 80016a0:	f002 fb91 	bl	8003dc6 <Start_SFI_DMA>
         Check_Busy_SFI_DMA();
 80016a4:	f002 fba5 	bl	8003df2 <Check_Busy_SFI_DMA>

	  //BTE memory(move) layer3 to layer2
	   //BTE_S0_Color_16bpp();
       BTE_S0_Memory_Start_Address(layer3_start_addr);
 80016a8:	f44f 10fa 	mov.w	r0, #2048000	; 0x1f4000
 80016ac:	f002 fa3d 	bl	8003b2a <BTE_S0_Memory_Start_Address>
       BTE_S0_Image_Width(400);
 80016b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80016b4:	f002 fa5c 	bl	8003b70 <BTE_S0_Image_Width>
       BTE_S0_Window_Start_XY(i,0);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f002 fa6d 	bl	8003b9e <BTE_S0_Window_Start_XY>



       //BTE_Destination_Color_16bpp();
       BTE_Destination_Memory_Start_Address(layer2_start_addr);
 80016c4:	f44f 207a 	mov.w	r0, #1024000	; 0xfa000
 80016c8:	f002 faf3 	bl	8003cb2 <BTE_Destination_Memory_Start_Address>
       BTE_Destination_Image_Width(400);
 80016cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80016d0:	f002 fb12 	bl	8003cf8 <BTE_Destination_Image_Width>
       BTE_Destination_Window_Start_XY(0,72);
 80016d4:	2148      	movs	r1, #72	; 0x48
 80016d6:	2000      	movs	r0, #0
 80016d8:	f002 fb25 	bl	8003d26 <BTE_Destination_Window_Start_XY>
       BTE_Window_Size(399-i,24*4);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 80016e4:	3301      	adds	r3, #1
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	2160      	movs	r1, #96	; 0x60
 80016ea:	4618      	mov	r0, r3
 80016ec:	f002 fb43 	bl	8003d76 <BTE_Window_Size>

	   Background_color_65k(Red);//
 80016f0:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80016f4:	f002 fe73 	bl	80043de <Background_color_65k>

       BTE_ROP_Code(12);
 80016f8:	200c      	movs	r0, #12
 80016fa:	f002 f988 	bl	8003a0e <BTE_ROP_Code>
       BTE_Operation_Code(5); //BTE move with chroma key
 80016fe:	2005      	movs	r0, #5
 8001700:	f002 f9a5 	bl	8003a4e <BTE_Operation_Code>
       BTE_Enable();		  //memory copy s0(layer3) to layer1
 8001704:	f002 f946 	bl	8003994 <BTE_Enable>
       Check_BTE_Busy();
 8001708:	f002 f95a 	bl	80039c0 <Check_BTE_Busy>
//	   delay_ms(20);


   	  //BTE memory(move) layer2 to layer1
	   //BTE_S0_Color_16bpp();
       BTE_S0_Memory_Start_Address(layer2_start_addr);
 800170c:	f44f 207a 	mov.w	r0, #1024000	; 0xfa000
 8001710:	f002 fa0b 	bl	8003b2a <BTE_S0_Memory_Start_Address>
       BTE_S0_Image_Width(400);
 8001714:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001718:	f002 fa2a 	bl	8003b70 <BTE_S0_Image_Width>
       BTE_S0_Window_Start_XY(0,0);
 800171c:	2100      	movs	r1, #0
 800171e:	2000      	movs	r0, #0
 8001720:	f002 fa3d 	bl	8003b9e <BTE_S0_Window_Start_XY>

       //BTE_Destination_Color_16bpp();
       BTE_Destination_Memory_Start_Address(layer1_start_addr);
 8001724:	2000      	movs	r0, #0
 8001726:	f002 fac4 	bl	8003cb2 <BTE_Destination_Memory_Start_Address>
       BTE_Destination_Image_Width(400);
 800172a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800172e:	f002 fae3 	bl	8003cf8 <BTE_Destination_Image_Width>
       BTE_Destination_Window_Start_XY(0,0);
 8001732:	2100      	movs	r1, #0
 8001734:	2000      	movs	r0, #0
 8001736:	f002 faf6 	bl	8003d26 <BTE_Destination_Window_Start_XY>
       BTE_Window_Size(400,1280);
 800173a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800173e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001742:	f002 fb18 	bl	8003d76 <BTE_Window_Size>

       BTE_ROP_Code(12);
 8001746:	200c      	movs	r0, #12
 8001748:	f002 f961 	bl	8003a0e <BTE_ROP_Code>
       BTE_Operation_Code(2); //BTE move
 800174c:	2002      	movs	r0, #2
 800174e:	f002 f97e 	bl	8003a4e <BTE_Operation_Code>
       BTE_Enable();		  //memory copy s0(layer2) to layer1
 8001752:	f002 f91f 	bl	8003994 <BTE_Enable>
       Check_BTE_Busy();
 8001756:	f002 f933 	bl	80039c0 <Check_BTE_Busy>
	  for(i=0;i<100;i+=8)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3308      	adds	r3, #8
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b63      	cmp	r3, #99	; 0x63
 8001764:	f67f af6a 	bls.w	800163c <App_Demo_Scrolling_Text+0x35c>
	  }

	 		NextStep();
 8001768:	f000 fe72 	bl	8002450 <NextStep>

}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	0009c400 	.word	0x0009c400

08001778 <App_Demo_multi_frame_buffer>:



void App_Demo_multi_frame_buffer(void)
{    unsigned int i,j;
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
      unsigned long im=1;
 800177e:	2301      	movs	r3, #1
 8001780:	607b      	str	r3, [r7, #4]
    Select_Main_Window_16bpp();
 8001782:	f001 fb6e 	bl	8002e62 <Select_Main_Window_16bpp>
	Main_Image_Start_Address(0);
 8001786:	2000      	movs	r0, #0
 8001788:	f001 fd85 	bl	8003296 <Main_Image_Start_Address>
	Main_Image_Width(400);
 800178c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001790:	f001 fda4 	bl	80032dc <Main_Image_Width>
	Main_Window_Start_XY(0,0);
 8001794:	2100      	movs	r1, #0
 8001796:	2000      	movs	r0, #0
 8001798:	f001 fdb7 	bl	800330a <Main_Window_Start_XY>

      //DMA initial setting
	Enable_SFlash_SPI();
 800179c:	f001 f9f5 	bl	8002b8a <Enable_SFlash_SPI>
    Select_SFI_1();
 80017a0:	f002 fb4c 	bl	8003e3c <Select_SFI_1>
    Select_SFI_DMA_Mode();
 80017a4:	f002 fb76 	bl	8003e94 <Select_SFI_DMA_Mode>
    Select_SFI_24bit_Address();
 80017a8:	f002 fb8a 	bl	8003ec0 <Select_SFI_24bit_Address>

    //Select_SFI_Waveform_Mode_0();
    Select_SFI_Waveform_Mode_3();
 80017ac:	f002 fbb4 	bl	8003f18 <Select_SFI_Waveform_Mode_3>

    //Select_SFI_0_DummyRead();	//normal read mode
    Select_SFI_8_DummyRead(); //1byte dummy cycle
 80017b0:	f002 fbde 	bl	8003f70 <Select_SFI_8_DummyRead>
    //Select_SFI_16_DummyRead();
    //Select_SFI_24_DummyRead();

    Select_SFI_Single_Mode();
 80017b4:	f002 fbf6 	bl	8003fa4 <Select_SFI_Single_Mode>
    //Select_SFI_Dual_Mode0();
    //Select_SFI_Dual_Mode1();

    SPI_Clock_Period(0);
 80017b8:	2000      	movs	r0, #0
 80017ba:	f002 fc23 	bl	8004004 <SPI_Clock_Period>

	SFI_DMA_Destination_Upper_Left_Corner(0,0);
 80017be:	2100      	movs	r1, #0
 80017c0:	2000      	movs	r0, #0
 80017c2:	f002 fc5a 	bl	800407a <SFI_DMA_Destination_Upper_Left_Corner>
    SFI_DMA_Transfer_Width_Height(400,1280);
 80017c6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80017ca:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80017ce:	f002 fc84 	bl	80040da <SFI_DMA_Transfer_Width_Height>
    SFI_DMA_Source_Width(400);//
 80017d2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80017d6:	f002 fcb0 	bl	800413a <SFI_DMA_Source_Width>


 for(i=0;i<6;i++)
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	e040      	b.n	8001862 <App_Demo_multi_frame_buffer+0xea>
  {

	Canvas_Image_Start_address(im*400*1280*2*i);//Layer1~6
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	fb02 f303 	mul.w	r3, r2, r3
 80017e8:	f44f 227a 	mov.w	r2, #1024000	; 0xfa000
 80017ec:	fb02 f303 	mul.w	r3, r2, r3
 80017f0:	4618      	mov	r0, r3
 80017f2:	f001 febc 	bl	800356e <Canvas_Image_Start_address>
	Canvas_image_width(400);//
 80017f6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80017fa:	f001 fedb 	bl	80035b4 <Canvas_image_width>
    Active_Window_XY(0,0);
 80017fe:	2100      	movs	r1, #0
 8001800:	2000      	movs	r0, #0
 8001802:	f001 feee 	bl	80035e2 <Active_Window_XY>
	Active_Window_WH(400,1280);
 8001806:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800180a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800180e:	f001 ff10 	bl	8003632 <Active_Window_WH>
	//LCD_DisplayString(0,Line23 ,"  Demo Mulit Frame Buffer",Black,White);

   */


	  SFI_DMA_Source_Start_Address(im*400*1280*2*i);//
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	fb02 f303 	mul.w	r3, r2, r3
 800181a:	f44f 227a 	mov.w	r2, #1024000	; 0xfa000
 800181e:	fb02 f303 	mul.w	r3, r2, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f002 fbfe 	bl	8004024 <SFI_DMA_Source_Start_Address>
	  Start_SFI_DMA();
 8001828:	f002 facd 	bl	8003dc6 <Start_SFI_DMA>
      Check_Busy_SFI_DMA();
 800182c:	f002 fae1 	bl	8003df2 <Check_Busy_SFI_DMA>
	  //delay_ms(500);
	  delay_ms(100);
 8001830:	2064      	movs	r0, #100	; 0x64
 8001832:	f000 fe3e 	bl	80024b2 <delay_ms>
	  Main_Image_Width(400);
 8001836:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800183a:	f001 fd4f 	bl	80032dc <Main_Image_Width>
      Main_Window_Start_XY(0,0);
 800183e:	2100      	movs	r1, #0
 8001840:	2000      	movs	r0, #0
 8001842:	f001 fd62 	bl	800330a <Main_Window_Start_XY>
	  Main_Image_Start_Address(im*400*1280*2*i);//switch display windows to
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	fb02 f303 	mul.w	r3, r2, r3
 800184e:	f44f 227a 	mov.w	r2, #1024000	; 0xfa000
 8001852:	fb02 f303 	mul.w	r3, r2, r3
 8001856:	4618      	mov	r0, r3
 8001858:	f001 fd1d 	bl	8003296 <Main_Image_Start_Address>
 for(i=0;i<6;i++)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3301      	adds	r3, #1
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2b05      	cmp	r3, #5
 8001866:	d9bb      	bls.n	80017e0 <App_Demo_multi_frame_buffer+0x68>
	 }
	//delay_ms(2000);
//	Color_Bar_ON();

	//set canvas to 8188
    Select_Main_Window_16bpp();
 8001868:	f001 fafb 	bl	8002e62 <Select_Main_Window_16bpp>
	Main_Image_Start_Address(0);
 800186c:	2000      	movs	r0, #0
 800186e:	f001 fd12 	bl	8003296 <Main_Image_Start_Address>
	Main_Image_Width(3200);
 8001872:	f44f 6048 	mov.w	r0, #3200	; 0xc80
 8001876:	f001 fd31 	bl	80032dc <Main_Image_Width>
	Main_Window_Start_XY(0,0);
 800187a:	2100      	movs	r1, #0
 800187c:	2000      	movs	r0, #0
 800187e:	f001 fd44 	bl	800330a <Main_Window_Start_XY>
	Canvas_Image_Start_address(0);
 8001882:	2000      	movs	r0, #0
 8001884:	f001 fe73 	bl	800356e <Canvas_Image_Start_address>
	Canvas_image_width(3200);//
 8001888:	f44f 6048 	mov.w	r0, #3200	; 0xc80
 800188c:	f001 fe92 	bl	80035b4 <Canvas_image_width>
	Active_Window_XY(0,0);
 8001890:	2100      	movs	r1, #0
 8001892:	2000      	movs	r0, #0
 8001894:	f001 fea5 	bl	80035e2 <Active_Window_XY>
	Active_Window_WH(3200,1280);
 8001898:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800189c:	f44f 6048 	mov.w	r0, #3200	; 0xc80
 80018a0:	f001 fec7 	bl	8003632 <Active_Window_WH>

	for(im=0;im<6;im++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	e078      	b.n	800199c <App_Demo_multi_frame_buffer+0x224>
    {
	Canvas_Image_Start_address(0);//Layer1~6
 80018aa:	2000      	movs	r0, #0
 80018ac:	f001 fe5f 	bl	800356e <Canvas_Image_Start_address>

 	Foreground_color_65k(Black);
 80018b0:	2000      	movs	r0, #0
 80018b2:	f002 fd6d 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0+im*400,0);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	461a      	mov	r2, r3
 80018bc:	0092      	lsls	r2, r2, #2
 80018be:	4413      	add	r3, r2
 80018c0:	461a      	mov	r2, r3
 80018c2:	0091      	lsls	r1, r2, #2
 80018c4:	461a      	mov	r2, r3
 80018c6:	460b      	mov	r3, r1
 80018c8:	4413      	add	r3, r2
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f001 ff62 	bl	800379a <Line_Start_XY>
	Line_End_XY(399+im*400,1255);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	4413      	add	r3, r2
 80018e0:	461a      	mov	r2, r3
 80018e2:	0091      	lsls	r1, r2, #2
 80018e4:	461a      	mov	r2, r3
 80018e6:	460b      	mov	r3, r1
 80018e8:	4413      	add	r3, r2
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	f203 138f 	addw	r3, r3, #399	; 0x18f
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	f240 41e7 	movw	r1, #1255	; 0x4e7
 80018f8:	4618      	mov	r0, r3
 80018fa:	f001 ff7e 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 80018fe:	f001 ffac 	bl	800385a <Start_Square_Fill>

	Foreground_color_65k(Blue2);
 8001902:	f240 501f 	movw	r0, #1311	; 0x51f
 8001906:	f002 fd43 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0+im*400,1256);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	b29b      	uxth	r3, r3
 800190e:	461a      	mov	r2, r3
 8001910:	0092      	lsls	r2, r2, #2
 8001912:	4413      	add	r3, r2
 8001914:	461a      	mov	r2, r3
 8001916:	0091      	lsls	r1, r2, #2
 8001918:	461a      	mov	r2, r3
 800191a:	460b      	mov	r3, r1
 800191c:	4413      	add	r3, r2
 800191e:	011b      	lsls	r3, r3, #4
 8001920:	b29b      	uxth	r3, r3
 8001922:	f44f 619d 	mov.w	r1, #1256	; 0x4e8
 8001926:	4618      	mov	r0, r3
 8001928:	f001 ff37 	bl	800379a <Line_Start_XY>
	Line_End_XY(399+im*400,1279);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	b29b      	uxth	r3, r3
 8001930:	461a      	mov	r2, r3
 8001932:	0092      	lsls	r2, r2, #2
 8001934:	4413      	add	r3, r2
 8001936:	461a      	mov	r2, r3
 8001938:	0091      	lsls	r1, r2, #2
 800193a:	461a      	mov	r2, r3
 800193c:	460b      	mov	r3, r1
 800193e:	4413      	add	r3, r2
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	b29b      	uxth	r3, r3
 8001944:	f203 138f 	addw	r3, r3, #399	; 0x18f
 8001948:	b29b      	uxth	r3, r3
 800194a:	f240 41ff 	movw	r1, #1279	; 0x4ff
 800194e:	4618      	mov	r0, r3
 8001950:	f001 ff53 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 8001954:	f001 ff81 	bl	800385a <Start_Square_Fill>


    SFI_DMA_Destination_Upper_Left_Corner(0+im*400,0);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	b29b      	uxth	r3, r3
 800195c:	461a      	mov	r2, r3
 800195e:	0092      	lsls	r2, r2, #2
 8001960:	4413      	add	r3, r2
 8001962:	461a      	mov	r2, r3
 8001964:	0091      	lsls	r1, r2, #2
 8001966:	461a      	mov	r2, r3
 8001968:	460b      	mov	r3, r1
 800196a:	4413      	add	r3, r2
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	b29b      	uxth	r3, r3
 8001970:	2100      	movs	r1, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f002 fb81 	bl	800407a <SFI_DMA_Destination_Upper_Left_Corner>
	SFI_DMA_Source_Start_Address(im*1280*400*2);//
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f44f 227a 	mov.w	r2, #1024000	; 0xfa000
 800197e:	fb02 f303 	mul.w	r3, r2, r3
 8001982:	4618      	mov	r0, r3
 8001984:	f002 fb4e 	bl	8004024 <SFI_DMA_Source_Start_Address>
	Start_SFI_DMA();
 8001988:	f002 fa1d 	bl	8003dc6 <Start_SFI_DMA>
    Check_Busy_SFI_DMA();
 800198c:	f002 fa31 	bl	8003df2 <Check_Busy_SFI_DMA>
	 	 delay_ms(5);
 8001990:	2005      	movs	r0, #5
 8001992:	f000 fd8e 	bl	80024b2 <delay_ms>
	for(im=0;im<6;im++)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3301      	adds	r3, #1
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b05      	cmp	r3, #5
 80019a0:	d983      	bls.n	80018aa <App_Demo_multi_frame_buffer+0x132>
	Show_String("Demo Mulit Frame Buffer");
	 */
	}
//	Color_Bar_OFF();

   for(j=0;j<6;j++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	e026      	b.n	80019f6 <App_Demo_multi_frame_buffer+0x27e>
   {
	for(i=0;i<400;i++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	e019      	b.n	80019e2 <App_Demo_multi_frame_buffer+0x26a>
	{
	 Main_Window_Start_XY(i+j*400,0);
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	461a      	mov	r2, r3
 80019b4:	0092      	lsls	r2, r2, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	461a      	mov	r2, r3
 80019ba:	0091      	lsls	r1, r2, #2
 80019bc:	461a      	mov	r2, r3
 80019be:	460b      	mov	r3, r1
 80019c0:	4413      	add	r3, r2
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	4413      	add	r3, r2
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	2100      	movs	r1, #0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f001 fc9a 	bl	800330a <Main_Window_Start_XY>
	 delay_ms(5);
 80019d6:	2005      	movs	r0, #5
 80019d8:	f000 fd6b 	bl	80024b2 <delay_ms>
	for(i=0;i<400;i++)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	3301      	adds	r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80019e8:	d3e1      	bcc.n	80019ae <App_Demo_multi_frame_buffer+0x236>
	}
    delay_ms(30);
 80019ea:	201e      	movs	r0, #30
 80019ec:	f000 fd61 	bl	80024b2 <delay_ms>
   for(j=0;j<6;j++)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	3301      	adds	r3, #1
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b05      	cmp	r3, #5
 80019fa:	d9d5      	bls.n	80019a8 <App_Demo_multi_frame_buffer+0x230>
   }

   for(j=5;j>0;j--)
 80019fc:	2305      	movs	r3, #5
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	e023      	b.n	8001a4a <App_Demo_multi_frame_buffer+0x2d2>
   {
	for(i=0;i<400;i++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	e019      	b.n	8001a3c <App_Demo_multi_frame_buffer+0x2c4>
	{
	 Main_Window_Start_XY(j*400-i,0);
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	0092      	lsls	r2, r2, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	461a      	mov	r2, r3
 8001a14:	0091      	lsls	r1, r2, #2
 8001a16:	461a      	mov	r2, r3
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f001 fc6d 	bl	800330a <Main_Window_Start_XY>
	 delay_ms(5);
 8001a30:	2005      	movs	r0, #5
 8001a32:	f000 fd3e 	bl	80024b2 <delay_ms>
	for(i=0;i<400;i++)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001a42:	d3e1      	bcc.n	8001a08 <App_Demo_multi_frame_buffer+0x290>
   for(j=5;j>0;j--)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1d8      	bne.n	8001a02 <App_Demo_multi_frame_buffer+0x28a>
	}

   }

   delay_ms(500);
 8001a50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a54:	f000 fd2d 	bl	80024b2 <delay_ms>

    		NextStep();
 8001a58:	f000 fcfa 	bl	8002450 <NextStep>
}
 8001a5c:	bf00      	nop
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <App_Demo_slide_frame_buffer>:



void App_Demo_slide_frame_buffer(void)
{		unsigned long im=1;
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	607b      	str	r3, [r7, #4]
     unsigned int i,j;

    Select_Main_Window_16bpp();
 8001a6e:	f001 f9f8 	bl	8002e62 <Select_Main_Window_16bpp>
	Main_Image_Start_Address(0);
 8001a72:	2000      	movs	r0, #0
 8001a74:	f001 fc0f 	bl	8003296 <Main_Image_Start_Address>
	Main_Image_Width(400);
 8001a78:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001a7c:	f001 fc2e 	bl	80032dc <Main_Image_Width>
	Main_Window_Start_XY(0,0);
 8001a80:	2100      	movs	r1, #0
 8001a82:	2000      	movs	r0, #0
 8001a84:	f001 fc41 	bl	800330a <Main_Window_Start_XY>

      //DMA initial setting
	Enable_SFlash_SPI();
 8001a88:	f001 f87f 	bl	8002b8a <Enable_SFlash_SPI>
    Select_SFI_1();
 8001a8c:	f002 f9d6 	bl	8003e3c <Select_SFI_1>
    Select_SFI_DMA_Mode();
 8001a90:	f002 fa00 	bl	8003e94 <Select_SFI_DMA_Mode>
    Select_SFI_24bit_Address();
 8001a94:	f002 fa14 	bl	8003ec0 <Select_SFI_24bit_Address>

    //Select_SFI_Waveform_Mode_0();
    Select_SFI_Waveform_Mode_3();
 8001a98:	f002 fa3e 	bl	8003f18 <Select_SFI_Waveform_Mode_3>

    //Select_SFI_0_DummyRead();	//normal read mode
    Select_SFI_8_DummyRead(); //1byte dummy cycle
 8001a9c:	f002 fa68 	bl	8003f70 <Select_SFI_8_DummyRead>
    //Select_SFI_16_DummyRead();
    //Select_SFI_24_DummyRead();

    Select_SFI_Single_Mode();
 8001aa0:	f002 fa80 	bl	8003fa4 <Select_SFI_Single_Mode>
    //Select_SFI_Dual_Mode0();
    //Select_SFI_Dual_Mode1();

    SPI_Clock_Period(0);
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f002 faad 	bl	8004004 <SPI_Clock_Period>

	SFI_DMA_Destination_Upper_Left_Corner(0,0);
 8001aaa:	2100      	movs	r1, #0
 8001aac:	2000      	movs	r0, #0
 8001aae:	f002 fae4 	bl	800407a <SFI_DMA_Destination_Upper_Left_Corner>
    SFI_DMA_Transfer_Width_Height(400,1280);
 8001ab2:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001ab6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001aba:	f002 fb0e 	bl	80040da <SFI_DMA_Transfer_Width_Height>
    SFI_DMA_Source_Width(400);//
 8001abe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001ac2:	f002 fb3a 	bl	800413a <SFI_DMA_Source_Width>


	//Color_Bar_ON();

	//set canvas to 1600
    Select_Main_Window_16bpp();
 8001ac6:	f001 f9cc 	bl	8002e62 <Select_Main_Window_16bpp>
	Main_Image_Start_Address(0);
 8001aca:	2000      	movs	r0, #0
 8001acc:	f001 fbe3 	bl	8003296 <Main_Image_Start_Address>
	Main_Image_Width(800);
 8001ad0:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001ad4:	f001 fc02 	bl	80032dc <Main_Image_Width>
	Main_Window_Start_XY(0,0);
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2000      	movs	r0, #0
 8001adc:	f001 fc15 	bl	800330a <Main_Window_Start_XY>
	Canvas_Image_Start_address(0);
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f001 fd44 	bl	800356e <Canvas_Image_Start_address>
	Canvas_image_width(800);//
 8001ae6:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001aea:	f001 fd63 	bl	80035b4 <Canvas_image_width>
	Active_Window_XY(0,0);
 8001aee:	2100      	movs	r1, #0
 8001af0:	2000      	movs	r0, #0
 8001af2:	f001 fd76 	bl	80035e2 <Active_Window_XY>
	Active_Window_WH(800,2560);
 8001af6:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8001afa:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001afe:	f001 fd98 	bl	8003632 <Active_Window_WH>

	Canvas_Image_Start_address(0);//
 8001b02:	2000      	movs	r0, #0
 8001b04:	f001 fd33 	bl	800356e <Canvas_Image_Start_address>

 	Foreground_color_65k(Black);
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f002 fc41 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,0);
 8001b0e:	2100      	movs	r1, #0
 8001b10:	2000      	movs	r0, #0
 8001b12:	f001 fe42 	bl	800379a <Line_Start_XY>
	Line_End_XY(799,2559);
 8001b16:	f640 11ff 	movw	r1, #2559	; 0x9ff
 8001b1a:	f240 301f 	movw	r0, #799	; 0x31f
 8001b1e:	f001 fe6c 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 8001b22:	f001 fe9a 	bl	800385a <Start_Square_Fill>

    SFI_DMA_Destination_Upper_Left_Corner(0,0);
 8001b26:	2100      	movs	r1, #0
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f002 faa6 	bl	800407a <SFI_DMA_Destination_Upper_Left_Corner>
	SFI_DMA_Source_Start_Address(0);//
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f002 fa78 	bl	8004024 <SFI_DMA_Source_Start_Address>
	Start_SFI_DMA();
 8001b34:	f002 f947 	bl	8003dc6 <Start_SFI_DMA>
    Check_Busy_SFI_DMA();
 8001b38:	f002 f95b 	bl	8003df2 <Check_Busy_SFI_DMA>

    SFI_DMA_Destination_Upper_Left_Corner(400,0);
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001b42:	f002 fa9a 	bl	800407a <SFI_DMA_Destination_Upper_Left_Corner>
	SFI_DMA_Source_Start_Address(im*400*1280*2);//
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f44f 227a 	mov.w	r2, #1024000	; 0xfa000
 8001b4c:	fb02 f303 	mul.w	r3, r2, r3
 8001b50:	4618      	mov	r0, r3
 8001b52:	f002 fa67 	bl	8004024 <SFI_DMA_Source_Start_Address>
	Start_SFI_DMA();
 8001b56:	f002 f936 	bl	8003dc6 <Start_SFI_DMA>
    Check_Busy_SFI_DMA();
 8001b5a:	f002 f94a 	bl	8003df2 <Check_Busy_SFI_DMA>

	SFI_DMA_Destination_Upper_Left_Corner(0,1280);
 8001b5e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001b62:	2000      	movs	r0, #0
 8001b64:	f002 fa89 	bl	800407a <SFI_DMA_Destination_Upper_Left_Corner>
	SFI_DMA_Source_Start_Address(im*400*1280*4);//
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f44f 12fa 	mov.w	r2, #2048000	; 0x1f4000
 8001b6e:	fb02 f303 	mul.w	r3, r2, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f002 fa56 	bl	8004024 <SFI_DMA_Source_Start_Address>
	Start_SFI_DMA();
 8001b78:	f002 f925 	bl	8003dc6 <Start_SFI_DMA>
    Check_Busy_SFI_DMA();
 8001b7c:	f002 f939 	bl	8003df2 <Check_Busy_SFI_DMA>

	SFI_DMA_Destination_Upper_Left_Corner(400,1280);
 8001b80:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001b84:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001b88:	f002 fa77 	bl	800407a <SFI_DMA_Destination_Upper_Left_Corner>
	SFI_DMA_Source_Start_Address(im*400*1280*6);//
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a39      	ldr	r2, [pc, #228]	; (8001c74 <App_Demo_slide_frame_buffer+0x210>)
 8001b90:	fb02 f303 	mul.w	r3, r2, r3
 8001b94:	4618      	mov	r0, r3
 8001b96:	f002 fa45 	bl	8004024 <SFI_DMA_Source_Start_Address>
	Start_SFI_DMA();
 8001b9a:	f002 f914 	bl	8003dc6 <Start_SFI_DMA>
    Check_Busy_SFI_DMA();
 8001b9e:	f002 f928 	bl	8003df2 <Check_Busy_SFI_DMA>


	//Color_Bar_OFF();


	for(i=0;i<800-400+1;i++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	e00b      	b.n	8001bc0 <App_Demo_slide_frame_buffer+0x15c>
	{
	 Main_Window_Start_XY(i,0);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f001 fbab 	bl	800330a <Main_Window_Start_XY>
	 delay_ms(5);
 8001bb4:	2005      	movs	r0, #5
 8001bb6:	f000 fc7c 	bl	80024b2 <delay_ms>
	for(i=0;i<800-400+1;i++)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001bc6:	d9ef      	bls.n	8001ba8 <App_Demo_slide_frame_buffer+0x144>
	}
    delay_ms(1);
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f000 fc72 	bl	80024b2 <delay_ms>

	for(j=0;j<2560-1280+1;j++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	e00c      	b.n	8001bee <App_Demo_slide_frame_buffer+0x18a>
	{
	 Main_Window_Start_XY(400,j);
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001bde:	f001 fb94 	bl	800330a <Main_Window_Start_XY>
	 delay_ms(5);
 8001be2:	2005      	movs	r0, #5
 8001be4:	f000 fc65 	bl	80024b2 <delay_ms>
	for(j=0;j<2560-1280+1;j++)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	3301      	adds	r3, #1
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001bf4:	d9ee      	bls.n	8001bd4 <App_Demo_slide_frame_buffer+0x170>
	}
	delay_ms(1);
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	f000 fc5b 	bl	80024b2 <delay_ms>


	for(i=800-400;i>0;i--)
 8001bfc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	e00c      	b.n	8001c1e <App_Demo_slide_frame_buffer+0x1ba>
	{
	 Main_Window_Start_XY(i,1280);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f001 fb7c 	bl	800330a <Main_Window_Start_XY>
	 delay_ms(5);
 8001c12:	2005      	movs	r0, #5
 8001c14:	f000 fc4d 	bl	80024b2 <delay_ms>
	for(i=800-400;i>0;i--)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1ef      	bne.n	8001c04 <App_Demo_slide_frame_buffer+0x1a0>
	}
	Main_Window_Start_XY(0,1280);
 8001c24:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f001 fb6e 	bl	800330a <Main_Window_Start_XY>
	delay_ms(1);
 8001c2e:	2001      	movs	r0, #1
 8001c30:	f000 fc3f 	bl	80024b2 <delay_ms>

	for(j=2560-1280;j>0;j--)
 8001c34:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	e00b      	b.n	8001c54 <App_Demo_slide_frame_buffer+0x1f0>
	{
	 Main_Window_Start_XY(0,j);
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	4619      	mov	r1, r3
 8001c42:	2000      	movs	r0, #0
 8001c44:	f001 fb61 	bl	800330a <Main_Window_Start_XY>
	 delay_ms(5);
 8001c48:	2005      	movs	r0, #5
 8001c4a:	f000 fc32 	bl	80024b2 <delay_ms>
	for(j=2560-1280;j>0;j--)
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	3b01      	subs	r3, #1
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <App_Demo_slide_frame_buffer+0x1d8>
	}
	Main_Window_Start_XY(0,0);
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f001 fb54 	bl	800330a <Main_Window_Start_XY>
	delay_ms(5);
 8001c62:	2005      	movs	r0, #5
 8001c64:	f000 fc25 	bl	80024b2 <delay_ms>


 		NextStep();
 8001c68:	f000 fbf2 	bl	8002450 <NextStep>
}
 8001c6c:	bf00      	nop
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	002ee000 	.word	0x002ee000

08001c78 <mono_Demo>:
 	NextStep();

}

void mono_Demo(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0


	Select_Main_Window_16bpp();
 8001c7c:	f001 f8f1 	bl	8002e62 <Select_Main_Window_16bpp>
	Main_Image_Start_Address(0);
 8001c80:	2000      	movs	r0, #0
 8001c82:	f001 fb08 	bl	8003296 <Main_Image_Start_Address>
	Main_Image_Width(400);
 8001c86:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001c8a:	f001 fb27 	bl	80032dc <Main_Image_Width>
	Main_Window_Start_XY(0,0);
 8001c8e:	2100      	movs	r1, #0
 8001c90:	2000      	movs	r0, #0
 8001c92:	f001 fb3a 	bl	800330a <Main_Window_Start_XY>
	Canvas_Image_Start_address(0);
 8001c96:	2000      	movs	r0, #0
 8001c98:	f001 fc69 	bl	800356e <Canvas_Image_Start_address>
	Canvas_image_width(400);//
 8001c9c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001ca0:	f001 fc88 	bl	80035b4 <Canvas_image_width>
	Active_Window_XY(0,0);
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f001 fc9b 	bl	80035e2 <Active_Window_XY>
	Active_Window_WH(400,1280);
 8001cac:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001cb0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001cb4:	f001 fcbd 	bl	8003632 <Active_Window_WH>


	Foreground_color_65k(Red);
 8001cb8:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001cbc:	f002 fb68 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,0);
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f001 fd69 	bl	800379a <Line_Start_XY>
	Line_End_XY(399,1279);
 8001cc8:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8001ccc:	f240 108f 	movw	r0, #399	; 0x18f
 8001cd0:	f001 fd93 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 8001cd4:	f001 fdc1 	bl	800385a <Start_Square_Fill>
	NextStep();
 8001cd8:	f000 fbba 	bl	8002450 <NextStep>
	Foreground_color_65k(Green);
 8001cdc:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001ce0:	f002 fb56 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,0);
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f001 fd57 	bl	800379a <Line_Start_XY>
	Line_End_XY(399,1279);
 8001cec:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8001cf0:	f240 108f 	movw	r0, #399	; 0x18f
 8001cf4:	f001 fd81 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 8001cf8:	f001 fdaf 	bl	800385a <Start_Square_Fill>
	NextStep();
 8001cfc:	f000 fba8 	bl	8002450 <NextStep>
 	Foreground_color_65k(Blue);
 8001d00:	201f      	movs	r0, #31
 8001d02:	f002 fb45 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,0);
 8001d06:	2100      	movs	r1, #0
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f001 fd46 	bl	800379a <Line_Start_XY>
	Line_End_XY(399,1279);
 8001d0e:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8001d12:	f240 108f 	movw	r0, #399	; 0x18f
 8001d16:	f001 fd70 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 8001d1a:	f001 fd9e 	bl	800385a <Start_Square_Fill>
	NextStep();
 8001d1e:	f000 fb97 	bl	8002450 <NextStep>
	Foreground_color_65k(Cyan);
 8001d22:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8001d26:	f002 fb33 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,0);
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f001 fd34 	bl	800379a <Line_Start_XY>
	Line_End_XY(399,1279);
 8001d32:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8001d36:	f240 108f 	movw	r0, #399	; 0x18f
 8001d3a:	f001 fd5e 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 8001d3e:	f001 fd8c 	bl	800385a <Start_Square_Fill>
	NextStep();
 8001d42:	f000 fb85 	bl	8002450 <NextStep>
	Foreground_color_65k(Yellow);
 8001d46:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001d4a:	f002 fb21 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,0);
 8001d4e:	2100      	movs	r1, #0
 8001d50:	2000      	movs	r0, #0
 8001d52:	f001 fd22 	bl	800379a <Line_Start_XY>
	Line_End_XY(399,1279);
 8001d56:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8001d5a:	f240 108f 	movw	r0, #399	; 0x18f
 8001d5e:	f001 fd4c 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 8001d62:	f001 fd7a 	bl	800385a <Start_Square_Fill>
	NextStep();
 8001d66:	f000 fb73 	bl	8002450 <NextStep>
  	Foreground_color_65k(Magenta);
 8001d6a:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8001d6e:	f002 fb0f 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,0);
 8001d72:	2100      	movs	r1, #0
 8001d74:	2000      	movs	r0, #0
 8001d76:	f001 fd10 	bl	800379a <Line_Start_XY>
	Line_End_XY(399,1279);
 8001d7a:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8001d7e:	f240 108f 	movw	r0, #399	; 0x18f
 8001d82:	f001 fd3a 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 8001d86:	f001 fd68 	bl	800385a <Start_Square_Fill>
	NextStep();
 8001d8a:	f000 fb61 	bl	8002450 <NextStep>
 	Foreground_color_65k(White);
 8001d8e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d92:	f002 fafd 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,0);
 8001d96:	2100      	movs	r1, #0
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f001 fcfe 	bl	800379a <Line_Start_XY>
	Line_End_XY(399,1279);
 8001d9e:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8001da2:	f240 108f 	movw	r0, #399	; 0x18f
 8001da6:	f001 fd28 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 8001daa:	f001 fd56 	bl	800385a <Start_Square_Fill>
	NextStep();
 8001dae:	f000 fb4f 	bl	8002450 <NextStep>
  	Foreground_color_65k(Black);
 8001db2:	2000      	movs	r0, #0
 8001db4:	f002 faec 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,0);
 8001db8:	2100      	movs	r1, #0
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f001 fced 	bl	800379a <Line_Start_XY>
	Line_End_XY(399,1279);
 8001dc0:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8001dc4:	f240 108f 	movw	r0, #399	; 0x18f
 8001dc8:	f001 fd17 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 8001dcc:	f001 fd45 	bl	800385a <Start_Square_Fill>
	NextStep();
 8001dd0:	f000 fb3e 	bl	8002450 <NextStep>
}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <Text_Demo>:


void Text_Demo(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af02      	add	r7, sp, #8
//    unsigned int i,j;
 	Select_Main_Window_16bpp();
 8001dde:	f001 f840 	bl	8002e62 <Select_Main_Window_16bpp>
	Main_Image_Start_Address(0);
 8001de2:	2000      	movs	r0, #0
 8001de4:	f001 fa57 	bl	8003296 <Main_Image_Start_Address>
	Main_Image_Width(400);
 8001de8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001dec:	f001 fa76 	bl	80032dc <Main_Image_Width>
	Main_Window_Start_XY(0,0);
 8001df0:	2100      	movs	r1, #0
 8001df2:	2000      	movs	r0, #0
 8001df4:	f001 fa89 	bl	800330a <Main_Window_Start_XY>

	Canvas_Image_Start_address(0);//Layer 1
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f001 fbb8 	bl	800356e <Canvas_Image_Start_address>
	Canvas_image_width(400);//
 8001dfe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001e02:	f001 fbd7 	bl	80035b4 <Canvas_image_width>
    Active_Window_XY(0,0);
 8001e06:	2100      	movs	r1, #0
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f001 fbea 	bl	80035e2 <Active_Window_XY>
	Active_Window_WH(400,1280);
 8001e0e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001e12:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001e16:	f001 fc0c 	bl	8003632 <Active_Window_WH>
 // 	NextStep();
  //	Color_Bar_OFF();



 	Foreground_color_65k(White);
 8001e1a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e1e:	f002 fab7 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,0);
 8001e22:	2100      	movs	r1, #0
 8001e24:	2000      	movs	r0, #0
 8001e26:	f001 fcb8 	bl	800379a <Line_Start_XY>
	Line_End_XY(399,1247);
 8001e2a:	f240 41df 	movw	r1, #1247	; 0x4df
 8001e2e:	f240 108f 	movw	r0, #399	; 0x18f
 8001e32:	f001 fce2 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 8001e36:	f001 fd10 	bl	800385a <Start_Square_Fill>

	Foreground_color_65k(Blue2);
 8001e3a:	f240 501f 	movw	r0, #1311	; 0x51f
 8001e3e:	f002 faa7 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,1248);
 8001e42:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8001e46:	2000      	movs	r0, #0
 8001e48:	f001 fca7 	bl	800379a <Line_Start_XY>
	Line_End_XY(399,1279);
 8001e4c:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8001e50:	f240 108f 	movw	r0, #399	; 0x18f
 8001e54:	f001 fcd1 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 8001e58:	f001 fcff 	bl	800385a <Start_Square_Fill>

  /////////////////////////////////////////////////////////////////////////////
	LCD_DisplayString(0,Line48 ,"EastRising",Blue2,White);
 8001e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	f240 531f 	movw	r3, #1311	; 0x51f
 8001e66:	4a8d      	ldr	r2, [pc, #564]	; (800209c <Text_Demo+0x2c4>)
 8001e68:	f44f 6190 	mov.w	r1, #1152	; 0x480
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f000 fcf7 	bl	8002860 <LCD_DisplayString>
	Foreground_color_65k(White);
 8001e72:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e76:	f002 fa8b 	bl	8004390 <Foreground_color_65k>
	Background_color_65k(Blue2);
 8001e7a:	f240 501f 	movw	r0, #1311	; 0x51f
 8001e7e:	f002 faae 	bl	80043de <Background_color_65k>
	CGROM_Select_Internal_CGROM();
 8001e82:	f002 f975 	bl	8004170 <CGROM_Select_Internal_CGROM>
	Font_Select_12x24_24x24();
 8001e86:	f002 f9c1 	bl	800420c <Font_Select_12x24_24x24>
 	Goto_Text_XY(0,Line49);
 8001e8a:	f44f 6193 	mov.w	r1, #1176	; 0x498
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f001 fc4f 	bl	8003732 <Goto_Text_XY>
	Show_String("www.buydisplay.ocm");
 8001e94:	4882      	ldr	r0, [pc, #520]	; (80020a0 <Text_Demo+0x2c8>)
 8001e96:	f002 fac9 	bl	800442c <Show_String>
	Foreground_color_65k(Blue2);
 8001e9a:	f240 501f 	movw	r0, #1311	; 0x51f
 8001e9e:	f002 fa77 	bl	8004390 <Foreground_color_65k>
	Background_color_65k(White);
 8001ea2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ea6:	f002 fa9a 	bl	80043de <Background_color_65k>
	Goto_Text_XY(0,Line50);
 8001eaa:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f001 fc3f 	bl	8003732 <Goto_Text_XY>
	Show_String("7.84 inch TFT Module 400*1280 Dots");
 8001eb4:	487b      	ldr	r0, [pc, #492]	; (80020a4 <Text_Demo+0x2cc>)
 8001eb6:	f002 fab9 	bl	800442c <Show_String>
//	NextStep();




	Foreground_color_65k(Black);
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f002 fa68 	bl	8004390 <Foreground_color_65k>
	Background_color_65k(White);
 8001ec0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ec4:	f002 fa8b 	bl	80043de <Background_color_65k>
	CGROM_Select_Internal_CGROM();
 8001ec8:	f002 f952 	bl	8004170 <CGROM_Select_Internal_CGROM>
	Font_Select_8x16_16x16();
 8001ecc:	f002 f984 	bl	80041d8 <Font_Select_8x16_16x16>
	Goto_Text_XY(0,10);
 8001ed0:	210a      	movs	r1, #10
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f001 fc2d 	bl	8003732 <Goto_Text_XY>
	Show_String("Embedded 8x16 ASCII Character");
 8001ed8:	4873      	ldr	r0, [pc, #460]	; (80020a8 <Text_Demo+0x2d0>)
 8001eda:	f002 faa7 	bl	800442c <Show_String>

	Font_Select_12x24_24x24();
 8001ede:	f002 f995 	bl	800420c <Font_Select_12x24_24x24>
	Goto_Text_XY(0,26);
 8001ee2:	211a      	movs	r1, #26
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f001 fc24 	bl	8003732 <Goto_Text_XY>
	Show_String("Embedded 12x24 ASCII Character");
 8001eea:	4870      	ldr	r0, [pc, #448]	; (80020ac <Text_Demo+0x2d4>)
 8001eec:	f002 fa9e 	bl	800442c <Show_String>

	Font_Select_16x32_32x32();
 8001ef0:	f002 f9a6 	bl	8004240 <Font_Select_16x32_32x32>
	Goto_Text_XY(0,50);
 8001ef4:	2132      	movs	r1, #50	; 0x32
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f001 fc1b 	bl	8003732 <Goto_Text_XY>
	Show_String("Embedded 16x32 ASCII ");
 8001efc:	486c      	ldr	r0, [pc, #432]	; (80020b0 <Text_Demo+0x2d8>)
 8001efe:	f002 fa95 	bl	800442c <Show_String>
	Font_Height_X2();
	Goto_Text_XY(0,64);
	Show_String("Character Width & High Enlarge x2");
	*/

	Font_Select_8x16_16x16();
 8001f02:	f002 f969 	bl	80041d8 <Font_Select_8x16_16x16>
	Font_Width_X1();
 8001f06:	f002 f9e1 	bl	80042cc <Font_Width_X1>
	Font_Height_X1();
 8001f0a:	f002 f9f9 	bl	8004300 <Font_Height_X1>
	Goto_Text_XY(0,100);
 8001f0e:	2164      	movs	r1, #100	; 0x64
 8001f10:	2000      	movs	r0, #0
 8001f12:	f001 fc0e 	bl	8003732 <Goto_Text_XY>
	Show_String("Supporting Genitop Inc. UNICODE/BIG5/GB etc. Serial Character ROM with 16x16/24x24/32X32 dots Font.");
 8001f16:	4867      	ldr	r0, [pc, #412]	; (80020b4 <Text_Demo+0x2dc>)
 8001f18:	f002 fa88 	bl	800442c <Show_String>
	Goto_Text_XY(0,132);
 8001f1c:	2184      	movs	r1, #132	; 0x84
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f001 fc07 	bl	8003732 <Goto_Text_XY>
	Show_String("The supporting product numbers are GT21L16TW/GT21H16T1W, GT23L16U2W, GT23L24T3Y/GT23H24T3Y, GT23L24M1Z, and GT23L32S4W/GT23H32S4W, GT23L24F6Y, GT23L24S1W.");
 8001f24:	4864      	ldr	r0, [pc, #400]	; (80020b8 <Text_Demo+0x2e0>)
 8001f26:	f002 fa81 	bl	800442c <Show_String>
	  //Foreground_color_65k(color65k_yellow);
      //Background_color_65k(color65k_purple);

	   //Font_Select_UserDefine_Mode();
       //CGROM_Select_Internal_CGROM();
        CGROM_Select_Genitop_FontROM();
 8001f2a:	f002 f93b 	bl	80041a4 <CGROM_Select_Genitop_FontROM>

	 //GTFont_Select_GT21L16TW_GT21H16T1W();
     //GTFont_Select_GT23L16U2W();
     GTFont_Select_GT23L24T3Y_GT23H24T3Y();
 8001f2e:	f002 fa01 	bl	8004334 <GTFont_Select_GT23L24T3Y_GT23H24T3Y>
     //GTFont_Select_GT21L24S1W();
     //GTFont_Select_GT22L16A1Y();



	  Font_Width_X1();
 8001f32:	f002 f9cb 	bl	80042cc <Font_Width_X1>
      Font_Height_X1();
 8001f36:	f002 f9e3 	bl	8004300 <Font_Height_X1>
	  CGROM_Select_Genitop_FontROM();
 8001f3a:	f002 f933 	bl	80041a4 <CGROM_Select_Genitop_FontROM>
      Font_Select_12x24_24x24();
 8001f3e:	f002 f965 	bl	800420c <Font_Select_12x24_24x24>
	  Select_SFI_0();
 8001f42:	f001 ff65 	bl	8003e10 <Select_SFI_0>
      Select_SFI_Font_Mode();
 8001f46:	f001 ff8f 	bl	8003e68 <Select_SFI_Font_Mode>
      Select_SFI_24bit_Address();
 8001f4a:	f001 ffb9 	bl	8003ec0 <Select_SFI_24bit_Address>
      Select_SFI_Waveform_Mode_0();
 8001f4e:	f001 ffcd 	bl	8003eec <Select_SFI_Waveform_Mode_0>
      Select_SFI_0_DummyRead();
 8001f52:	f001 fff7 	bl	8003f44 <Select_SFI_0_DummyRead>
      Select_SFI_Single_Mode();
 8001f56:	f002 f825 	bl	8003fa4 <Select_SFI_Single_Mode>
      SPI_Clock_Period(4);	 // Freq must setting <=20MHZ
 8001f5a:	2004      	movs	r0, #4
 8001f5c:	f002 f852 	bl	8004004 <SPI_Clock_Period>

	  Enable_SFlash_SPI();
 8001f60:	f000 fe13 	bl	8002b8a <Enable_SFlash_SPI>

	  Foreground_color_65k(color65k_green);
 8001f64:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001f68:	f002 fa12 	bl	8004390 <Foreground_color_65k>
	  Background_color_65k(color65k_blue);
 8001f6c:	201f      	movs	r0, #31
 8001f6e:	f002 fa36 	bl	80043de <Background_color_65k>

	  Set_GTFont_Decoder(0x11);  //BIG5
 8001f72:	2011      	movs	r0, #17
 8001f74:	f002 f9fc 	bl	8004370 <Set_GTFont_Decoder>

	  Goto_Text_XY(0,200);
 8001f78:	21c8      	movs	r1, #200	; 0xc8
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f001 fbd9 	bl	8003732 <Goto_Text_XY>
   	  Show_String("Demo GT23L24T3Y BIG5:");
 8001f80:	484e      	ldr	r0, [pc, #312]	; (80020bc <Text_Demo+0x2e4>)
 8001f82:	f002 fa53 	bl	800442c <Show_String>
	  Font_Select_8x16_16x16();
 8001f86:	f002 f927 	bl	80041d8 <Font_Select_8x16_16x16>
	  Goto_Text_XY(0,230);
 8001f8a:	21e6      	movs	r1, #230	; 0xe6
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f001 fbd0 	bl	8003732 <Goto_Text_XY>
   	  Show_String("");
 8001f92:	484b      	ldr	r0, [pc, #300]	; (80020c0 <Text_Demo+0x2e8>)
 8001f94:	f002 fa4a 	bl	800442c <Show_String>
	  Font_Select_12x24_24x24();
 8001f98:	f002 f938 	bl	800420c <Font_Select_12x24_24x24>
	  Goto_Text_XY(0,254);
 8001f9c:	21fe      	movs	r1, #254	; 0xfe
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f001 fbc7 	bl	8003732 <Goto_Text_XY>
   	  Show_String("");
 8001fa4:	4846      	ldr	r0, [pc, #280]	; (80020c0 <Text_Demo+0x2e8>)
 8001fa6:	f002 fa41 	bl	800442c <Show_String>


	  Foreground_color_65k(color65k_purple);
 8001faa:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8001fae:	f002 f9ef 	bl	8004390 <Foreground_color_65k>
	  Background_color_65k(color65k_yellow);
 8001fb2:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001fb6:	f002 fa12 	bl	80043de <Background_color_65k>
	  Set_GTFont_Decoder(0x01);  //GB2312
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f002 f9d8 	bl	8004370 <Set_GTFont_Decoder>
	  Goto_Text_XY(0,280);
 8001fc0:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f001 fbb4 	bl	8003732 <Goto_Text_XY>
   	  Show_String("Demo GT23L24T3Y GB2312:");
 8001fca:	483e      	ldr	r0, [pc, #248]	; (80020c4 <Text_Demo+0x2ec>)
 8001fcc:	f002 fa2e 	bl	800442c <Show_String>
	  Font_Select_8x16_16x16();
 8001fd0:	f002 f902 	bl	80041d8 <Font_Select_8x16_16x16>
	  Goto_Text_XY(0,304);
 8001fd4:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f001 fbaa 	bl	8003732 <Goto_Text_XY>
   	  Show_String("16x16:RA8876 TFT");
 8001fde:	483a      	ldr	r0, [pc, #232]	; (80020c8 <Text_Demo+0x2f0>)
 8001fe0:	f002 fa24 	bl	800442c <Show_String>
	  Font_Select_12x24_24x24();
 8001fe4:	f002 f912 	bl	800420c <Font_Select_12x24_24x24>
	  Goto_Text_XY(0,328);
 8001fe8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001fec:	2000      	movs	r0, #0
 8001fee:	f001 fba0 	bl	8003732 <Goto_Text_XY>
   	  Show_String("16x16:RA8876 TFT");
 8001ff2:	4835      	ldr	r0, [pc, #212]	; (80020c8 <Text_Demo+0x2f0>)
 8001ff4:	f002 fa1a 	bl	800442c <Show_String>

	  Set_GTFont_Decoder(0x11);  //BIG5
 8001ff8:	2011      	movs	r0, #17
 8001ffa:	f002 f9b9 	bl	8004370 <Set_GTFont_Decoder>


	  Foreground_color_65k(color65k_black);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f002 f9c6 	bl	8004390 <Foreground_color_65k>
	  Font_Background_select_Transparency();//
 8002004:	f002 f936 	bl	8004274 <Font_Background_select_Transparency>


	  Active_Window_XY(0,600);
 8002008:	f44f 7116 	mov.w	r1, #600	; 0x258
 800200c:	2000      	movs	r0, #0
 800200e:	f001 fae8 	bl	80035e2 <Active_Window_XY>
	  Active_Window_WH(80,80);
 8002012:	2150      	movs	r1, #80	; 0x50
 8002014:	2050      	movs	r0, #80	; 0x50
 8002016:	f001 fb0c 	bl	8003632 <Active_Window_WH>
	  Goto_Pixel_XY(0,600);
 800201a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800201e:	2000      	movs	r0, #0
 8002020:	f001 fb5f 	bl	80036e2 <Goto_Pixel_XY>
	  Show_picture(80*80,pic_80x80);
 8002024:	4929      	ldr	r1, [pc, #164]	; (80020cc <Text_Demo+0x2f4>)
 8002026:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800202a:	f002 fa1f 	bl	800446c <Show_picture>
	  Active_Window_XY(0,0);
 800202e:	2100      	movs	r1, #0
 8002030:	2000      	movs	r0, #0
 8002032:	f001 fad6 	bl	80035e2 <Active_Window_XY>
	  Active_Window_WH(400,1280);
 8002036:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800203a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800203e:	f001 faf8 	bl	8003632 <Active_Window_WH>

	  Goto_Text_XY(0,580);
 8002042:	f44f 7111 	mov.w	r1, #580	; 0x244
 8002046:	2000      	movs	r0, #0
 8002048:	f001 fb73 	bl	8003732 <Goto_Text_XY>
   	  Show_String("text transparent");
 800204c:	4820      	ldr	r0, [pc, #128]	; (80020d0 <Text_Demo+0x2f8>)
 800204e:	f002 f9ed 	bl	800442c <Show_String>



	  Font_Background_select_Color();  //
 8002052:	f002 f925 	bl	80042a0 <Font_Background_select_Color>
	  Foreground_color_65k(color65k_black);
 8002056:	2000      	movs	r0, #0
 8002058:	f002 f99a 	bl	8004390 <Foreground_color_65k>
	  Background_color_65k(color65k_white);
 800205c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002060:	f002 f9bd 	bl	80043de <Background_color_65k>

	  Goto_Text_XY(0,700);
 8002064:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8002068:	2000      	movs	r0, #0
 800206a:	f001 fb62 	bl	8003732 <Goto_Text_XY>
   	  Show_String("Demo text cursor:");
 800206e:	4819      	ldr	r0, [pc, #100]	; (80020d4 <Text_Demo+0x2fc>)
 8002070:	f002 f9dc 	bl	800442c <Show_String>

	  Goto_Text_XY(0,724);
 8002074:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 8002078:	2000      	movs	r0, #0
 800207a:	f001 fb5a 	bl	8003732 <Goto_Text_XY>
	  Show_String("0123456789");
 800207e:	4816      	ldr	r0, [pc, #88]	; (80020d8 <Text_Demo+0x300>)
 8002080:	f002 f9d4 	bl	800442c <Show_String>
	  Text_cursor_initial();
 8002084:	f002 fa4c 	bl	8004520 <Text_cursor_initial>
	 delay_ms(1000);
 8002088:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800208c:	f000 fa11 	bl	80024b2 <delay_ms>
	   Graphic_Cursor_XY(0,508);

	 delay_ms(200);
	 Disable_Graphic_Cursor();
 */
	NextStep();
 8002090:	f000 f9de 	bl	8002450 <NextStep>


 }
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	080088dc 	.word	0x080088dc
 80020a0:	080088e8 	.word	0x080088e8
 80020a4:	080088fc 	.word	0x080088fc
 80020a8:	08008920 	.word	0x08008920
 80020ac:	08008940 	.word	0x08008940
 80020b0:	08008960 	.word	0x08008960
 80020b4:	08008978 	.word	0x08008978
 80020b8:	080089dc 	.word	0x080089dc
 80020bc:	08008a78 	.word	0x08008a78
 80020c0:	08008a90 	.word	0x08008a90
 80020c4:	08008a94 	.word	0x08008a94
 80020c8:	08008aac 	.word	0x08008aac
 80020cc:	0800d324 	.word	0x0800d324
 80020d0:	08008ac0 	.word	0x08008ac0
 80020d4:	08008ad4 	.word	0x08008ad4
 80020d8:	08008ae8 	.word	0x08008ae8

080020dc <DMA_Demo>:


 void DMA_Demo(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
		unsigned long i;

 ///////////////////////////////////////////////////////////////

 	Select_Main_Window_16bpp();
 80020e2:	f000 febe 	bl	8002e62 <Select_Main_Window_16bpp>
	Main_Image_Start_Address(0);
 80020e6:	2000      	movs	r0, #0
 80020e8:	f001 f8d5 	bl	8003296 <Main_Image_Start_Address>
	Main_Image_Width(400);
 80020ec:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80020f0:	f001 f8f4 	bl	80032dc <Main_Image_Width>
	Main_Window_Start_XY(0,0);
 80020f4:	2100      	movs	r1, #0
 80020f6:	2000      	movs	r0, #0
 80020f8:	f001 f907 	bl	800330a <Main_Window_Start_XY>

	Canvas_Image_Start_address(0);//Layer 1
 80020fc:	2000      	movs	r0, #0
 80020fe:	f001 fa36 	bl	800356e <Canvas_Image_Start_address>
	Canvas_image_width(400);//
 8002102:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002106:	f001 fa55 	bl	80035b4 <Canvas_image_width>
    Active_Window_XY(0,0);
 800210a:	2100      	movs	r1, #0
 800210c:	2000      	movs	r0, #0
 800210e:	f001 fa68 	bl	80035e2 <Active_Window_XY>
	Active_Window_WH(400,1280);
 8002112:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8002116:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800211a:	f001 fa8a 	bl	8003632 <Active_Window_WH>



 	Foreground_color_65k(White);
 800211e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002122:	f002 f935 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,0);
 8002126:	2100      	movs	r1, #0
 8002128:	2000      	movs	r0, #0
 800212a:	f001 fb36 	bl	800379a <Line_Start_XY>
	Line_End_XY(399,1247);
 800212e:	f240 41df 	movw	r1, #1247	; 0x4df
 8002132:	f240 108f 	movw	r0, #399	; 0x18f
 8002136:	f001 fb60 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 800213a:	f001 fb8e 	bl	800385a <Start_Square_Fill>

	Foreground_color_65k(Blue2);
 800213e:	f240 501f 	movw	r0, #1311	; 0x51f
 8002142:	f002 f925 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,1248);
 8002146:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 800214a:	2000      	movs	r0, #0
 800214c:	f001 fb25 	bl	800379a <Line_Start_XY>
	Line_End_XY(399,1279);
 8002150:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8002154:	f240 108f 	movw	r0, #399	; 0x18f
 8002158:	f001 fb4f 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 800215c:	f001 fb7d 	bl	800385a <Start_Square_Fill>
	LCD_DisplayString(0,Line51 ,"Demo direct access serial FLASH to show picture",Black,White);

   */

    //DMA initial setting
	Enable_SFlash_SPI();
 8002160:	f000 fd13 	bl	8002b8a <Enable_SFlash_SPI>
    Select_SFI_1();
 8002164:	f001 fe6a 	bl	8003e3c <Select_SFI_1>
    Select_SFI_DMA_Mode();
 8002168:	f001 fe94 	bl	8003e94 <Select_SFI_DMA_Mode>
    Select_SFI_24bit_Address();
 800216c:	f001 fea8 	bl	8003ec0 <Select_SFI_24bit_Address>

    //Select_SFI_Waveform_Mode_0();
    Select_SFI_Waveform_Mode_3();
 8002170:	f001 fed2 	bl	8003f18 <Select_SFI_Waveform_Mode_3>

    //Select_SFI_0_DummyRead();	//normal read mode
    Select_SFI_8_DummyRead(); //1byte dummy cycle
 8002174:	f001 fefc 	bl	8003f70 <Select_SFI_8_DummyRead>
    //Select_SFI_16_DummyRead();
   //Select_SFI_24_DummyRead();

   // Select_SFI_Single_Mode();
    Select_SFI_Dual_Mode0();
 8002178:	f001 ff2a 	bl	8003fd0 <Select_SFI_Dual_Mode0>
   // Select_SFI_Dual_Mode1();

    SPI_Clock_Period(0);
 800217c:	2000      	movs	r0, #0
 800217e:	f001 ff41 	bl	8004004 <SPI_Clock_Period>

   Select_SFI_32bit_Address();
   */


	SFI_DMA_Destination_Upper_Left_Corner(0,0);
 8002182:	2100      	movs	r1, #0
 8002184:	2000      	movs	r0, #0
 8002186:	f001 ff78 	bl	800407a <SFI_DMA_Destination_Upper_Left_Corner>
    SFI_DMA_Transfer_Width_Height(400,1280);
 800218a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800218e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002192:	f001 ffa2 	bl	80040da <SFI_DMA_Transfer_Width_Height>
    SFI_DMA_Source_Width(400);//
 8002196:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800219a:	f001 ffce 	bl	800413a <SFI_DMA_Source_Width>

	//execute DMA to show 400x1280 picture
	 for(i=0;i<7;i++)
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]
 80021a2:	e013      	b.n	80021cc <DMA_Demo+0xf0>
	 {
	  SFI_DMA_Source_Start_Address(i*400*1280*2);//
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f44f 227a 	mov.w	r2, #1024000	; 0xfa000
 80021aa:	fb02 f303 	mul.w	r3, r2, r3
 80021ae:	4618      	mov	r0, r3
 80021b0:	f001 ff38 	bl	8004024 <SFI_DMA_Source_Start_Address>
	  Start_SFI_DMA();
 80021b4:	f001 fe07 	bl	8003dc6 <Start_SFI_DMA>
      Check_Busy_SFI_DMA();
 80021b8:	f001 fe1b 	bl	8003df2 <Check_Busy_SFI_DMA>
	  delay_ms(30);
 80021bc:	201e      	movs	r0, #30
 80021be:	f000 f978 	bl	80024b2 <delay_ms>
 	NextStep();
 80021c2:	f000 f945 	bl	8002450 <NextStep>
	 for(i=0;i<7;i++)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3301      	adds	r3, #1
 80021ca:	607b      	str	r3, [r7, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b06      	cmp	r3, #6
 80021d0:	d9e8      	bls.n	80021a4 <DMA_Demo+0xc8>
	 }
}
 80021d2:	bf00      	nop
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <gray>:


}

void gray(void)
{ int i,col,line;
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0

 	Select_Main_Window_16bpp();
 80021e2:	f000 fe3e 	bl	8002e62 <Select_Main_Window_16bpp>
	Main_Image_Start_Address(0);
 80021e6:	2000      	movs	r0, #0
 80021e8:	f001 f855 	bl	8003296 <Main_Image_Start_Address>
	Main_Image_Width(400);
 80021ec:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80021f0:	f001 f874 	bl	80032dc <Main_Image_Width>
	Main_Window_Start_XY(0,0);
 80021f4:	2100      	movs	r1, #0
 80021f6:	2000      	movs	r0, #0
 80021f8:	f001 f887 	bl	800330a <Main_Window_Start_XY>
	Canvas_Image_Start_address(0);
 80021fc:	2000      	movs	r0, #0
 80021fe:	f001 f9b6 	bl	800356e <Canvas_Image_Start_address>
	Canvas_image_width(400);//
 8002202:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002206:	f001 f9d5 	bl	80035b4 <Canvas_image_width>
	Active_Window_XY(0,0);
 800220a:	2100      	movs	r1, #0
 800220c:	2000      	movs	r0, #0
 800220e:	f001 f9e8 	bl	80035e2 <Active_Window_XY>
	Active_Window_WH(400,1280);
 8002212:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8002216:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800221a:	f001 fa0a 	bl	8003632 <Active_Window_WH>



	 col=0;line=0;
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	2300      	movs	r3, #0
 8002224:	607b      	str	r3, [r7, #4]
	for(i=0;i<32;i++)
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	e022      	b.n	8002272 <gray+0x96>
   	{	Foreground_color_65k(i<<11);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	b29b      	uxth	r3, r3
 8002230:	02db      	lsls	r3, r3, #11
 8002232:	b29b      	uxth	r3, r3
 8002234:	4618      	mov	r0, r3
 8002236:	f002 f8ab 	bl	8004390 <Foreground_color_65k>
		Line_Start_XY(col,line);
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	b29b      	uxth	r3, r3
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	b292      	uxth	r2, r2
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f001 faa8 	bl	800379a <Line_Start_XY>
		Line_End_XY(col+12,line+213);
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	b29b      	uxth	r3, r3
 800224e:	330c      	adds	r3, #12
 8002250:	b29a      	uxth	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	b29b      	uxth	r3, r3
 8002256:	33d5      	adds	r3, #213	; 0xd5
 8002258:	b29b      	uxth	r3, r3
 800225a:	4619      	mov	r1, r3
 800225c:	4610      	mov	r0, r2
 800225e:	f001 facc 	bl	80037fa <Line_End_XY>
		Start_Square_Fill();
 8002262:	f001 fafa 	bl	800385a <Start_Square_Fill>
		col+=12;
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	330c      	adds	r3, #12
 800226a:	60bb      	str	r3, [r7, #8]
	for(i=0;i<32;i++)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	3301      	adds	r3, #1
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b1f      	cmp	r3, #31
 8002276:	ddd9      	ble.n	800222c <gray+0x50>
	}
	   col=0;line=213;
 8002278:	2300      	movs	r3, #0
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	23d5      	movs	r3, #213	; 0xd5
 800227e:	607b      	str	r3, [r7, #4]
 	for(i=31;i>=0;i--)
 8002280:	231f      	movs	r3, #31
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e022      	b.n	80022cc <gray+0xf0>
   	{	Foreground_color_65k(i<<11);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	b29b      	uxth	r3, r3
 800228a:	02db      	lsls	r3, r3, #11
 800228c:	b29b      	uxth	r3, r3
 800228e:	4618      	mov	r0, r3
 8002290:	f002 f87e 	bl	8004390 <Foreground_color_65k>
		Line_Start_XY(col,line);
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	b29b      	uxth	r3, r3
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	b292      	uxth	r2, r2
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f001 fa7b 	bl	800379a <Line_Start_XY>
		Line_End_XY(col+12,line+213);
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	330c      	adds	r3, #12
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	33d5      	adds	r3, #213	; 0xd5
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	4619      	mov	r1, r3
 80022b6:	4610      	mov	r0, r2
 80022b8:	f001 fa9f 	bl	80037fa <Line_End_XY>
		Start_Square_Fill();
 80022bc:	f001 facd 	bl	800385a <Start_Square_Fill>
		col+=12;
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	330c      	adds	r3, #12
 80022c4:	60bb      	str	r3, [r7, #8]
 	for(i=31;i>=0;i--)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	dad9      	bge.n	8002286 <gray+0xaa>
	}

	 col=0;line=426;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80022da:	607b      	str	r3, [r7, #4]
	for(i=0;i<64;i++)
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	e022      	b.n	8002328 <gray+0x14c>
   	{	Foreground_color_65k(i<<5);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	015b      	lsls	r3, r3, #5
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	4618      	mov	r0, r3
 80022ec:	f002 f850 	bl	8004390 <Foreground_color_65k>
		Line_Start_XY(col,line);
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	b292      	uxth	r2, r2
 80022f8:	4611      	mov	r1, r2
 80022fa:	4618      	mov	r0, r3
 80022fc:	f001 fa4d 	bl	800379a <Line_Start_XY>
		Line_End_XY(col+6,line+213);
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	b29b      	uxth	r3, r3
 8002304:	3306      	adds	r3, #6
 8002306:	b29a      	uxth	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	b29b      	uxth	r3, r3
 800230c:	33d5      	adds	r3, #213	; 0xd5
 800230e:	b29b      	uxth	r3, r3
 8002310:	4619      	mov	r1, r3
 8002312:	4610      	mov	r0, r2
 8002314:	f001 fa71 	bl	80037fa <Line_End_XY>
		Start_Square_Fill();
 8002318:	f001 fa9f 	bl	800385a <Start_Square_Fill>
		col+=6;
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	3306      	adds	r3, #6
 8002320:	60bb      	str	r3, [r7, #8]
	for(i=0;i<64;i++)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	3301      	adds	r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2b3f      	cmp	r3, #63	; 0x3f
 800232c:	ddd9      	ble.n	80022e2 <gray+0x106>
	}
	   col=0;line=639;
 800232e:	2300      	movs	r3, #0
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	f240 237f 	movw	r3, #639	; 0x27f
 8002336:	607b      	str	r3, [r7, #4]
 	for(i=63;i>=0;i--)
 8002338:	233f      	movs	r3, #63	; 0x3f
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	e022      	b.n	8002384 <gray+0x1a8>
   	{	Foreground_color_65k(i<<5);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	b29b      	uxth	r3, r3
 8002342:	015b      	lsls	r3, r3, #5
 8002344:	b29b      	uxth	r3, r3
 8002346:	4618      	mov	r0, r3
 8002348:	f002 f822 	bl	8004390 <Foreground_color_65k>
		Line_Start_XY(col,line);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	b29b      	uxth	r3, r3
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	b292      	uxth	r2, r2
 8002354:	4611      	mov	r1, r2
 8002356:	4618      	mov	r0, r3
 8002358:	f001 fa1f 	bl	800379a <Line_Start_XY>
		Line_End_XY(col+6,line+213);
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	b29b      	uxth	r3, r3
 8002360:	3306      	adds	r3, #6
 8002362:	b29a      	uxth	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	b29b      	uxth	r3, r3
 8002368:	33d5      	adds	r3, #213	; 0xd5
 800236a:	b29b      	uxth	r3, r3
 800236c:	4619      	mov	r1, r3
 800236e:	4610      	mov	r0, r2
 8002370:	f001 fa43 	bl	80037fa <Line_End_XY>
		Start_Square_Fill();
 8002374:	f001 fa71 	bl	800385a <Start_Square_Fill>
		col+=6;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	3306      	adds	r3, #6
 800237c:	60bb      	str	r3, [r7, #8]
 	for(i=63;i>=0;i--)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	3b01      	subs	r3, #1
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	dad9      	bge.n	800233e <gray+0x162>
	}


	 col=0;line=852;
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	f44f 7355 	mov.w	r3, #852	; 0x354
 8002392:	607b      	str	r3, [r7, #4]
	for(i=0;i<32;i++)
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	e020      	b.n	80023dc <gray+0x200>
   	{	Foreground_color_65k(i);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	b29b      	uxth	r3, r3
 800239e:	4618      	mov	r0, r3
 80023a0:	f001 fff6 	bl	8004390 <Foreground_color_65k>
		Line_Start_XY(col,line);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	b292      	uxth	r2, r2
 80023ac:	4611      	mov	r1, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f001 f9f3 	bl	800379a <Line_Start_XY>
		Line_End_XY(col+12,line+213);
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	330c      	adds	r3, #12
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	33d5      	adds	r3, #213	; 0xd5
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	4619      	mov	r1, r3
 80023c6:	4610      	mov	r0, r2
 80023c8:	f001 fa17 	bl	80037fa <Line_End_XY>
		Start_Square_Fill();
 80023cc:	f001 fa45 	bl	800385a <Start_Square_Fill>
		col+=12;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	330c      	adds	r3, #12
 80023d4:	60bb      	str	r3, [r7, #8]
	for(i=0;i<32;i++)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	3301      	adds	r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b1f      	cmp	r3, #31
 80023e0:	dddb      	ble.n	800239a <gray+0x1be>
	}
	   col=0;line=1065;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	f240 4329 	movw	r3, #1065	; 0x429
 80023ea:	607b      	str	r3, [r7, #4]
 	for(i=31;i>=0;i--)
 80023ec:	231f      	movs	r3, #31
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	e020      	b.n	8002434 <gray+0x258>
   	{	Foreground_color_65k(i);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	4618      	mov	r0, r3
 80023f8:	f001 ffca 	bl	8004390 <Foreground_color_65k>
		Line_Start_XY(col,line);
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	b292      	uxth	r2, r2
 8002404:	4611      	mov	r1, r2
 8002406:	4618      	mov	r0, r3
 8002408:	f001 f9c7 	bl	800379a <Line_Start_XY>
		Line_End_XY(col+12,line+213);
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	b29b      	uxth	r3, r3
 8002410:	330c      	adds	r3, #12
 8002412:	b29a      	uxth	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	b29b      	uxth	r3, r3
 8002418:	33d5      	adds	r3, #213	; 0xd5
 800241a:	b29b      	uxth	r3, r3
 800241c:	4619      	mov	r1, r3
 800241e:	4610      	mov	r0, r2
 8002420:	f001 f9eb 	bl	80037fa <Line_End_XY>
		Start_Square_Fill();
 8002424:	f001 fa19 	bl	800385a <Start_Square_Fill>
		col+=12;
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	330c      	adds	r3, #12
 800242c:	60bb      	str	r3, [r7, #8]
 	for(i=31;i>=0;i--)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	3b01      	subs	r3, #1
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b00      	cmp	r3, #0
 8002438:	dadb      	bge.n	80023f2 <gray+0x216>
	}


	  delay_ms(1000);
 800243a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800243e:	f000 f838 	bl	80024b2 <delay_ms>
 	NextStep();
 8002442:	f000 f805 	bl	8002450 <NextStep>
}
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <NextStep>:
#include <stdio.h>
#include<stdlib.h>
#include "pattern.h"

void NextStep(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
	buttonClicked = 0;
 8002454:	4b09      	ldr	r3, [pc, #36]	; (800247c <NextStep+0x2c>)
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
 	while(buttonClicked == 0)
 800245a:	e002      	b.n	8002462 <NextStep+0x12>
	{
		Delay100ms(1);
 800245c:	2001      	movs	r0, #1
 800245e:	f000 f841 	bl	80024e4 <Delay100ms>
 	while(buttonClicked == 0)
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <NextStep+0x2c>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f8      	beq.n	800245c <NextStep+0xc>
	}
 	buttonClicked = 0;
 800246a:	4b04      	ldr	r3, [pc, #16]	; (800247c <NextStep+0x2c>)
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
	Delay100ms(10);
 8002470:	200a      	movs	r0, #10
 8002472:	f000 f837 	bl	80024e4 <Delay100ms>
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	200001fc 	.word	0x200001fc

08002480 <delay_us>:

void delay_us(unsigned int i)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	uchar j;
    while(i--)
 8002488:	e008      	b.n	800249c <delay_us+0x1c>
	{
    	for(j=0;j<1;j++);
 800248a:	2300      	movs	r3, #0
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	e002      	b.n	8002496 <delay_us+0x16>
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	3301      	adds	r3, #1
 8002494:	73fb      	strb	r3, [r7, #15]
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0f9      	beq.n	8002490 <delay_us+0x10>
    while(i--)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	1e5a      	subs	r2, r3, #1
 80024a0:	607a      	str	r2, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f1      	bne.n	800248a <delay_us+0xa>
	}
}
 80024a6:	bf00      	nop
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <delay_ms>:

void delay_ms(uint i)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b085      	sub	sp, #20
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
	uchar j;
	while(i--)
 80024ba:	e008      	b.n	80024ce <delay_ms+0x1c>
  	for(j=0;j<255;j++);
 80024bc:	2300      	movs	r3, #0
 80024be:	73fb      	strb	r3, [r7, #15]
 80024c0:	e002      	b.n	80024c8 <delay_ms+0x16>
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	3301      	adds	r3, #1
 80024c6:	73fb      	strb	r3, [r7, #15]
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	2bff      	cmp	r3, #255	; 0xff
 80024cc:	d1f9      	bne.n	80024c2 <delay_ms+0x10>
	while(i--)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	1e5a      	subs	r2, r3, #1
 80024d2:	607a      	str	r2, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f1      	bne.n	80024bc <delay_ms+0xa>
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <Delay100ms>:
	while(i--)
	delay_ms(10);
}

void Delay100ms(uint i)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	while(i--)
 80024ec:	e002      	b.n	80024f4 <Delay100ms+0x10>
	delay_ms(100);
 80024ee:	2064      	movs	r0, #100	; 0x64
 80024f0:	f7ff ffdf 	bl	80024b2 <delay_ms>
	while(i--)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	1e5a      	subs	r2, r3, #1
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f7      	bne.n	80024ee <Delay100ms+0xa>
}
 80024fe:	bf00      	nop
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <SPI_Write>:

///********************************
void SPI_Write(unsigned char dat)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
	unsigned char t = 8;
 8002512:	2308      	movs	r3, #8
 8002514:	73fb      	strb	r3, [r7, #15]
	do
	{
		HAL_GPIO_WritePin(SPI_RA8876_MOSI_GPIO_Port, SPI_RA8876_MOSI_Pin, (dat & 0x80)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	09db      	lsrs	r3, r3, #7
 800251a:	b2db      	uxtb	r3, r3
 800251c:	461a      	mov	r2, r3
 800251e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002522:	4814      	ldr	r0, [pc, #80]	; (8002574 <SPI_Write+0x6c>)
 8002524:	f003 fecd 	bl	80062c2 <HAL_GPIO_WritePin>
		dat <<= 1;
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(SPI_RA8876_SCK_GPIO_Port, SPI_RA8876_SCK_Pin, GPIO_PIN_RESET);
 800252e:	2200      	movs	r2, #0
 8002530:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002534:	480f      	ldr	r0, [pc, #60]	; (8002574 <SPI_Write+0x6c>)
 8002536:	f003 fec4 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SPI_RA8876_SCK_GPIO_Port, SPI_RA8876_SCK_Pin, GPIO_PIN_SET);
 800253a:	2201      	movs	r2, #1
 800253c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002540:	480c      	ldr	r0, [pc, #48]	; (8002574 <SPI_Write+0x6c>)
 8002542:	f003 febe 	bl	80062c2 <HAL_GPIO_WritePin>
	} while ( --t != 0 );
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	3b01      	subs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1e1      	bne.n	8002516 <SPI_Write+0xe>
	HAL_GPIO_WritePin(SPI_RA8876_SCK_GPIO_Port, SPI_RA8876_SCK_Pin, GPIO_PIN_SET);
 8002552:	2201      	movs	r2, #1
 8002554:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002558:	4806      	ldr	r0, [pc, #24]	; (8002574 <SPI_Write+0x6c>)
 800255a:	f003 feb2 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_RA8876_MOSI_GPIO_Port, SPI_RA8876_MOSI_Pin, GPIO_PIN_SET);
 800255e:	2201      	movs	r2, #1
 8002560:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002564:	4803      	ldr	r0, [pc, #12]	; (8002574 <SPI_Write+0x6c>)
 8002566:	f003 feac 	bl	80062c2 <HAL_GPIO_WritePin>
}
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40010c00 	.word	0x40010c00

08002578 <SPI_Read>:

//SPI_Read()
unsigned char SPI_Read()
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
	unsigned char dat;
	unsigned char t = 8;
 800257e:	2308      	movs	r3, #8
 8002580:	71bb      	strb	r3, [r7, #6]
	//	SDO = 1;
	do
	{
		HAL_GPIO_WritePin(SPI_RA8876_SCK_GPIO_Port, SPI_RA8876_SCK_Pin, GPIO_PIN_RESET);
 8002582:	2200      	movs	r2, #0
 8002584:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002588:	4810      	ldr	r0, [pc, #64]	; (80025cc <SPI_Read+0x54>)
 800258a:	f003 fe9a 	bl	80062c2 <HAL_GPIO_WritePin>
		dat <<= 1;
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	71fb      	strb	r3, [r7, #7]
		if (HAL_GPIO_ReadPin(SPI_RA8876_MISO_GPIO_Port,SPI_RA8876_MISO_Pin) == GPIO_PIN_SET) dat++;
 8002594:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002598:	480c      	ldr	r0, [pc, #48]	; (80025cc <SPI_Read+0x54>)
 800259a:	f003 fe7b 	bl	8006294 <HAL_GPIO_ReadPin>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d102      	bne.n	80025aa <SPI_Read+0x32>
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	3301      	adds	r3, #1
 80025a8:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(SPI_RA8876_SCK_GPIO_Port, SPI_RA8876_SCK_Pin, GPIO_PIN_SET);
 80025aa:	2201      	movs	r2, #1
 80025ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025b0:	4806      	ldr	r0, [pc, #24]	; (80025cc <SPI_Read+0x54>)
 80025b2:	f003 fe86 	bl	80062c2 <HAL_GPIO_WritePin>
	} while ( --t != 0 );
 80025b6:	79bb      	ldrb	r3, [r7, #6]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	71bb      	strb	r3, [r7, #6]
 80025bc:	79bb      	ldrb	r3, [r7, #6]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1df      	bne.n	8002582 <SPI_Read+0xa>
	return dat;
 80025c2:	79fb      	ldrb	r3, [r7, #7]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40010c00 	.word	0x40010c00

080025d0 <LCD_CmdWrite>:
void LCD_CmdWrite(unsigned char cmd)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SPI_RA8876_SCK_GPIO_Port, SPI_RA8876_SCK_Pin, GPIO_PIN_SET);
 80025da:	2201      	movs	r2, #1
 80025dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025e0:	480e      	ldr	r0, [pc, #56]	; (800261c <LCD_CmdWrite+0x4c>)
 80025e2:	f003 fe6e 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_RA8876_MOSI_GPIO_Port, SPI_RA8876_MOSI_Pin, GPIO_PIN_SET);
 80025e6:	2201      	movs	r2, #1
 80025e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025ec:	480b      	ldr	r0, [pc, #44]	; (800261c <LCD_CmdWrite+0x4c>)
 80025ee:	f003 fe68 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_RA8876_NSS_GPIO_Port, SPI_RA8876_NSS_Pin, GPIO_PIN_RESET);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2102      	movs	r1, #2
 80025f6:	4809      	ldr	r0, [pc, #36]	; (800261c <LCD_CmdWrite+0x4c>)
 80025f8:	f003 fe63 	bl	80062c2 <HAL_GPIO_WritePin>
	SPI_Write(0x00);
 80025fc:	2000      	movs	r0, #0
 80025fe:	f7ff ff83 	bl	8002508 <SPI_Write>
	SPI_Write(cmd);
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ff7f 	bl	8002508 <SPI_Write>
	HAL_GPIO_WritePin(SPI_RA8876_NSS_GPIO_Port, SPI_RA8876_NSS_Pin, GPIO_PIN_SET);
 800260a:	2201      	movs	r2, #1
 800260c:	2102      	movs	r1, #2
 800260e:	4803      	ldr	r0, [pc, #12]	; (800261c <LCD_CmdWrite+0x4c>)
 8002610:	f003 fe57 	bl	80062c2 <HAL_GPIO_WritePin>
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40010c00 	.word	0x40010c00

08002620 <LCD_DataWrite>:

//----------------------//
void LCD_DataWrite(unsigned char Data)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SPI_RA8876_SCK_GPIO_Port, SPI_RA8876_SCK_Pin, GPIO_PIN_SET);
 800262a:	2201      	movs	r2, #1
 800262c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002630:	480e      	ldr	r0, [pc, #56]	; (800266c <LCD_DataWrite+0x4c>)
 8002632:	f003 fe46 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_RA8876_MOSI_GPIO_Port, SPI_RA8876_MOSI_Pin, GPIO_PIN_SET);
 8002636:	2201      	movs	r2, #1
 8002638:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800263c:	480b      	ldr	r0, [pc, #44]	; (800266c <LCD_DataWrite+0x4c>)
 800263e:	f003 fe40 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_RA8876_NSS_GPIO_Port, SPI_RA8876_NSS_Pin, GPIO_PIN_RESET);
 8002642:	2200      	movs	r2, #0
 8002644:	2102      	movs	r1, #2
 8002646:	4809      	ldr	r0, [pc, #36]	; (800266c <LCD_DataWrite+0x4c>)
 8002648:	f003 fe3b 	bl	80062c2 <HAL_GPIO_WritePin>
	SPI_Write(0x80);
 800264c:	2080      	movs	r0, #128	; 0x80
 800264e:	f7ff ff5b 	bl	8002508 <SPI_Write>
	SPI_Write(Data);
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff57 	bl	8002508 <SPI_Write>
	HAL_GPIO_WritePin(SPI_RA8876_NSS_GPIO_Port, SPI_RA8876_NSS_Pin, GPIO_PIN_SET);
 800265a:	2201      	movs	r2, #1
 800265c:	2102      	movs	r1, #2
 800265e:	4803      	ldr	r0, [pc, #12]	; (800266c <LCD_DataWrite+0x4c>)
 8002660:	f003 fe2f 	bl	80062c2 <HAL_GPIO_WritePin>
}
 8002664:	bf00      	nop
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40010c00 	.word	0x40010c00

08002670 <LCD_DataRead>:

//----------------------//
unsigned char LCD_DataRead(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
	unsigned char Data;

	HAL_GPIO_WritePin(SPI_RA8876_SCK_GPIO_Port, SPI_RA8876_SCK_Pin, GPIO_PIN_SET);
 8002676:	2201      	movs	r2, #1
 8002678:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800267c:	480f      	ldr	r0, [pc, #60]	; (80026bc <LCD_DataRead+0x4c>)
 800267e:	f003 fe20 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_RA8876_MOSI_GPIO_Port, SPI_RA8876_MOSI_Pin, GPIO_PIN_SET);
 8002682:	2201      	movs	r2, #1
 8002684:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002688:	480c      	ldr	r0, [pc, #48]	; (80026bc <LCD_DataRead+0x4c>)
 800268a:	f003 fe1a 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_RA8876_NSS_GPIO_Port, SPI_RA8876_NSS_Pin, GPIO_PIN_RESET);
 800268e:	2200      	movs	r2, #0
 8002690:	2102      	movs	r1, #2
 8002692:	480a      	ldr	r0, [pc, #40]	; (80026bc <LCD_DataRead+0x4c>)
 8002694:	f003 fe15 	bl	80062c2 <HAL_GPIO_WritePin>
	SPI_Write(0xC0);
 8002698:	20c0      	movs	r0, #192	; 0xc0
 800269a:	f7ff ff35 	bl	8002508 <SPI_Write>
	Data = SPI_Read();
 800269e:	f7ff ff6b 	bl	8002578 <SPI_Read>
 80026a2:	4603      	mov	r3, r0
 80026a4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SPI_RA8876_NSS_GPIO_Port, SPI_RA8876_NSS_Pin, GPIO_PIN_SET);
 80026a6:	2201      	movs	r2, #1
 80026a8:	2102      	movs	r1, #2
 80026aa:	4804      	ldr	r0, [pc, #16]	; (80026bc <LCD_DataRead+0x4c>)
 80026ac:	f003 fe09 	bl	80062c2 <HAL_GPIO_WritePin>

	return Data;
 80026b0:	79fb      	ldrb	r3, [r7, #7]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40010c00 	.word	0x40010c00

080026c0 <LCD_StatusRead>:
//-----------------------//
unsigned char LCD_StatusRead(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
	unsigned char Data;

	HAL_GPIO_WritePin(SPI_RA8876_SCK_GPIO_Port, SPI_RA8876_SCK_Pin, GPIO_PIN_SET);
 80026c6:	2201      	movs	r2, #1
 80026c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026cc:	480f      	ldr	r0, [pc, #60]	; (800270c <LCD_StatusRead+0x4c>)
 80026ce:	f003 fdf8 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_RA8876_MOSI_GPIO_Port, SPI_RA8876_MOSI_Pin, GPIO_PIN_SET);
 80026d2:	2201      	movs	r2, #1
 80026d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026d8:	480c      	ldr	r0, [pc, #48]	; (800270c <LCD_StatusRead+0x4c>)
 80026da:	f003 fdf2 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_RA8876_NSS_GPIO_Port, SPI_RA8876_NSS_Pin, GPIO_PIN_RESET);
 80026de:	2200      	movs	r2, #0
 80026e0:	2102      	movs	r1, #2
 80026e2:	480a      	ldr	r0, [pc, #40]	; (800270c <LCD_StatusRead+0x4c>)
 80026e4:	f003 fded 	bl	80062c2 <HAL_GPIO_WritePin>
	SPI_Write(0x40);
 80026e8:	2040      	movs	r0, #64	; 0x40
 80026ea:	f7ff ff0d 	bl	8002508 <SPI_Write>
	Data = SPI_Read();
 80026ee:	f7ff ff43 	bl	8002578 <SPI_Read>
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SPI_RA8876_NSS_GPIO_Port, SPI_RA8876_NSS_Pin, GPIO_PIN_SET);
 80026f6:	2201      	movs	r2, #1
 80026f8:	2102      	movs	r1, #2
 80026fa:	4804      	ldr	r0, [pc, #16]	; (800270c <LCD_StatusRead+0x4c>)
 80026fc:	f003 fde1 	bl	80062c2 <HAL_GPIO_WritePin>

	return Data;
 8002700:	79fb      	ldrb	r3, [r7, #7]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40010c00 	.word	0x40010c00

08002710 <LCD_RegisterWrite>:
//********************************/


//==============================================================================
void LCD_RegisterWrite(unsigned char Cmd,unsigned char Data)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	460a      	mov	r2, r1
 800271a:	71fb      	strb	r3, [r7, #7]
 800271c:	4613      	mov	r3, r2
 800271e:	71bb      	strb	r3, [r7, #6]
	LCD_CmdWrite(Cmd);
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff ff54 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(Data);
 8002728:	79bb      	ldrb	r3, [r7, #6]
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff ff78 	bl	8002620 <LCD_DataWrite>
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <LCD_WriteRAM_Prepare>:
	temp=LCD_DataRead();
	return temp;
}

 void LCD_WriteRAM_Prepare(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  LCD_CmdWrite(0x04); //
 800273c:	2004      	movs	r0, #4
 800273e:	f7ff ff47 	bl	80025d0 <LCD_CmdWrite>
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <RA8876_HW_Reset>:

void RA8876_HW_Reset(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RESET_RA8876_GPIO_Port, RESET_RA8876_Pin, GPIO_PIN_SET);
 800274c:	2201      	movs	r2, #1
 800274e:	2104      	movs	r1, #4
 8002750:	480b      	ldr	r0, [pc, #44]	; (8002780 <RA8876_HW_Reset+0x38>)
 8002752:	f003 fdb6 	bl	80062c2 <HAL_GPIO_WritePin>
    delay_ms(10);
 8002756:	200a      	movs	r0, #10
 8002758:	f7ff feab 	bl	80024b2 <delay_ms>
    HAL_GPIO_WritePin(RESET_RA8876_GPIO_Port, RESET_RA8876_Pin, GPIO_PIN_RESET);
 800275c:	2200      	movs	r2, #0
 800275e:	2104      	movs	r1, #4
 8002760:	4807      	ldr	r0, [pc, #28]	; (8002780 <RA8876_HW_Reset+0x38>)
 8002762:	f003 fdae 	bl	80062c2 <HAL_GPIO_WritePin>
    delay_ms(50);
 8002766:	2032      	movs	r0, #50	; 0x32
 8002768:	f7ff fea3 	bl	80024b2 <delay_ms>
    HAL_GPIO_WritePin(RESET_RA8876_GPIO_Port, RESET_RA8876_Pin, GPIO_PIN_SET);
 800276c:	2201      	movs	r2, #1
 800276e:	2104      	movs	r1, #4
 8002770:	4803      	ldr	r0, [pc, #12]	; (8002780 <RA8876_HW_Reset+0x38>)
 8002772:	f003 fda6 	bl	80062c2 <HAL_GPIO_WritePin>
    delay_ms(50);
 8002776:	2032      	movs	r0, #50	; 0x32
 8002778:	f7ff fe9b 	bl	80024b2 <delay_ms>
}
 800277c:	bf00      	nop
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40010c00 	.word	0x40010c00

08002784 <LCD_SetPoint>:


 void LCD_SetPoint(uint x,uint y,uint point)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  LCD_SetCursor(x,y);
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f896 	bl	80028c4 <LCD_SetCursor>
  LCD_WriteRAM_Prepare();
 8002798:	f7ff ffce 	bl	8002738 <LCD_WriteRAM_Prepare>
  LCD_DataWrite(point);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff ff3d 	bl	8002620 <LCD_DataWrite>
  LCD_DataWrite(point>>8);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	0a1b      	lsrs	r3, r3, #8
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff37 	bl	8002620 <LCD_DataWrite>
}
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <LCD_PutChar>:


 void LCD_PutChar(uint x,uint y,uchar c,uint charColor,uint bkColor)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	4613      	mov	r3, r2
 80027ca:	71fb      	strb	r3, [r7, #7]
  uint i=0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61fb      	str	r3, [r7, #28]
  uint j=0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61bb      	str	r3, [r7, #24]

  uint tmp_char=0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]

  for (i=0;i<24;i++)
 80027d8:	2300      	movs	r3, #0
 80027da:	61fb      	str	r3, [r7, #28]
 80027dc:	e036      	b.n	800284c <LCD_PutChar+0x90>
  {
    tmp_char=ASCII_Table[((c-0x20)*24)+i];
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	f1a3 0220 	sub.w	r2, r3, #32
 80027e4:	4613      	mov	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	461a      	mov	r2, r3
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	4413      	add	r3, r2
 80027f2:	4a1a      	ldr	r2, [pc, #104]	; (800285c <LCD_PutChar+0xa0>)
 80027f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027f8:	617b      	str	r3, [r7, #20]
    for (j=0;j<16;j++)
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	e01f      	b.n	8002840 <LCD_PutChar+0x84>
    {
	if ( ((tmp_char >> j) & 0x01) == 0x01)
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <LCD_PutChar+0x6a>
      {
        LCD_SetPoint(x+j,y+i,charColor);
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	18d0      	adds	r0, r2, r3
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	4413      	add	r3, r2
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	4619      	mov	r1, r3
 8002820:	f7ff ffb0 	bl	8002784 <LCD_SetPoint>
 8002824:	e009      	b.n	800283a <LCD_PutChar+0x7e>
      }
      else
      {
        LCD_SetPoint(x+j,y+i,bkColor);
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	18d0      	adds	r0, r2, r3
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	4413      	add	r3, r2
 8002832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002834:	4619      	mov	r1, r3
 8002836:	f7ff ffa5 	bl	8002784 <LCD_SetPoint>
    for (j=0;j<16;j++)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	3301      	adds	r3, #1
 800283e:	61bb      	str	r3, [r7, #24]
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2b0f      	cmp	r3, #15
 8002844:	d9dc      	bls.n	8002800 <LCD_PutChar+0x44>
  for (i=0;i<24;i++)
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3301      	adds	r3, #1
 800284a:	61fb      	str	r3, [r7, #28]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	2b17      	cmp	r3, #23
 8002850:	d9c5      	bls.n	80027de <LCD_PutChar+0x22>
      }
    }
  }
}
 8002852:	bf00      	nop
 8002854:	bf00      	nop
 8002856:	3720      	adds	r7, #32
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	08008b54 	.word	0x08008b54

08002860 <LCD_DisplayString>:


void LCD_DisplayString(uint X,uint Y, char *ptr, uint charColor, uint bkColor)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af02      	add	r7, sp, #8
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
 800286c:	603b      	str	r3, [r7, #0]
  ulong i = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]

  /* Send the string character by character on lCD */
  while ((*ptr != 0) & (i < 64))
 8002872:	e011      	b.n	8002898 <LCD_DisplayString+0x38>
  {
    /* Display one character on LCD */
	LCD_PutChar(X, Y, *ptr, charColor, bkColor);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	781a      	ldrb	r2, [r3, #0]
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68b9      	ldr	r1, [r7, #8]
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f7ff ff9b 	bl	80027bc <LCD_PutChar>
    /* Decrement the column position by 16 */
    X += 16;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	3310      	adds	r3, #16
 800288a:	60fb      	str	r3, [r7, #12]
    /* Point on the next character */
    ptr++;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3301      	adds	r3, #1
 8002890:	607b      	str	r3, [r7, #4]
    /* Increment the character counter */
    i++;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	3301      	adds	r3, #1
 8002896:	617b      	str	r3, [r7, #20]
  while ((*ptr != 0) & (i < 64))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf14      	ite	ne
 80028a0:	2301      	movne	r3, #1
 80028a2:	2300      	moveq	r3, #0
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2b3f      	cmp	r3, #63	; 0x3f
 80028aa:	bf94      	ite	ls
 80028ac:	2301      	movls	r3, #1
 80028ae:	2300      	movhi	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	4013      	ands	r3, r2
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1dc      	bne.n	8002874 <LCD_DisplayString+0x14>
  }
}
 80028ba:	bf00      	nop
 80028bc:	bf00      	nop
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <LCD_SetCursor>:




void LCD_SetCursor(uint Xpos, uint Ypos)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
    LCD_CmdWrite(0x5F);
 80028ce:	205f      	movs	r0, #95	; 0x5f
 80028d0:	f7ff fe7e 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(Xpos);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fea1 	bl	8002620 <LCD_DataWrite>
    LCD_CmdWrite(0x60);
 80028de:	2060      	movs	r0, #96	; 0x60
 80028e0:	f7ff fe76 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(Xpos>>8);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	0a1b      	lsrs	r3, r3, #8
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff fe98 	bl	8002620 <LCD_DataWrite>
    LCD_CmdWrite(0x61);
 80028f0:	2061      	movs	r0, #97	; 0x61
 80028f2:	f7ff fe6d 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(Ypos);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fe90 	bl	8002620 <LCD_DataWrite>
    LCD_CmdWrite(0x62);
 8002900:	2062      	movs	r0, #98	; 0x62
 8002902:	f7ff fe65 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(Ypos>>8);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	b2db      	uxtb	r3, r3
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fe87 	bl	8002620 <LCD_DataWrite>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <RA8876_initial>:




void RA8876_initial(void)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	af00      	add	r7, sp, #0

  RA8876_SW_Reset();
 800291e:	f000 f8fa 	bl	8002b16 <RA8876_SW_Reset>
  RA8876_PLL_Initial();
 8002922:	f000 f85c 	bl	80029de <RA8876_PLL_Initial>
  RA8876_SDRAM_initail();
 8002926:	f000 f885 	bl	8002a34 <RA8876_SDRAM_initail>
   //**[01h]**//
	TFT_24bit();
 800292a:	f000 f914 	bl	8002b56 <TFT_24bit>
	Enable_SFlash_SPI();
 800292e:	f000 f92c 	bl	8002b8a <Enable_SFlash_SPI>
	Host_Bus_8bit();
 8002932:	f000 f940 	bl	8002bb6 <Host_Bus_8bit>
//**[02h]**//
	RGB_8b_16bpp();
 8002936:	f000 f954 	bl	8002be2 <RGB_8b_16bpp>
    //RGB_16b_24bpp_mode1();
	MemWrite_Left_Right_Top_Down();
 800293a:	f000 f96c 	bl	8002c16 <MemWrite_Left_Right_Top_Down>
//	MemWrite_Top_Down_Left_Right();
//	MemWrite_Down_Top_Left_Right();


//**[03h]**//
	Graphic_Mode();
 800293e:	f000 f984 	bl	8002c4a <Graphic_Mode>
	Memory_Select_SDRAM();
 8002942:	f000 f9ae 	bl	8002ca2 <Memory_Select_SDRAM>


	HSCAN_L_to_R();
 8002946:	f000 fb06 	bl	8002f56 <HSCAN_L_to_R>
	VSCAN_T_to_B();
 800294a:	f000 fb1a 	bl	8002f82 <VSCAN_T_to_B>
	PDATA_Set_RGB();
 800294e:	f000 fb2e 	bl	8002fae <PDATA_Set_RGB>

	PCLK_Rising();
 8002952:	f000 fad4 	bl	8002efe <PCLK_Rising>
//		PCLK_Falling();
	DE_High_Active();
 8002956:	f000 fb6c 	bl	8003032 <DE_High_Active>
		HSYNC_Low_Active();
 800295a:	f000 fb3e 	bl	8002fda <HSYNC_Low_Active>
	//	HSYNC_High_Active();
		VSYNC_Low_Active();
 800295e:	f000 fb52 	bl	8003006 <VSYNC_Low_Active>
	//	VSYNC_High_Active();
	LCD_HorizontalWidth_VerticalHeight(400,1280);
 8002962:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8002966:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800296a:	f000 fb78 	bl	800305e <LCD_HorizontalWidth_VerticalHeight>

	LCD_Horizontal_Non_Display(160);
 800296e:	20a0      	movs	r0, #160	; 0xa0
 8002970:	f000 fbd8 	bl	8003124 <LCD_Horizontal_Non_Display>
	LCD_HSYNC_Start_Position(160);
 8002974:	20a0      	movs	r0, #160	; 0xa0
 8002976:	f000 fc09 	bl	800318c <LCD_HSYNC_Start_Position>
	LCD_HSYNC_Pulse_Width(24);
 800297a:	2018      	movs	r0, #24
 800297c:	f000 fc26 	bl	80031cc <LCD_HSYNC_Pulse_Width>
	LCD_Vertical_Non_Display(10);
 8002980:	200a      	movs	r0, #10
 8002982:	f000 fc43 	bl	800320c <LCD_Vertical_Non_Display>
	LCD_VSYNC_Start_Position(12);
 8002986:	200c      	movs	r0, #12
 8002988:	f000 fc5d 	bl	8003246 <LCD_VSYNC_Start_Position>
	LCD_VSYNC_Pulse_Width(2);
 800298c:	2002      	movs	r0, #2
 800298e:	f000 fc6e 	bl	800326e <LCD_VSYNC_Pulse_Width>



	Select_Main_Window_16bpp();
 8002992:	f000 fa66 	bl	8002e62 <Select_Main_Window_16bpp>
	Main_Image_Start_Address(0);
 8002996:	2000      	movs	r0, #0
 8002998:	f000 fc7d 	bl	8003296 <Main_Image_Start_Address>
	Main_Image_Width(400);
 800299c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80029a0:	f000 fc9c 	bl	80032dc <Main_Image_Width>
	Main_Window_Start_XY(0,0);
 80029a4:	2100      	movs	r1, #0
 80029a6:	2000      	movs	r0, #0
 80029a8:	f000 fcaf 	bl	800330a <Main_Window_Start_XY>
	Canvas_Image_Start_address(0);
 80029ac:	2000      	movs	r0, #0
 80029ae:	f000 fdde 	bl	800356e <Canvas_Image_Start_address>
	Canvas_image_width(400);//
 80029b2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80029b6:	f000 fdfd 	bl	80035b4 <Canvas_image_width>
	Active_Window_XY(0,0);
 80029ba:	2100      	movs	r1, #0
 80029bc:	2000      	movs	r0, #0
 80029be:	f000 fe10 	bl	80035e2 <Active_Window_XY>
	Active_Window_WH(400,1280);
 80029c2:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80029c6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80029ca:	f000 fe32 	bl	8003632 <Active_Window_WH>

	Memory_XY_Mode();
 80029ce:	f000 fe58 	bl	8003682 <Memory_XY_Mode>
	Memory_16bpp_Mode();
 80029d2:	f000 fe6c 	bl	80036ae <Memory_16bpp_Mode>
	//Memory_24bpp_Mode();
	Select_Main_Window_16bpp();
 80029d6:	f000 fa44 	bl	8002e62 <Select_Main_Window_16bpp>

}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}

080029de <RA8876_PLL_Initial>:

//==============================================================================
 void RA8876_PLL_Initial(void)
{  /*
 80029de:	b580      	push	{r7, lr}
 80029e0:	af00      	add	r7, sp, #0
   LCD_RegisterWrite(0x05,0x04);    //PLL Divided by 4
   LCD_RegisterWrite(0x06,(SCAN_FREQ*4/OSC_FREQ)-1);
  }
  if((SCAN_FREQ>=32)&&(SCAN_FREQ<=62))
  {
   LCD_RegisterWrite(0x05,0x06);    //PLL Divided by 8
 80029e2:	2106      	movs	r1, #6
 80029e4:	2005      	movs	r0, #5
 80029e6:	f7ff fe93 	bl	8002710 <LCD_RegisterWrite>
   LCD_RegisterWrite(0x06,(SCAN_FREQ*8/OSC_FREQ)-1);
 80029ea:	2127      	movs	r1, #39	; 0x27
 80029ec:	2006      	movs	r0, #6
 80029ee:	f7ff fe8f 	bl	8002710 <LCD_RegisterWrite>
   LCD_RegisterWrite(0x07,0x02);    //PLL Divided by 2
   LCD_RegisterWrite(0x08,(DRAM_FREQ*2/OSC_FREQ)-1);
  }
  if((DRAM_FREQ>=63)&&(DRAM_FREQ<=124))   //&&(DRAM_FREQ<=166)
  {
   LCD_RegisterWrite(0x07,0x04);    //PLL Divided by 4
 80029f2:	2104      	movs	r1, #4
 80029f4:	2007      	movs	r0, #7
 80029f6:	f7ff fe8b 	bl	8002710 <LCD_RegisterWrite>
   LCD_RegisterWrite(0x08,(DRAM_FREQ*4/OSC_FREQ)-1);
 80029fa:	2127      	movs	r1, #39	; 0x27
 80029fc:	2008      	movs	r0, #8
 80029fe:	f7ff fe87 	bl	8002710 <LCD_RegisterWrite>
   LCD_RegisterWrite(0x09,0x02);    //PLL Divided by 2
   LCD_RegisterWrite(0x0A,(CORE_FREQ*2/OSC_FREQ)-1);
  }
  if((CORE_FREQ>=63)&&(CORE_FREQ<=124))
  {
   LCD_RegisterWrite(0x09,0x04);    //PLL Divided by 4
 8002a02:	2104      	movs	r1, #4
 8002a04:	2009      	movs	r0, #9
 8002a06:	f7ff fe83 	bl	8002710 <LCD_RegisterWrite>
   LCD_RegisterWrite(0x0A,(CORE_FREQ*4/OSC_FREQ)-1);
 8002a0a:	2127      	movs	r1, #39	; 0x27
 8002a0c:	200a      	movs	r0, #10
 8002a0e:	f7ff fe7f 	bl	8002710 <LCD_RegisterWrite>
  {
   LCD_RegisterWrite(0x09,0x06);    //PLL Divided by 8
   LCD_RegisterWrite(0x0A,(30*8/OSC_FREQ)-1); //
  }

    LCD_CmdWrite(0x01);
 8002a12:	2001      	movs	r0, #1
 8002a14:	f7ff fddc 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(0x00);
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f7ff fe01 	bl	8002620 <LCD_DataWrite>
	delay_us(10);
 8002a1e:	200a      	movs	r0, #10
 8002a20:	f7ff fd2e 	bl	8002480 <delay_us>
	LCD_DataWrite(0x80);
 8002a24:	2080      	movs	r0, #128	; 0x80
 8002a26:	f7ff fdfb 	bl	8002620 <LCD_DataWrite>
	//Enable_PLL();

	delay_ms(10);
 8002a2a:	200a      	movs	r0, #10
 8002a2c:	f7ff fd41 	bl	80024b2 <delay_ms>
}
 8002a30:	bf00      	nop
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <RA8876_SDRAM_initail>:


//------------------------------------//----------------------------------*/

void RA8876_SDRAM_initail(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
	LCD_RegisterWrite(0xe4,0x01);
#endif

#ifdef W9812G6JH

	LCD_RegisterWrite(0xe0,0x29);
 8002a3a:	2129      	movs	r1, #41	; 0x29
 8002a3c:	20e0      	movs	r0, #224	; 0xe0
 8002a3e:	f7ff fe67 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0xe1,0x03);
 8002a42:	2103      	movs	r1, #3
 8002a44:	20e1      	movs	r0, #225	; 0xe1
 8002a46:	f7ff fe63 	bl	8002710 <LCD_RegisterWrite>

    sdram_itv = (64000000 / 8192) / (1000/DRAM_FREQ) ;
 8002a4a:	f240 330d 	movw	r3, #781	; 0x30d
 8002a4e:	80fb      	strh	r3, [r7, #6]

    sdram_itv-=2;
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	3b02      	subs	r3, #2
 8002a54:	80fb      	strh	r3, [r7, #6]

	LCD_RegisterWrite(0xe2,sdram_itv);
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	20e2      	movs	r0, #226	; 0xe2
 8002a5e:	f7ff fe57 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0xe3,sdram_itv >>8);
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	0a1b      	lsrs	r3, r3, #8
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	20e3      	movs	r0, #227	; 0xe3
 8002a6e:	f7ff fe4f 	bl	8002710 <LCD_RegisterWrite>

	LCD_RegisterWrite(0xe4,0x01);
 8002a72:	2101      	movs	r1, #1
 8002a74:	20e4      	movs	r0, #228	; 0xe4
 8002a76:	f7ff fe4b 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0xe3,sdram_itv >>8);

	LCD_RegisterWrite(0xe4,0x01);
#endif

	Check_SDRAM_Ready();
 8002a7a:	f000 f82a 	bl	8002ad2 <Check_SDRAM_Ready>

delay_ms(10);
 8002a7e:	200a      	movs	r0, #10
 8002a80:	f7ff fd17 	bl	80024b2 <delay_ms>

}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <Check_Mem_WR_FIFO_not_Full>:
/******************************************************************************/
/*Sub program area		  													  */
/******************************************************************************/
//==============================================================================
void Check_Mem_WR_FIFO_not_Full(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
/*	0: Memory Write FIFO is not full.
	1: Memory Write FIFO is full.		*/
	do
	{

	}while( LCD_StatusRead()&0x80 );
 8002a90:	f7ff fe16 	bl	80026c0 <LCD_StatusRead>
 8002a94:	4603      	mov	r3, r0
 8002a96:	b25b      	sxtb	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	dbf9      	blt.n	8002a90 <Check_Mem_WR_FIFO_not_Full+0x4>
}
 8002a9c:	bf00      	nop
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <Check_Mem_WR_FIFO_Empty>:
void Check_Mem_WR_FIFO_Empty(void)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	af00      	add	r7, sp, #0
/*	0: Memory Write FIFO is not empty.
	1: Memory Write FIFO is empty.		*/
	do
	{

	}while( (LCD_StatusRead()&0x40) == 0x00 );
 8002aa6:	f7ff fe0b 	bl	80026c0 <LCD_StatusRead>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0f8      	beq.n	8002aa6 <Check_Mem_WR_FIFO_Empty+0x4>
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <Check_2D_Busy>:
	{

	}while( LCD_StatusRead()&0x10 );
}
void Check_2D_Busy(void)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	af00      	add	r7, sp, #0
  do
 {
 }while( LCD_StatusRead()&0x08 );
 8002abe:	f7ff fdff 	bl	80026c0 <LCD_StatusRead>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1f8      	bne.n	8002abe <Check_2D_Busy+0x4>

}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <Check_SDRAM_Ready>:
void Check_SDRAM_Ready(void)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
/*	0: SDRAM is not ready for access
	1: SDRAM is ready for access		*/
	unsigned char temp;
	do
	{
		temp=LCD_StatusRead();
 8002ad8:	f7ff fdf2 	bl	80026c0 <LCD_StatusRead>
 8002adc:	4603      	mov	r3, r0
 8002ade:	71fb      	strb	r3, [r7, #7]
	}while( (temp&0x04) == 0x00 );
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f6      	beq.n	8002ad8 <Check_SDRAM_Ready+0x6>
}
 8002aea:	bf00      	nop
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <Check_Busy_Draw>:

	}while( (LCD_StatusRead()&0x01) == 0x00 );
}

void Check_Busy_Draw(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0


//(A)
	do
	{
		temp=LCD_StatusRead();
 8002afa:	f7ff fde1 	bl	80026c0 <LCD_StatusRead>
 8002afe:	4603      	mov	r3, r0
 8002b00:	71fb      	strb	r3, [r7, #7]
	}	while(temp&0x08);
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1f6      	bne.n	8002afa <Check_Busy_Draw+0x6>
		//temp=LCD_DataRead();
	}	while(temp&0x80);
*/

//delay_ms(10);
}
 8002b0c:	bf00      	nop
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <RA8876_SW_Reset>:

//[00h]=========================================================================

void RA8876_SW_Reset(void)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
	unsigned char temp;

	LCD_CmdWrite(0x00);
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f7ff fd57 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002b22:	f7ff fda5 	bl	8002670 <LCD_DataRead>
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]
	temp |= 0x01;
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fd73 	bl	8002620 <LCD_DataWrite>

    do
    {
	    temp = LCD_DataRead();
 8002b3a:	f7ff fd99 	bl	8002670 <LCD_DataRead>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	71fb      	strb	r3, [r7, #7]
    }
    while( temp&0x01 );
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f6      	bne.n	8002b3a <RA8876_SW_Reset+0x24>
}
 8002b4c:	bf00      	nop
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <TFT_24bit>:
	temp = LCD_DataRead();
	temp &= cClrb5;
	LCD_DataWrite(temp);
}
void TFT_24bit(void)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
/*  00b: 24-bits output.
    01b: 18-bits output, unused pins are set as GPIO.
    10b: 16-bits output, unused pins are set as GPIO.
    11b: LVDS, all 24-bits unused output pins are set as GPIO.*/
	unsigned char temp;
	LCD_CmdWrite(0x01);
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	f7ff fd37 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002b62:	f7ff fd85 	bl	8002670 <LCD_DataRead>
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb4;
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	f023 0310 	bic.w	r3, r3, #16
 8002b70:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb3;
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	f023 0308 	bic.w	r3, r3, #8
 8002b78:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff fd4f 	bl	8002620 <LCD_DataWrite>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <Enable_SFlash_SPI>:
	temp &= cClrb2;
	LCD_DataWrite(temp);
}

void Enable_SFlash_SPI(void)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
/*  Serial Flash SPI Interface Enable/Disable
    0: Disable
    1: Enable*/
	unsigned char temp;
	LCD_CmdWrite(0x01);
 8002b90:	2001      	movs	r0, #1
 8002b92:	f7ff fd1d 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002b96:	f7ff fd6b 	bl	8002670 <LCD_DataRead>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb1;
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fd39 	bl	8002620 <LCD_DataWrite>
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <Host_Bus_8bit>:
	temp = LCD_DataRead();
	temp &= cClrb1;
	LCD_DataWrite(temp);
}
void Host_Bus_8bit(void)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
/*  Parallel Host Data Bus Width Selection
    0: 8-bit Parallel Host Data Bus.
    1: 16-bit Parallel Host Data Bus.*/
	unsigned char temp;
	LCD_CmdWrite(0x01);
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	f7ff fd07 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002bc2:	f7ff fd55 	bl	8002670 <LCD_DataRead>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb0;
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	f023 0301 	bic.w	r3, r3, #1
 8002bd0:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fd23 	bl	8002620 <LCD_DataWrite>
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <RGB_8b_16bpp>:
	temp &= cClrb7;
	temp &= cClrb6;
	LCD_DataWrite(temp);
}
void RGB_8b_16bpp(void)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
	unsigned char temp;
	LCD_CmdWrite(0x02);
 8002be8:	2002      	movs	r0, #2
 8002bea:	f7ff fcf1 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002bee:	f7ff fd3f 	bl	8002670 <LCD_DataRead>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb7;
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bfc:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb6;
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c04:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fd09 	bl	8002620 <LCD_DataWrite>
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <MemWrite_Left_Right_Top_Down>:
	temp |= cSetb5;
	temp |= cSetb4;
	LCD_DataWrite(temp);
}
void MemWrite_Left_Right_Top_Down(void)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
	unsigned char temp;
	LCD_CmdWrite(0x02);
 8002c1c:	2002      	movs	r0, #2
 8002c1e:	f7ff fcd7 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002c22:	f7ff fd25 	bl	8002670 <LCD_DataRead>
 8002c26:	4603      	mov	r3, r0
 8002c28:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb2;
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	f023 0304 	bic.w	r3, r3, #4
 8002c30:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb1;
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	f023 0302 	bic.w	r3, r3, #2
 8002c38:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff fcef 	bl	8002620 <LCD_DataWrite>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <Graphic_Mode>:
	temp = LCD_DataRead();
    temp |= cSetb3;
	LCD_DataWrite(temp);
}
void Graphic_Mode(void)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
	unsigned char temp;
	LCD_CmdWrite(0x03);
 8002c50:	2003      	movs	r0, #3
 8002c52:	f7ff fcbd 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002c56:	f7ff fd0b 	bl	8002670 <LCD_DataRead>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb2;
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	f023 0304 	bic.w	r3, r3, #4
 8002c64:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fcd9 	bl	8002620 <LCD_DataWrite>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <Text_Mode>:
void Text_Mode(void)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
	unsigned char temp;
	LCD_CmdWrite(0x03);
 8002c7c:	2003      	movs	r0, #3
 8002c7e:	f7ff fca7 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002c82:	f7ff fcf5 	bl	8002670 <LCD_DataRead>
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb2;
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	f043 0304 	orr.w	r3, r3, #4
 8002c90:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fcc3 	bl	8002620 <LCD_DataWrite>
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <Memory_Select_SDRAM>:
void Memory_Select_SDRAM(void)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
	unsigned char temp;
	LCD_CmdWrite(0x03);
 8002ca8:	2003      	movs	r0, #3
 8002caa:	f7ff fc91 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002cae:	f7ff fcdf 	bl	8002670 <LCD_DataRead>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb1;
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	f023 0302 	bic.w	r3, r3, #2
 8002cbc:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb0;	// B
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	f023 0301 	bic.w	r3, r3, #1
 8002cc4:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff fca9 	bl	8002620 <LCD_DataWrite>
}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <Enable_PWM0_Interrupt>:
	temp = LCD_DataRead();
    temp &= cClrb1;
	LCD_DataWrite(temp);
}
void Enable_PWM0_Interrupt(void)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
PWM timer 0 Interrupt Enable Bit
0: Disable Interrupt.
1: Enable Interrupt.
*/
	unsigned char temp;
	LCD_CmdWrite(0x0B);
 8002cdc:	200b      	movs	r0, #11
 8002cde:	f7ff fc77 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002ce2:	f7ff fcc5 	bl	8002670 <LCD_DataRead>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb0;
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fc93 	bl	8002620 <LCD_DataWrite>
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <Clear_PWM0_Interrupt_Flag>:
	temp = LCD_DataRead();
    temp |= cSetb1;
	LCD_DataWrite(temp);
}
void Clear_PWM0_Interrupt_Flag(void)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
Write Function..Interrupt Clear Bit
0: No operation.
1: Clear interrupt.
*/
	unsigned char temp;
	LCD_CmdWrite(0x0C);
 8002d08:	200c      	movs	r0, #12
 8002d0a:	f7ff fc61 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002d0e:	f7ff fcaf 	bl	8002670 <LCD_DataRead>
 8002d12:	4603      	mov	r3, r0
 8002d14:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb0;
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fc7d 	bl	8002620 <LCD_DataWrite>
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <Mask_PWM0_Interrupt_Flag>:
	temp = LCD_DataRead();
    temp |= cSetb1;
	LCD_DataWrite(temp);
}
void Mask_PWM0_Interrupt_Flag(void)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
Mask PWM timer 0 Interrupt Flag
0: Enable.
1: Mask.
*/
	unsigned char temp;
	LCD_CmdWrite(0x0D);
 8002d34:	200d      	movs	r0, #13
 8002d36:	f7ff fc4b 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002d3a:	f7ff fc99 	bl	8002670 <LCD_DataRead>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb0;
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fc67 	bl	8002620 <LCD_DataWrite>
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <Enable_PIP1>:
	LCD_DataWrite(temp);
}

//[10h]=========================================================================
void Enable_PIP1(void)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
0 : PIP 1 window disable.
1 : PIP 1 window enable
PIP 1 window always on top of PIP 2 window.
*/
	unsigned char temp;
	LCD_CmdWrite(0x10);
 8002d60:	2010      	movs	r0, #16
 8002d62:	f7ff fc35 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002d66:	f7ff fc83 	bl	8002670 <LCD_DataRead>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb7;
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d74:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff fc51 	bl	8002620 <LCD_DataWrite>
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <Disable_PIP1>:
void Disable_PIP1(void)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
0 : PIP 1 window disable.
1 : PIP 1 window enable
PIP 1 window always on top of PIP 2 window.
*/
	unsigned char temp;
	LCD_CmdWrite(0x10);
 8002d8c:	2010      	movs	r0, #16
 8002d8e:	f7ff fc1f 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002d92:	f7ff fc6d 	bl	8002670 <LCD_DataRead>
 8002d96:	4603      	mov	r3, r0
 8002d98:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb7;
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002da0:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fc3b 	bl	8002620 <LCD_DataWrite>
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <Enable_PIP2>:
void Enable_PIP2(void)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
0 : PIP 2 window disable.
1 : PIP 2 window enable
PIP 1 window always on top of PIP 2 window.
*/
	unsigned char temp;
	LCD_CmdWrite(0x10);
 8002db8:	2010      	movs	r0, #16
 8002dba:	f7ff fc09 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002dbe:	f7ff fc57 	bl	8002670 <LCD_DataRead>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb6;
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dcc:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff fc25 	bl	8002620 <LCD_DataWrite>
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <Disable_PIP2>:
void Disable_PIP2(void)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
0 : PIP 2 window disable.
1 : PIP 2 window enable
PIP 1 window always on top of PIP 2 window.
*/
	unsigned char temp;
	LCD_CmdWrite(0x10);
 8002de4:	2010      	movs	r0, #16
 8002de6:	f7ff fbf3 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002dea:	f7ff fc41 	bl	8002670 <LCD_DataRead>
 8002dee:	4603      	mov	r3, r0
 8002df0:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb6;
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002df8:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fc0f 	bl	8002620 <LCD_DataWrite>
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <Select_PIP1_Parameter>:
void Select_PIP1_Parameter(void)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0

	unsigned char temp;
	LCD_CmdWrite(0x10);
 8002e10:	2010      	movs	r0, #16
 8002e12:	f7ff fbdd 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002e16:	f7ff fc2b 	bl	8002670 <LCD_DataRead>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb4;
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	f023 0310 	bic.w	r3, r3, #16
 8002e24:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff fbf9 	bl	8002620 <LCD_DataWrite>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <Select_PIP2_Parameter>:
void Select_PIP2_Parameter(void)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0

	unsigned char temp;
	LCD_CmdWrite(0x10);
 8002e3c:	2010      	movs	r0, #16
 8002e3e:	f7ff fbc7 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002e42:	f7ff fc15 	bl	8002670 <LCD_DataRead>
 8002e46:	4603      	mov	r3, r0
 8002e48:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb4;
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	f043 0310 	orr.w	r3, r3, #16
 8002e50:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fbe3 	bl	8002620 <LCD_DataWrite>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <Select_Main_Window_16bpp>:
    temp &= cClrb3;
    temp &= cClrb2;
	LCD_DataWrite(temp);
}
void Select_Main_Window_16bpp(void)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
00b: 8-bpp generic TFT, i.e. 256 colors.
01b: 16-bpp generic TFT, i.e. 65K colors.
1xb: 24-bpp generic TFT, i.e. 1.67M colors.
*/
	unsigned char temp;
	LCD_CmdWrite(0x10);
 8002e68:	2010      	movs	r0, #16
 8002e6a:	f7ff fbb1 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002e6e:	f7ff fbff 	bl	8002670 <LCD_DataRead>
 8002e72:	4603      	mov	r3, r0
 8002e74:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb3;
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	f023 0308 	bic.w	r3, r3, #8
 8002e7c:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb2;
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	f043 0304 	orr.w	r3, r3, #4
 8002e84:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff fbc9 	bl	8002620 <LCD_DataWrite>
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <Select_PIP2_Window_16bpp>:
    temp &= cClrb1;
    temp &= cClrb0;
	LCD_DataWrite(temp);
}
void Select_PIP2_Window_16bpp(void)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
00b: 8-bpp generic TFT, i.e. 256 colors.
01b: 16-bpp generic TFT, i.e. 65K colors.
1xb: 24-bpp generic TFT, i.e. 1.67M colors.
*/
	unsigned char temp;
	LCD_CmdWrite(0x11);
 8002e9c:	2011      	movs	r0, #17
 8002e9e:	f7ff fb97 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002ea2:	f7ff fbe5 	bl	8002670 <LCD_DataRead>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb1;
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	f023 0302 	bic.w	r3, r3, #2
 8002eb0:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb0;
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fbaf 	bl	8002620 <LCD_DataWrite>
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <Select_PIP1_Window_16bpp>:
    temp &= cClrb3;
    temp &= cClrb2;
	LCD_DataWrite(temp);
}
void Select_PIP1_Window_16bpp(void)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
00b: 8-bpp generic TFT, i.e. 256 colors.
01b: 16-bpp generic TFT, i.e. 65K colors.
1xb: 24-bpp generic TFT, i.e. 1.67M colors.
*/
	unsigned char temp;
	LCD_CmdWrite(0x11);
 8002ed0:	2011      	movs	r0, #17
 8002ed2:	f7ff fb7d 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002ed6:	f7ff fbcb 	bl	8002670 <LCD_DataRead>
 8002eda:	4603      	mov	r3, r0
 8002edc:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb3;
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	f023 0308 	bic.w	r3, r3, #8
 8002ee4:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb2;
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	f043 0304 	orr.w	r3, r3, #4
 8002eec:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff fb95 	bl	8002620 <LCD_DataWrite>
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <PCLK_Rising>:
	LCD_DataWrite(temp);
}

//[12h]=========================================================================
void PCLK_Rising(void)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
PCLK Inversion
0: PDAT, DE, HSYNC etc. Drive(/ change) at PCLK falling edge.
1: PDAT, DE, HSYNC etc. Drive(/ change) at PCLK rising edge.
*/
	unsigned char temp;
	LCD_CmdWrite(0x12);
 8002f04:	2012      	movs	r0, #18
 8002f06:	f7ff fb63 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002f0a:	f7ff fbb1 	bl	8002670 <LCD_DataRead>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb7;
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f18:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff fb7f 	bl	8002620 <LCD_DataWrite>
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <Display_ON>:
	temp = LCD_DataRead();
    temp |= cSetb7;
	LCD_DataWrite(temp);
}
void Display_ON(void)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
0b: Display Off.
1b: Display On.
*/
	unsigned char temp;

	LCD_CmdWrite(0x12);
 8002f30:	2012      	movs	r0, #18
 8002f32:	f7ff fb4d 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002f36:	f7ff fb9b 	bl	8002670 <LCD_DataRead>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb6;
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f44:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fb69 	bl	8002620 <LCD_DataWrite>
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HSCAN_L_to_R>:
	temp = LCD_DataRead();
	temp &= cClrb5;
	LCD_DataWrite(temp);
}
void HSCAN_L_to_R(void)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
1 : From Right to Left
PIP window will be disabled when HDIR set as 1.
*/
	unsigned char temp;

	LCD_CmdWrite(0x12);
 8002f5c:	2012      	movs	r0, #18
 8002f5e:	f7ff fb37 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002f62:	f7ff fb85 	bl	8002670 <LCD_DataRead>
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb4;
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	f023 0310 	bic.w	r3, r3, #16
 8002f70:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fb53 	bl	8002620 <LCD_DataWrite>
}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <VSCAN_T_to_B>:
	temp = LCD_DataRead();
	temp |= cSetb4;
	LCD_DataWrite(temp);
}
void VSCAN_T_to_B(void)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
1 : From bottom to Top
PIP window will be disabled when VDIR set as 1.
*/
	unsigned char temp;

	LCD_CmdWrite(0x12);
 8002f88:	2012      	movs	r0, #18
 8002f8a:	f7ff fb21 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002f8e:	f7ff fb6f 	bl	8002670 <LCD_DataRead>
 8002f92:	4603      	mov	r3, r0
 8002f94:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb3;
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	f023 0308 	bic.w	r3, r3, #8
 8002f9c:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff fb3d 	bl	8002620 <LCD_DataWrite>
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <PDATA_Set_RGB>:
	temp = LCD_DataRead();
	temp |= cSetb3;
	LCD_DataWrite(temp);
}
void PDATA_Set_RGB(void)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
100b : BRG.
101b : BGR.
*/
	unsigned char temp;

	LCD_CmdWrite(0x12);
 8002fb4:	2012      	movs	r0, #18
 8002fb6:	f7ff fb0b 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002fba:	f7ff fb59 	bl	8002670 <LCD_DataRead>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
    temp &=0xf8;
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	f023 0307 	bic.w	r3, r3, #7
 8002fc8:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff fb27 	bl	8002620 <LCD_DataWrite>
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HSYNC_Low_Active>:
}


//[13h]=========================================================================
void HSYNC_Low_Active(void)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
0 : Low active.
1 : High active.
*/
	unsigned char temp;

	LCD_CmdWrite(0x13);
 8002fe0:	2013      	movs	r0, #19
 8002fe2:	f7ff faf5 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002fe6:	f7ff fb43 	bl	8002670 <LCD_DataRead>
 8002fea:	4603      	mov	r3, r0
 8002fec:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb7;
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ff4:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fb11 	bl	8002620 <LCD_DataWrite>
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <VSYNC_Low_Active>:
	temp = LCD_DataRead();
	temp |= cSetb7;
	LCD_DataWrite(temp);
}
void VSYNC_Low_Active(void)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
0 : Low active.
1 : High active.
*/
	unsigned char temp;

	LCD_CmdWrite(0x13);
 800300c:	2013      	movs	r0, #19
 800300e:	f7ff fadf 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8003012:	f7ff fb2d 	bl	8002670 <LCD_DataRead>
 8003016:	4603      	mov	r3, r0
 8003018:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb6;
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003020:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff fafb 	bl	8002620 <LCD_DataWrite>
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <DE_High_Active>:
	temp = LCD_DataRead();
    temp |= cSetb5;
	LCD_DataWrite(temp);
}
void DE_High_Active(void)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
0 : High active.
1 : Low active.
*/
	unsigned char temp;

	LCD_CmdWrite(0x13);
 8003038:	2013      	movs	r0, #19
 800303a:	f7ff fac9 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 800303e:	f7ff fb17 	bl	8002670 <LCD_DataRead>
 8003042:	4603      	mov	r3, r0
 8003044:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb5;
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	f023 0320 	bic.w	r3, r3, #32
 800304c:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff fae5 	bl	8002620 <LCD_DataWrite>
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <LCD_HorizontalWidth_VerticalHeight>:
	LCD_DataWrite(temp);
}

//[14h][15h][1Ah][1Bh]=========================================================================
void LCD_HorizontalWidth_VerticalHeight(unsigned short WX,unsigned short HY)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	4603      	mov	r3, r0
 8003066:	460a      	mov	r2, r1
 8003068:	80fb      	strh	r3, [r7, #6]
 800306a:	4613      	mov	r3, r2
 800306c:	80bb      	strh	r3, [r7, #4]
Vertical Display Height(Line) = VDHR + 1
[1Bh] Vertical Display Height Bit[10:8]
Vertical Display Height(Line) = VDHR + 1
*/
	unsigned char temp;
	if(WX<8)
 800306e:	88fb      	ldrh	r3, [r7, #6]
 8003070:	2b07      	cmp	r3, #7
 8003072:	d824      	bhi.n	80030be <LCD_HorizontalWidth_VerticalHeight+0x60>
    {
	LCD_CmdWrite(0x14);
 8003074:	2014      	movs	r0, #20
 8003076:	f7ff faab 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(0x00);
 800307a:	2000      	movs	r0, #0
 800307c:	f7ff fad0 	bl	8002620 <LCD_DataWrite>

	LCD_CmdWrite(0x15);
 8003080:	2015      	movs	r0, #21
 8003082:	f7ff faa5 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff fac8 	bl	8002620 <LCD_DataWrite>

    temp=HY-1;
 8003090:	88bb      	ldrh	r3, [r7, #4]
 8003092:	b2db      	uxtb	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x1A);
 8003098:	201a      	movs	r0, #26
 800309a:	f7ff fa99 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fabd 	bl	8002620 <LCD_DataWrite>

	temp=(HY-1)>>8;
 80030a6:	88bb      	ldrh	r3, [r7, #4]
 80030a8:	3b01      	subs	r3, #1
 80030aa:	121b      	asrs	r3, r3, #8
 80030ac:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x1B);
 80030ae:	201b      	movs	r0, #27
 80030b0:	f7ff fa8e 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff fab2 	bl	8002620 <LCD_DataWrite>

	temp=(HY-1)>>8;
	LCD_CmdWrite(0x1B);
	LCD_DataWrite(temp);
	}
}
 80030bc:	e02e      	b.n	800311c <LCD_HorizontalWidth_VerticalHeight+0xbe>
    temp=(WX/8)-1;
 80030be:	88fb      	ldrh	r3, [r7, #6]
 80030c0:	08db      	lsrs	r3, r3, #3
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x14);
 80030ca:	2014      	movs	r0, #20
 80030cc:	f7ff fa80 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff faa4 	bl	8002620 <LCD_DataWrite>
    temp=WX%8;
 80030d8:	88fb      	ldrh	r3, [r7, #6]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x15);
 80030e2:	2015      	movs	r0, #21
 80030e4:	f7ff fa74 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff fa98 	bl	8002620 <LCD_DataWrite>
    temp=HY-1;
 80030f0:	88bb      	ldrh	r3, [r7, #4]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x1A);
 80030f8:	201a      	movs	r0, #26
 80030fa:	f7ff fa69 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fa8d 	bl	8002620 <LCD_DataWrite>
	temp=(HY-1)>>8;
 8003106:	88bb      	ldrh	r3, [r7, #4]
 8003108:	3b01      	subs	r3, #1
 800310a:	121b      	asrs	r3, r3, #8
 800310c:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x1B);
 800310e:	201b      	movs	r0, #27
 8003110:	f7ff fa5e 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fa82 	bl	8002620 <LCD_DataWrite>
}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <LCD_Horizontal_Non_Display>:
//[16h][17h]=========================================================================
void LCD_Horizontal_Non_Display(unsigned short WX)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	80fb      	strh	r3, [r7, #6]
period; it is used to support the SYNC mode panel. Each level of
this modulation is 1-pixel.
Horizontal non-display period(pixels) = (HNDR + 1) * 8 + HNDFTR
*/
	unsigned char temp;
	if(WX<8)
 800312e:	88fb      	ldrh	r3, [r7, #6]
 8003130:	2b07      	cmp	r3, #7
 8003132:	d80e      	bhi.n	8003152 <LCD_Horizontal_Non_Display+0x2e>
	{
	LCD_CmdWrite(0x16);
 8003134:	2016      	movs	r0, #22
 8003136:	f7ff fa4b 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(0x00);
 800313a:	2000      	movs	r0, #0
 800313c:	f7ff fa70 	bl	8002620 <LCD_DataWrite>

	LCD_CmdWrite(0x17);
 8003140:	2017      	movs	r0, #23
 8003142:	f7ff fa45 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff fa68 	bl	8002620 <LCD_DataWrite>

    temp=WX%8;
	LCD_CmdWrite(0x17);
	LCD_DataWrite(temp);
	}
}
 8003150:	e018      	b.n	8003184 <LCD_Horizontal_Non_Display+0x60>
    temp=(WX/8)-1;
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	08db      	lsrs	r3, r3, #3
 8003156:	b29b      	uxth	r3, r3
 8003158:	b2db      	uxtb	r3, r3
 800315a:	3b01      	subs	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x16);
 800315e:	2016      	movs	r0, #22
 8003160:	f7ff fa36 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff fa5a 	bl	8002620 <LCD_DataWrite>
    temp=WX%8;
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	b2db      	uxtb	r3, r3
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x17);
 8003176:	2017      	movs	r0, #23
 8003178:	f7ff fa2a 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fa4e 	bl	8002620 <LCD_DataWrite>
}
 8003184:	bf00      	nop
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <LCD_HSYNC_Start_Position>:
//[18h]=========================================================================
void LCD_HSYNC_Start_Position(unsigned short WX)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	80fb      	strh	r3, [r7, #6]
beginning of HSYNC. Each level of this modulation is 8-pixel.
Also called front porch.
HSYNC Start Position(pixels) = (HSTR + 1)x8
*/
	unsigned char temp;
	if(WX<8)
 8003196:	88fb      	ldrh	r3, [r7, #6]
 8003198:	2b07      	cmp	r3, #7
 800319a:	d806      	bhi.n	80031aa <LCD_HSYNC_Start_Position+0x1e>
	{
	LCD_CmdWrite(0x18);
 800319c:	2018      	movs	r0, #24
 800319e:	f7ff fa17 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(0x00);
 80031a2:	2000      	movs	r0, #0
 80031a4:	f7ff fa3c 	bl	8002620 <LCD_DataWrite>
	{
    temp=(WX/8)-1;
	LCD_CmdWrite(0x18);
	LCD_DataWrite(temp);
	}
}
 80031a8:	e00c      	b.n	80031c4 <LCD_HSYNC_Start_Position+0x38>
    temp=(WX/8)-1;
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	08db      	lsrs	r3, r3, #3
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x18);
 80031b6:	2018      	movs	r0, #24
 80031b8:	f7ff fa0a 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fa2e 	bl	8002620 <LCD_DataWrite>
}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <LCD_HSYNC_Pulse_Width>:
//[19h]=========================================================================
void LCD_HSYNC_Pulse_Width(unsigned short WX)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	80fb      	strh	r3, [r7, #6]
[19h] HSYNC Pulse Width(HPW) [4:0]
The period width of HSYNC.
HSYNC Pulse Width(pixels) = (HPW + 1)x8
*/
	unsigned char temp;
	if(WX<8)
 80031d6:	88fb      	ldrh	r3, [r7, #6]
 80031d8:	2b07      	cmp	r3, #7
 80031da:	d806      	bhi.n	80031ea <LCD_HSYNC_Pulse_Width+0x1e>
	{
	LCD_CmdWrite(0x19);
 80031dc:	2019      	movs	r0, #25
 80031de:	f7ff f9f7 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(0x00);
 80031e2:	2000      	movs	r0, #0
 80031e4:	f7ff fa1c 	bl	8002620 <LCD_DataWrite>
	{
    temp=(WX/8)-1;
	LCD_CmdWrite(0x19);
	LCD_DataWrite(temp);
	}
}
 80031e8:	e00c      	b.n	8003204 <LCD_HSYNC_Pulse_Width+0x38>
    temp=(WX/8)-1;
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	08db      	lsrs	r3, r3, #3
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	3b01      	subs	r3, #1
 80031f4:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x19);
 80031f6:	2019      	movs	r0, #25
 80031f8:	f7ff f9ea 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fa0e 	bl	8002620 <LCD_DataWrite>
}
 8003204:	bf00      	nop
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <LCD_Vertical_Non_Display>:
//[1Ch][1Dh]=========================================================================
void LCD_Vertical_Non_Display(unsigned short HY)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	80fb      	strh	r3, [r7, #6]

[1Dh] Vertical Non-Display Period Bit[9:8]
Vertical Non-Display Period(Line) = (VNDR + 1)
*/
	unsigned char temp;
    temp=HY-1;
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	3b01      	subs	r3, #1
 800321c:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x1C);
 800321e:	201c      	movs	r0, #28
 8003220:	f7ff f9d6 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff f9fa 	bl	8002620 <LCD_DataWrite>

	LCD_CmdWrite(0x1D);
 800322c:	201d      	movs	r0, #29
 800322e:	f7ff f9cf 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(temp>>8);
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	121b      	asrs	r3, r3, #8
 8003236:	b2db      	uxtb	r3, r3
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff f9f1 	bl	8002620 <LCD_DataWrite>
}
 800323e:	bf00      	nop
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <LCD_VSYNC_Start_Position>:
//[1Eh]=========================================================================
void LCD_VSYNC_Start_Position(unsigned short HY)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	4603      	mov	r3, r0
 800324e:	80fb      	strh	r3, [r7, #6]
[1Eh] VSYNC Start Position[7:0]
The starting position from the end of display area to the beginning of VSYNC.
VSYNC Start Position(Line) = (VSTR + 1)
*/
	unsigned char temp;
    temp=HY-1;
 8003250:	88fb      	ldrh	r3, [r7, #6]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	3b01      	subs	r3, #1
 8003256:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x1E);
 8003258:	201e      	movs	r0, #30
 800325a:	f7ff f9b9 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff f9dd 	bl	8002620 <LCD_DataWrite>
}
 8003266:	bf00      	nop
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <LCD_VSYNC_Pulse_Width>:
//[1Fh]=========================================================================
void LCD_VSYNC_Pulse_Width(unsigned short HY)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b084      	sub	sp, #16
 8003272:	af00      	add	r7, sp, #0
 8003274:	4603      	mov	r3, r0
 8003276:	80fb      	strh	r3, [r7, #6]
[1Fh] VSYNC Pulse Width[5:0]
The pulse width of VSYNC in lines.
VSYNC Pulse Width(Line) = (VPWR + 1)
*/
	unsigned char temp;
    temp=HY-1;
 8003278:	88fb      	ldrh	r3, [r7, #6]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	3b01      	subs	r3, #1
 800327e:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x1F);
 8003280:	201f      	movs	r0, #31
 8003282:	f7ff f9a5 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 8003286:	7bfb      	ldrb	r3, [r7, #15]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff f9c9 	bl	8002620 <LCD_DataWrite>
}
 800328e:	bf00      	nop
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <Main_Image_Start_Address>:
//[20h][21h][22h][23h]=========================================================================
void Main_Image_Start_Address(unsigned long Addr)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
[20h] Main Image Start Address[7:2]
[21h] Main Image Start Address[15:8]
[22h] Main Image Start Address [23:16]
[23h] Main Image Start Address [31:24]
*/
	LCD_RegisterWrite(0x20,Addr);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	4619      	mov	r1, r3
 80032a4:	2020      	movs	r0, #32
 80032a6:	f7ff fa33 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x21,Addr>>8);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	0a1b      	lsrs	r3, r3, #8
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	4619      	mov	r1, r3
 80032b2:	2021      	movs	r0, #33	; 0x21
 80032b4:	f7ff fa2c 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x22,Addr>>16);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	0c1b      	lsrs	r3, r3, #16
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	4619      	mov	r1, r3
 80032c0:	2022      	movs	r0, #34	; 0x22
 80032c2:	f7ff fa25 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x23,Addr>>24);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	0e1b      	lsrs	r3, r3, #24
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	4619      	mov	r1, r3
 80032ce:	2023      	movs	r0, #35	; 0x23
 80032d0:	f7ff fa1e 	bl	8002710 <LCD_RegisterWrite>
}
 80032d4:	bf00      	nop
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <Main_Image_Width>:
//[24h][25h]=========================================================================
void Main_Image_Width(unsigned short WX)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	80fb      	strh	r3, [r7, #6]
[25h] Main Image Width [12:8]
Unit: Pixel.
It must be divisible by 4. MIW Bit [1:0] tie to internally.
The value is physical pixel number. Maximum value is 8188 pixels
*/
	LCD_RegisterWrite(0x24,WX);
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	4619      	mov	r1, r3
 80032ec:	2024      	movs	r0, #36	; 0x24
 80032ee:	f7ff fa0f 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x25,WX>>8);
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	0a1b      	lsrs	r3, r3, #8
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	4619      	mov	r1, r3
 80032fc:	2025      	movs	r0, #37	; 0x25
 80032fe:	f7ff fa07 	bl	8002710 <LCD_RegisterWrite>
}
 8003302:	bf00      	nop
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <Main_Window_Start_XY>:
//[26h][27h][28h][29h]=========================================================================
void Main_Window_Start_XY(unsigned short WX,unsigned short HY)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
 8003310:	4603      	mov	r3, r0
 8003312:	460a      	mov	r2, r1
 8003314:	80fb      	strh	r3, [r7, #6]
 8003316:	4613      	mov	r3, r2
 8003318:	80bb      	strh	r3, [r7, #4]
[29h] Main Window Upper-Left corner Y-coordination [12:8]
Reference Main Image coordination.
Unit: Pixel
Range is between 0 and 8191.
*/
	LCD_RegisterWrite(0x26,WX);
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	4619      	mov	r1, r3
 8003320:	2026      	movs	r0, #38	; 0x26
 8003322:	f7ff f9f5 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x27,WX>>8);
 8003326:	88fb      	ldrh	r3, [r7, #6]
 8003328:	0a1b      	lsrs	r3, r3, #8
 800332a:	b29b      	uxth	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	4619      	mov	r1, r3
 8003330:	2027      	movs	r0, #39	; 0x27
 8003332:	f7ff f9ed 	bl	8002710 <LCD_RegisterWrite>

	LCD_RegisterWrite(0x28,HY);
 8003336:	88bb      	ldrh	r3, [r7, #4]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	4619      	mov	r1, r3
 800333c:	2028      	movs	r0, #40	; 0x28
 800333e:	f7ff f9e7 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x29,HY>>8);
 8003342:	88bb      	ldrh	r3, [r7, #4]
 8003344:	0a1b      	lsrs	r3, r3, #8
 8003346:	b29b      	uxth	r3, r3
 8003348:	b2db      	uxtb	r3, r3
 800334a:	4619      	mov	r1, r3
 800334c:	2029      	movs	r0, #41	; 0x29
 800334e:	f7ff f9df 	bl	8002710 <LCD_RegisterWrite>
}
 8003352:	bf00      	nop
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <PIP_Display_Start_XY>:
//[2Ah][2Bh][2Ch][2Dh]=========================================================================
void PIP_Display_Start_XY(unsigned short WX,unsigned short HY)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	4603      	mov	r3, r0
 8003362:	460a      	mov	r2, r1
 8003364:	80fb      	strh	r3, [r7, #6]
 8003366:	4613      	mov	r3, r2
 8003368:	80bb      	strh	r3, [r7, #4]
Unit: Pixel
Y-axis coordination should less than vertical display height.
According to bit of Select Configure PIP 1 or 2 Windows parameters.
Function bit will be configured for relative PIP window.
*/
	LCD_RegisterWrite(0x2A,WX);
 800336a:	88fb      	ldrh	r3, [r7, #6]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	4619      	mov	r1, r3
 8003370:	202a      	movs	r0, #42	; 0x2a
 8003372:	f7ff f9cd 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x2B,WX>>8);
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	0a1b      	lsrs	r3, r3, #8
 800337a:	b29b      	uxth	r3, r3
 800337c:	b2db      	uxtb	r3, r3
 800337e:	4619      	mov	r1, r3
 8003380:	202b      	movs	r0, #43	; 0x2b
 8003382:	f7ff f9c5 	bl	8002710 <LCD_RegisterWrite>

	LCD_RegisterWrite(0x2C,HY);
 8003386:	88bb      	ldrh	r3, [r7, #4]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	4619      	mov	r1, r3
 800338c:	202c      	movs	r0, #44	; 0x2c
 800338e:	f7ff f9bf 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x2D,HY>>8);
 8003392:	88bb      	ldrh	r3, [r7, #4]
 8003394:	0a1b      	lsrs	r3, r3, #8
 8003396:	b29b      	uxth	r3, r3
 8003398:	b2db      	uxtb	r3, r3
 800339a:	4619      	mov	r1, r3
 800339c:	202d      	movs	r0, #45	; 0x2d
 800339e:	f7ff f9b7 	bl	8002710 <LCD_RegisterWrite>
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <PIP_Image_Start_Address>:
//[2Eh][2Fh][30h][31h]=========================================================================
void PIP_Image_Start_Address(unsigned long Addr)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
[2Eh] PIP Image Start Address[7:2]
[2Fh] PIP Image Start Address[15:8]
[30h] PIP Image Start Address [23:16]
[31h] PIP Image Start Address [31:24]
*/
	LCD_RegisterWrite(0x2E,Addr);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	4619      	mov	r1, r3
 80033b8:	202e      	movs	r0, #46	; 0x2e
 80033ba:	f7ff f9a9 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x2F,Addr>>8);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	0a1b      	lsrs	r3, r3, #8
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	4619      	mov	r1, r3
 80033c6:	202f      	movs	r0, #47	; 0x2f
 80033c8:	f7ff f9a2 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x30,Addr>>16);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	0c1b      	lsrs	r3, r3, #16
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	4619      	mov	r1, r3
 80033d4:	2030      	movs	r0, #48	; 0x30
 80033d6:	f7ff f99b 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x31,Addr>>24);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	0e1b      	lsrs	r3, r3, #24
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	4619      	mov	r1, r3
 80033e2:	2031      	movs	r0, #49	; 0x31
 80033e4:	f7ff f994 	bl	8002710 <LCD_RegisterWrite>
}
 80033e8:	bf00      	nop
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <PIP_Image_Width>:
//[32h][33h]=========================================================================
void PIP_Image_Width(unsigned short WX)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	80fb      	strh	r3, [r7, #6]
The value is physical pixel number.
This width should less than horizontal display width.
According to bit of Select Configure PIP 1 or 2 Windows parameters.
Function bit will be configured for relative PIP window.
*/
	LCD_RegisterWrite(0x32,WX);
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	4619      	mov	r1, r3
 8003400:	2032      	movs	r0, #50	; 0x32
 8003402:	f7ff f985 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x33,WX>>8);
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	0a1b      	lsrs	r3, r3, #8
 800340a:	b29b      	uxth	r3, r3
 800340c:	b2db      	uxtb	r3, r3
 800340e:	4619      	mov	r1, r3
 8003410:	2033      	movs	r0, #51	; 0x33
 8003412:	f7ff f97d 	bl	8002710 <LCD_RegisterWrite>
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <PIP_Window_Image_Start_XY>:
//[34h][35h][36h][37h]=========================================================================
void PIP_Window_Image_Start_XY(unsigned short WX,unsigned short HY)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	4603      	mov	r3, r0
 8003426:	460a      	mov	r2, r1
 8003428:	80fb      	strh	r3, [r7, #6]
 800342a:	4613      	mov	r3, r2
 800342c:	80bb      	strh	r3, [r7, #4]
Unit: Pixel
Y-axis coordination plus PIP window height should less than 8191.
According to bit of Select Configure PIP 1 or 2 Windows parameters.
Function bit will be configured for relative PIP window.
*/
	LCD_RegisterWrite(0x34,WX);
 800342e:	88fb      	ldrh	r3, [r7, #6]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	4619      	mov	r1, r3
 8003434:	2034      	movs	r0, #52	; 0x34
 8003436:	f7ff f96b 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x35,WX>>8);
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	0a1b      	lsrs	r3, r3, #8
 800343e:	b29b      	uxth	r3, r3
 8003440:	b2db      	uxtb	r3, r3
 8003442:	4619      	mov	r1, r3
 8003444:	2035      	movs	r0, #53	; 0x35
 8003446:	f7ff f963 	bl	8002710 <LCD_RegisterWrite>

	LCD_RegisterWrite(0x36,HY);
 800344a:	88bb      	ldrh	r3, [r7, #4]
 800344c:	b2db      	uxtb	r3, r3
 800344e:	4619      	mov	r1, r3
 8003450:	2036      	movs	r0, #54	; 0x36
 8003452:	f7ff f95d 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x37,HY>>8);
 8003456:	88bb      	ldrh	r3, [r7, #4]
 8003458:	0a1b      	lsrs	r3, r3, #8
 800345a:	b29b      	uxth	r3, r3
 800345c:	b2db      	uxtb	r3, r3
 800345e:	4619      	mov	r1, r3
 8003460:	2037      	movs	r0, #55	; 0x37
 8003462:	f7ff f955 	bl	8002710 <LCD_RegisterWrite>
}
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <PIP_Window_Width_Height>:
//[38h][39h][3Ah][3Bh]=========================================================================
void PIP_Window_Width_Height(unsigned short WX,unsigned short HY)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	4603      	mov	r3, r0
 8003476:	460a      	mov	r2, r1
 8003478:	80fb      	strh	r3, [r7, #6]
 800347a:	4613      	mov	r3, r2
 800347c:	80bb      	strh	r3, [r7, #4]
Unit: Pixel
The value is physical pixel number. Maximum value is 8191 pixels.
According to bit of Select Configure PIP 1 or 2 Windows parameters.
Function bit will be configured for relative PIP window.
*/
	LCD_RegisterWrite(0x38,WX);
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	4619      	mov	r1, r3
 8003484:	2038      	movs	r0, #56	; 0x38
 8003486:	f7ff f943 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x39,WX>>8);
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	0a1b      	lsrs	r3, r3, #8
 800348e:	b29b      	uxth	r3, r3
 8003490:	b2db      	uxtb	r3, r3
 8003492:	4619      	mov	r1, r3
 8003494:	2039      	movs	r0, #57	; 0x39
 8003496:	f7ff f93b 	bl	8002710 <LCD_RegisterWrite>

	LCD_RegisterWrite(0x3A,HY);
 800349a:	88bb      	ldrh	r3, [r7, #4]
 800349c:	b2db      	uxtb	r3, r3
 800349e:	4619      	mov	r1, r3
 80034a0:	203a      	movs	r0, #58	; 0x3a
 80034a2:	f7ff f935 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x3B,HY>>8);
 80034a6:	88bb      	ldrh	r3, [r7, #4]
 80034a8:	0a1b      	lsrs	r3, r3, #8
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	4619      	mov	r1, r3
 80034b0:	203b      	movs	r0, #59	; 0x3b
 80034b2:	f7ff f92d 	bl	8002710 <LCD_RegisterWrite>
}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <Enable_Text_Cursor>:
	temp |= cSetb2;
	LCD_DataWrite(temp);
}
//
void Enable_Text_Cursor(void)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
Text cursor & Graphic cursor cannot enable simultaneously.
Graphic cursor has higher priority then Text cursor if enabled simultaneously.
*/
	unsigned char temp;

	LCD_CmdWrite(0x3C);
 80034c4:	203c      	movs	r0, #60	; 0x3c
 80034c6:	f7ff f883 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80034ca:	f7ff f8d1 	bl	8002670 <LCD_DataRead>
 80034ce:	4603      	mov	r3, r0
 80034d0:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb1;
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	f043 0302 	orr.w	r3, r3, #2
 80034d8:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff f89f 	bl	8002620 <LCD_DataWrite>
}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <Enable_Text_Cursor_Blinking>:
	temp &= cClrb1;
	LCD_DataWrite(temp);
}
//
void Enable_Text_Cursor_Blinking(void)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
0 : Disable.
1 : Enable.
*/
	unsigned char temp;

	LCD_CmdWrite(0x3C);
 80034f0:	203c      	movs	r0, #60	; 0x3c
 80034f2:	f7ff f86d 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80034f6:	f7ff f8bb 	bl	8002670 <LCD_DataRead>
 80034fa:	4603      	mov	r3, r0
 80034fc:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb0;
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff f889 	bl	8002620 <LCD_DataWrite>
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <Blinking_Time_Frames>:
	temp &= cClrb0;
	LCD_DataWrite(temp);
}
//[3Dh]=========================================================================
void Blinking_Time_Frames(unsigned char temp)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	4603      	mov	r3, r0
 800351e:	71fb      	strb	r3, [r7, #7]
01h : 2 frames time.
02h : 3 frames time.
:
FFh : 256 frames time.
*/
	LCD_CmdWrite(0x3D);
 8003520:	203d      	movs	r0, #61	; 0x3d
 8003522:	f7ff f855 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff f879 	bl	8002620 <LCD_DataWrite>
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <Text_Cursor_H_V>:
//[3Eh]=========================================================================
void Text_Cursor_H_V(unsigned short WX,unsigned short HY)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	4603      	mov	r3, r0
 800353e:	460a      	mov	r2, r1
 8003540:	80fb      	strh	r3, [r7, #6]
 8003542:	4613      	mov	r3, r2
 8003544:	80bb      	strh	r3, [r7, #4]
Unit : Pixel
Zero-based number. Value means 1 pixel.
Note : When font is enlarged, the cursor setting will multiply the
same times as the font enlargement.
*/
	LCD_CmdWrite(0x3E);
 8003546:	203e      	movs	r0, #62	; 0x3e
 8003548:	f7ff f842 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 800354c:	88fb      	ldrh	r3, [r7, #6]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff f865 	bl	8002620 <LCD_DataWrite>
	LCD_CmdWrite(0x3F);
 8003556:	203f      	movs	r0, #63	; 0x3f
 8003558:	f7ff f83a 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(HY);
 800355c:	88bb      	ldrh	r3, [r7, #4]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff f85d 	bl	8002620 <LCD_DataWrite>
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <Canvas_Image_Start_address>:
*/
	LCD_RegisterWrite(0x45,temp);
}
//[50h][51h][52h][53h]=========================================================================
void Canvas_Image_Start_address(unsigned long Addr)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
[50h] Start address of Canvas [7:0]
[51h] Start address of Canvas [15:8]
[52h] Start address of Canvas [23:16]
[53h] Start address of Canvas [31:24]
*/
	LCD_RegisterWrite(0x50,Addr);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	4619      	mov	r1, r3
 800357c:	2050      	movs	r0, #80	; 0x50
 800357e:	f7ff f8c7 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x51,Addr>>8);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	0a1b      	lsrs	r3, r3, #8
 8003586:	b2db      	uxtb	r3, r3
 8003588:	4619      	mov	r1, r3
 800358a:	2051      	movs	r0, #81	; 0x51
 800358c:	f7ff f8c0 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x52,Addr>>16);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	0c1b      	lsrs	r3, r3, #16
 8003594:	b2db      	uxtb	r3, r3
 8003596:	4619      	mov	r1, r3
 8003598:	2052      	movs	r0, #82	; 0x52
 800359a:	f7ff f8b9 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x53,Addr>>24);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	0e1b      	lsrs	r3, r3, #24
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	4619      	mov	r1, r3
 80035a6:	2053      	movs	r0, #83	; 0x53
 80035a8:	f7ff f8b2 	bl	8002710 <LCD_RegisterWrite>
}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <Canvas_image_width>:
//[54h][55h]=========================================================================
void Canvas_image_width(unsigned short WX)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	80fb      	strh	r3, [r7, #6]
/*
[54h] Canvas image width [7:2]
[55h] Canvas image width [12:8]
*/
	LCD_RegisterWrite(0x54,WX);
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	4619      	mov	r1, r3
 80035c4:	2054      	movs	r0, #84	; 0x54
 80035c6:	f7ff f8a3 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x55,WX>>8);
 80035ca:	88fb      	ldrh	r3, [r7, #6]
 80035cc:	0a1b      	lsrs	r3, r3, #8
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	4619      	mov	r1, r3
 80035d4:	2055      	movs	r0, #85	; 0x55
 80035d6:	f7ff f89b 	bl	8002710 <LCD_RegisterWrite>
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <Active_Window_XY>:
//[56h][57h][58h][59h]=========================================================================
void Active_Window_XY(unsigned short WX,unsigned short HY)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b082      	sub	sp, #8
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	4603      	mov	r3, r0
 80035ea:	460a      	mov	r2, r1
 80035ec:	80fb      	strh	r3, [r7, #6]
 80035ee:	4613      	mov	r3, r2
 80035f0:	80bb      	strh	r3, [r7, #4]
[56h] Active Window Upper-Left corner X-coordination [7:0]
[57h] Active Window Upper-Left corner X-coordination [12:8]
[58h] Active Window Upper-Left corner Y-coordination [7:0]
[59h] Active Window Upper-Left corner Y-coordination [12:8]
*/
	LCD_RegisterWrite(0x56,WX);
 80035f2:	88fb      	ldrh	r3, [r7, #6]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	4619      	mov	r1, r3
 80035f8:	2056      	movs	r0, #86	; 0x56
 80035fa:	f7ff f889 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x57,WX>>8);
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	0a1b      	lsrs	r3, r3, #8
 8003602:	b29b      	uxth	r3, r3
 8003604:	b2db      	uxtb	r3, r3
 8003606:	4619      	mov	r1, r3
 8003608:	2057      	movs	r0, #87	; 0x57
 800360a:	f7ff f881 	bl	8002710 <LCD_RegisterWrite>

	LCD_RegisterWrite(0x58,HY);
 800360e:	88bb      	ldrh	r3, [r7, #4]
 8003610:	b2db      	uxtb	r3, r3
 8003612:	4619      	mov	r1, r3
 8003614:	2058      	movs	r0, #88	; 0x58
 8003616:	f7ff f87b 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x59,HY>>8);
 800361a:	88bb      	ldrh	r3, [r7, #4]
 800361c:	0a1b      	lsrs	r3, r3, #8
 800361e:	b29b      	uxth	r3, r3
 8003620:	b2db      	uxtb	r3, r3
 8003622:	4619      	mov	r1, r3
 8003624:	2059      	movs	r0, #89	; 0x59
 8003626:	f7ff f873 	bl	8002710 <LCD_RegisterWrite>
}
 800362a:	bf00      	nop
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <Active_Window_WH>:
//[5Ah][5Bh][5Ch][5Dh]=========================================================================
void Active_Window_WH(unsigned short WX,unsigned short HY)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b082      	sub	sp, #8
 8003636:	af00      	add	r7, sp, #0
 8003638:	4603      	mov	r3, r0
 800363a:	460a      	mov	r2, r1
 800363c:	80fb      	strh	r3, [r7, #6]
 800363e:	4613      	mov	r3, r2
 8003640:	80bb      	strh	r3, [r7, #4]
[5Ah] Width of Active Window [7:0]
[5Bh] Width of Active Window [12:8]
[5Ch] Height of Active Window [7:0]
[5Dh] Height of Active Window [12:8]
*/
	LCD_RegisterWrite(0x5A,WX);
 8003642:	88fb      	ldrh	r3, [r7, #6]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	4619      	mov	r1, r3
 8003648:	205a      	movs	r0, #90	; 0x5a
 800364a:	f7ff f861 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x5B,WX>>8);
 800364e:	88fb      	ldrh	r3, [r7, #6]
 8003650:	0a1b      	lsrs	r3, r3, #8
 8003652:	b29b      	uxth	r3, r3
 8003654:	b2db      	uxtb	r3, r3
 8003656:	4619      	mov	r1, r3
 8003658:	205b      	movs	r0, #91	; 0x5b
 800365a:	f7ff f859 	bl	8002710 <LCD_RegisterWrite>

 	LCD_RegisterWrite(0x5C,HY);
 800365e:	88bb      	ldrh	r3, [r7, #4]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	4619      	mov	r1, r3
 8003664:	205c      	movs	r0, #92	; 0x5c
 8003666:	f7ff f853 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x5D,HY>>8);
 800366a:	88bb      	ldrh	r3, [r7, #4]
 800366c:	0a1b      	lsrs	r3, r3, #8
 800366e:	b29b      	uxth	r3, r3
 8003670:	b2db      	uxtb	r3, r3
 8003672:	4619      	mov	r1, r3
 8003674:	205d      	movs	r0, #93	; 0x5d
 8003676:	f7ff f84b 	bl	8002710 <LCD_RegisterWrite>
}
 800367a:	bf00      	nop
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <Memory_XY_Mode>:
	temp = LCD_DataRead();
	temp |= cSetb3;
	LCD_DataWrite(temp);
}
void Memory_XY_Mode(void)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
0: Block mode (X-Y coordination addressing)
1: linear mode
*/
	unsigned char temp;

	LCD_CmdWrite(0x5E);
 8003688:	205e      	movs	r0, #94	; 0x5e
 800368a:	f7fe ffa1 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 800368e:	f7fe ffef 	bl	8002670 <LCD_DataRead>
 8003692:	4603      	mov	r3, r0
 8003694:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb2;
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	f023 0304 	bic.w	r3, r3, #4
 800369c:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fe ffbd 	bl	8002620 <LCD_DataWrite>
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <Memory_16bpp_Mode>:
	temp &= cClrb1;
	temp &= cClrb0;
	LCD_DataWrite(temp);
}
void Memory_16bpp_Mode(void)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
X0: 8-bits memory data read/write.
X1: 16-bits memory data read/write
*/
	unsigned char temp;

	LCD_CmdWrite(0x5E);
 80036b4:	205e      	movs	r0, #94	; 0x5e
 80036b6:	f7fe ff8b 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80036ba:	f7fe ffd9 	bl	8002670 <LCD_DataRead>
 80036be:	4603      	mov	r3, r0
 80036c0:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb1;
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	f023 0302 	bic.w	r3, r3, #2
 80036c8:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb0;
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80036d2:	79fb      	ldrb	r3, [r7, #7]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fe ffa3 	bl	8002620 <LCD_DataWrite>
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <Goto_Pixel_XY>:
	LCD_DataWrite(temp);
}

//[5Fh][60h][61h][62h]=========================================================================
void Goto_Pixel_XY(unsigned short WX,unsigned short HY)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	4603      	mov	r3, r0
 80036ea:	460a      	mov	r2, r1
 80036ec:	80fb      	strh	r3, [r7, #6]
 80036ee:	4613      	mov	r3, r2
 80036f0:	80bb      	strh	r3, [r7, #4]
When DPRAM Active window mode:Graphic Read/Write
Horizontal Position [12:8][7:0],
Vertical Position [12:8][7:0].
Reference Canvas image coordination. Unit: Pixel
*/
	LCD_RegisterWrite(0x5F,WX);
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	4619      	mov	r1, r3
 80036f8:	205f      	movs	r0, #95	; 0x5f
 80036fa:	f7ff f809 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x60,WX>>8);
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	0a1b      	lsrs	r3, r3, #8
 8003702:	b29b      	uxth	r3, r3
 8003704:	b2db      	uxtb	r3, r3
 8003706:	4619      	mov	r1, r3
 8003708:	2060      	movs	r0, #96	; 0x60
 800370a:	f7ff f801 	bl	8002710 <LCD_RegisterWrite>

	LCD_RegisterWrite(0x61,HY);
 800370e:	88bb      	ldrh	r3, [r7, #4]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	4619      	mov	r1, r3
 8003714:	2061      	movs	r0, #97	; 0x61
 8003716:	f7fe fffb 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x62,HY>>8);
 800371a:	88bb      	ldrh	r3, [r7, #4]
 800371c:	0a1b      	lsrs	r3, r3, #8
 800371e:	b29b      	uxth	r3, r3
 8003720:	b2db      	uxtb	r3, r3
 8003722:	4619      	mov	r1, r3
 8003724:	2062      	movs	r0, #98	; 0x62
 8003726:	f7fe fff3 	bl	8002710 <LCD_RegisterWrite>
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <Goto_Text_XY>:
}


//[63h][64h][65h][66h]=========================================================================
void Goto_Text_XY(unsigned short WX,unsigned short HY)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	4603      	mov	r3, r0
 800373a:	460a      	mov	r2, r1
 800373c:	80fb      	strh	r3, [r7, #6]
 800373e:	4613      	mov	r3, r2
 8003740:	80bb      	strh	r3, [r7, #4]
Text Write X-coordination [12:8][7:0]
Text Write Y-coordination [12:8][7:0]
Reference Canvas image coordination.
Unit: Pixel
*/
	LCD_RegisterWrite(0x63,WX);
 8003742:	88fb      	ldrh	r3, [r7, #6]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	4619      	mov	r1, r3
 8003748:	2063      	movs	r0, #99	; 0x63
 800374a:	f7fe ffe1 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x64,WX>>8);
 800374e:	88fb      	ldrh	r3, [r7, #6]
 8003750:	0a1b      	lsrs	r3, r3, #8
 8003752:	b29b      	uxth	r3, r3
 8003754:	b2db      	uxtb	r3, r3
 8003756:	4619      	mov	r1, r3
 8003758:	2064      	movs	r0, #100	; 0x64
 800375a:	f7fe ffd9 	bl	8002710 <LCD_RegisterWrite>

	LCD_RegisterWrite(0x65,HY);
 800375e:	88bb      	ldrh	r3, [r7, #4]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	4619      	mov	r1, r3
 8003764:	2065      	movs	r0, #101	; 0x65
 8003766:	f7fe ffd3 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x66,HY>>8);
 800376a:	88bb      	ldrh	r3, [r7, #4]
 800376c:	0a1b      	lsrs	r3, r3, #8
 800376e:	b29b      	uxth	r3, r3
 8003770:	b2db      	uxtb	r3, r3
 8003772:	4619      	mov	r1, r3
 8003774:	2066      	movs	r0, #102	; 0x66
 8003776:	f7fe ffcb 	bl	8002710 <LCD_RegisterWrite>
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <Start_Line>:
[bit1]Draw Triangle or Line Select Signal
0 : Draw Line
1 : Draw Triangle
*/
void Start_Line(void)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	af00      	add	r7, sp, #0
	LCD_CmdWrite(0x67);
 8003786:	2067      	movs	r0, #103	; 0x67
 8003788:	f7fe ff22 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(0x80);
 800378c:	2080      	movs	r0, #128	; 0x80
 800378e:	f7fe ff47 	bl	8002620 <LCD_DataWrite>
	Check_Busy_Draw();
 8003792:	f7ff f9af 	bl	8002af4 <Check_Busy_Draw>
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}

0800379a <Line_Start_XY>:
	Check_Busy_Draw();
}
//[68h][69h][6Ah][6Bh]=========================================================================
//�u�_�I
void Line_Start_XY(unsigned short WX,unsigned short HY)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	4603      	mov	r3, r0
 80037a2:	460a      	mov	r2, r1
 80037a4:	80fb      	strh	r3, [r7, #6]
 80037a6:	4613      	mov	r3, r2
 80037a8:	80bb      	strh	r3, [r7, #4]
[68h] Draw Line/Square/Triangle Start X-coordination [7:0]
[69h] Draw Line/Square/Triangle Start X-coordination [12:8]
[6Ah] Draw Line/Square/Triangle Start Y-coordination [7:0]
[6Bh] Draw Line/Square/Triangle Start Y-coordination [12:8]
*/
	LCD_CmdWrite(0x68);
 80037aa:	2068      	movs	r0, #104	; 0x68
 80037ac:	f7fe ff10 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 80037b0:	88fb      	ldrh	r3, [r7, #6]
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fe ff33 	bl	8002620 <LCD_DataWrite>

	LCD_CmdWrite(0x69);
 80037ba:	2069      	movs	r0, #105	; 0x69
 80037bc:	f7fe ff08 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(WX>>8);
 80037c0:	88fb      	ldrh	r3, [r7, #6]
 80037c2:	0a1b      	lsrs	r3, r3, #8
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fe ff29 	bl	8002620 <LCD_DataWrite>

	LCD_CmdWrite(0x6A);
 80037ce:	206a      	movs	r0, #106	; 0x6a
 80037d0:	f7fe fefe 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(HY);
 80037d4:	88bb      	ldrh	r3, [r7, #4]
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fe ff21 	bl	8002620 <LCD_DataWrite>

	LCD_CmdWrite(0x6B);
 80037de:	206b      	movs	r0, #107	; 0x6b
 80037e0:	f7fe fef6 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(HY>>8);
 80037e4:	88bb      	ldrh	r3, [r7, #4]
 80037e6:	0a1b      	lsrs	r3, r3, #8
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fe ff17 	bl	8002620 <LCD_DataWrite>
}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <Line_End_XY>:
//[6Ch][6Dh][6Eh][6Fh]=========================================================================
void Line_End_XY(unsigned short WX,unsigned short HY)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b082      	sub	sp, #8
 80037fe:	af00      	add	r7, sp, #0
 8003800:	4603      	mov	r3, r0
 8003802:	460a      	mov	r2, r1
 8003804:	80fb      	strh	r3, [r7, #6]
 8003806:	4613      	mov	r3, r2
 8003808:	80bb      	strh	r3, [r7, #4]
[6Ch] Draw Line/Square/Triangle End X-coordination [7:0]
[6Dh] Draw Line/Square/Triangle End X-coordination [12:8]
[6Eh] Draw Line/Square/Triangle End Y-coordination [7:0]
[6Fh] Draw Line/Square/Triangle End Y-coordination [12:8]
*/
	LCD_CmdWrite(0x6C);
 800380a:	206c      	movs	r0, #108	; 0x6c
 800380c:	f7fe fee0 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 8003810:	88fb      	ldrh	r3, [r7, #6]
 8003812:	b2db      	uxtb	r3, r3
 8003814:	4618      	mov	r0, r3
 8003816:	f7fe ff03 	bl	8002620 <LCD_DataWrite>

	LCD_CmdWrite(0x6D);
 800381a:	206d      	movs	r0, #109	; 0x6d
 800381c:	f7fe fed8 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(WX>>8);
 8003820:	88fb      	ldrh	r3, [r7, #6]
 8003822:	0a1b      	lsrs	r3, r3, #8
 8003824:	b29b      	uxth	r3, r3
 8003826:	b2db      	uxtb	r3, r3
 8003828:	4618      	mov	r0, r3
 800382a:	f7fe fef9 	bl	8002620 <LCD_DataWrite>

	LCD_CmdWrite(0x6E);
 800382e:	206e      	movs	r0, #110	; 0x6e
 8003830:	f7fe fece 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(HY);
 8003834:	88bb      	ldrh	r3, [r7, #4]
 8003836:	b2db      	uxtb	r3, r3
 8003838:	4618      	mov	r0, r3
 800383a:	f7fe fef1 	bl	8002620 <LCD_DataWrite>

	LCD_CmdWrite(0x6F);
 800383e:	206f      	movs	r0, #111	; 0x6f
 8003840:	f7fe fec6 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(HY>>8);
 8003844:	88bb      	ldrh	r3, [r7, #4]
 8003846:	0a1b      	lsrs	r3, r3, #8
 8003848:	b29b      	uxth	r3, r3
 800384a:	b2db      	uxtb	r3, r3
 800384c:	4618      	mov	r0, r3
 800384e:	f7fe fee7 	bl	8002620 <LCD_DataWrite>
}
 8003852:	bf00      	nop
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <Start_Square_Fill>:
	LCD_CmdWrite(0x76);
	LCD_DataWrite(0xA0);//B1010_XXXX
	Check_Busy_Draw();
}
void Start_Square_Fill(void)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	af00      	add	r7, sp, #0
	LCD_CmdWrite(0x76);
 800385e:	2076      	movs	r0, #118	; 0x76
 8003860:	f7fe feb6 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(0xE0);//B1110_XXXX
 8003864:	20e0      	movs	r0, #224	; 0xe0
 8003866:	f7fe fedb 	bl	8002620 <LCD_DataWrite>
	Check_Busy_Draw();
 800386a:	f7ff f943 	bl	8002af4 <Check_Busy_Draw>
}
 800386e:	bf00      	nop
 8003870:	bd80      	pop	{r7, pc}

08003872 <Select_PWM0_Clock_Divided_By_2>:
	temp &= cClrb5;
	temp &= cClrb4;
	LCD_DataWrite(temp);
}
void Select_PWM0_Clock_Divided_By_2(void)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
Select MUX input for PWM Timer 0.
00 = 1; 01 = 1/2; 10 = 1/4 ; 11 = 1/8;
*/
	unsigned char temp;

	LCD_CmdWrite(0x85);
 8003878:	2085      	movs	r0, #133	; 0x85
 800387a:	f7fe fea9 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 800387e:	f7fe fef7 	bl	8002670 <LCD_DataRead>
 8003882:	4603      	mov	r3, r0
 8003884:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb5;
 8003886:	79fb      	ldrb	r3, [r7, #7]
 8003888:	f023 0320 	bic.w	r3, r3, #32
 800388c:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb4;
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	f043 0310 	orr.w	r3, r3, #16
 8003894:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	4618      	mov	r0, r3
 800389a:	f7fe fec1 	bl	8002620 <LCD_DataWrite>
}
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <Select_PWM0>:
	temp = LCD_DataRead();
	temp &= cClrb1;
	LCD_DataWrite(temp);
}
void Select_PWM0(void)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b082      	sub	sp, #8
 80038aa:	af00      	add	r7, sp, #0
	unsigned char temp;

	LCD_CmdWrite(0x85);
 80038ac:	2085      	movs	r0, #133	; 0x85
 80038ae:	f7fe fe8f 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80038b2:	f7fe fedd 	bl	8002670 <LCD_DataRead>
 80038b6:	4603      	mov	r3, r0
 80038b8:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb1;
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	f043 0302 	orr.w	r3, r3, #2
 80038c0:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb0;
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	f023 0301 	bic.w	r3, r3, #1
 80038c8:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fe fea7 	bl	8002620 <LCD_DataWrite>
}
 80038d2:	bf00      	nop
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <Enable_PWM0_Dead_Zone>:
	temp &= cClrb4;
	LCD_DataWrite(temp);
}
//[86h]PWM0
void Enable_PWM0_Dead_Zone(void)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
/*
PWM Timer 0 Dead zone enable
Determine the dead zone operation. 0 = Disable. 1 = Enable.
*/
	unsigned char temp;
	LCD_CmdWrite(0x86);
 80038e0:	2086      	movs	r0, #134	; 0x86
 80038e2:	f7fe fe75 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80038e6:	f7fe fec3 	bl	8002670 <LCD_DataRead>
 80038ea:	4603      	mov	r3, r0
 80038ec:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb3;
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	f043 0308 	orr.w	r3, r3, #8
 80038f4:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fe fe91 	bl	8002620 <LCD_DataWrite>
}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <Auto_Reload_PWM0>:
	temp = LCD_DataRead();
	temp &= cClrb2;
	LCD_DataWrite(temp);
}
void Auto_Reload_PWM0(void)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
Determine auto reload on/off for Timer 0.
0 = One-shot
1 = Interval mode(auto reload)
*/
	unsigned char temp;
	LCD_CmdWrite(0x86);
 800390c:	2086      	movs	r0, #134	; 0x86
 800390e:	f7fe fe5f 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8003912:	f7fe fead 	bl	8002670 <LCD_DataRead>
 8003916:	4603      	mov	r3, r0
 8003918:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb1;
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	f043 0302 	orr.w	r3, r3, #2
 8003920:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	4618      	mov	r0, r3
 8003926:	f7fe fe7b 	bl	8002620 <LCD_DataWrite>
}
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <Start_PWM0>:
	temp = LCD_DataRead();
	temp &= cClrb1;
	LCD_DataWrite(temp);
}
void Start_PWM0(void)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
Determine start/stop for Timer 0.
0 = Stop
1 = Start for Timer 0
*/
	unsigned char temp;
	LCD_CmdWrite(0x86);
 8003938:	2086      	movs	r0, #134	; 0x86
 800393a:	f7fe fe49 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 800393e:	f7fe fe97 	bl	8002670 <LCD_DataRead>
 8003942:	4603      	mov	r3, r0
 8003944:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb0;
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	4618      	mov	r0, r3
 8003952:	f7fe fe65 	bl	8002620 <LCD_DataWrite>
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <Set_Timer0_Compare_Buffer>:
	LCD_CmdWrite(0x87);
	LCD_DataWrite(temp);
}
//[88h][89h]=========================================================================
void Set_Timer0_Compare_Buffer(unsigned short WX)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	4603      	mov	r3, r0
 8003966:	80fb      	strh	r3, [r7, #6]
Timer 0 compare buffer register
Compare buffer register total has 16 bits.
When timer counter equal or less than compare buffer register will cause PWM out
high level if inv_on bit is off.
*/
	LCD_CmdWrite(0x88);
 8003968:	2088      	movs	r0, #136	; 0x88
 800396a:	f7fe fe31 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 800396e:	88fb      	ldrh	r3, [r7, #6]
 8003970:	b2db      	uxtb	r3, r3
 8003972:	4618      	mov	r0, r3
 8003974:	f7fe fe54 	bl	8002620 <LCD_DataWrite>
	LCD_CmdWrite(0x89);
 8003978:	2089      	movs	r0, #137	; 0x89
 800397a:	f7fe fe29 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(WX>>8);
 800397e:	88fb      	ldrh	r3, [r7, #6]
 8003980:	0a1b      	lsrs	r3, r3, #8
 8003982:	b29b      	uxth	r3, r3
 8003984:	b2db      	uxtb	r3, r3
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe fe4a 	bl	8002620 <LCD_DataWrite>
}
 800398c:	bf00      	nop
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <BTE_Enable>:

//[90h]~[B5h]=========================================================================

//[90h]=========================================================================
void BTE_Enable(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
BTE Function Enable
0 : BTE Function disable.
1 : BTE Function enable.
*/
    unsigned char temp;
    LCD_CmdWrite(0x90);
 800399a:	2090      	movs	r0, #144	; 0x90
 800399c:	f7fe fe18 	bl	80025d0 <LCD_CmdWrite>
    temp = LCD_DataRead();
 80039a0:	f7fe fe66 	bl	8002670 <LCD_DataRead>
 80039a4:	4603      	mov	r3, r0
 80039a6:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb4 ;
 80039a8:	79fb      	ldrb	r3, [r7, #7]
 80039aa:	f043 0310 	orr.w	r3, r3, #16
 80039ae:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fe fe34 	bl	8002620 <LCD_DataWrite>
}
 80039b8:	bf00      	nop
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <Check_BTE_Busy>:
	LCD_DataWrite(temp);
}

//[90h]=========================================================================
void Check_BTE_Busy(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
1 : BTE Function is busy.
*/
	unsigned char temp;
	do
	{
		temp=LCD_StatusRead();
 80039c6:	f7fe fe7b 	bl	80026c0 <LCD_StatusRead>
 80039ca:	4603      	mov	r3, r0
 80039cc:	71fb      	strb	r3, [r7, #7]
	}while(temp&0x08);
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1f6      	bne.n	80039c6 <Check_BTE_Busy+0x6>

}
 80039d8:	bf00      	nop
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <Pattern_Format_16X16>:
    temp &= cClrb0 ;
	LCD_DataWrite(temp);
}
//[90h]=========================================================================
void Pattern_Format_16X16(void)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
Pattern Format
0 : 8X8
1 : 16X16
*/
    unsigned char temp;
    LCD_CmdWrite(0x90);
 80039e8:	2090      	movs	r0, #144	; 0x90
 80039ea:	f7fe fdf1 	bl	80025d0 <LCD_CmdWrite>
    temp = LCD_DataRead();
 80039ee:	f7fe fe3f 	bl	8002670 <LCD_DataRead>
 80039f2:	4603      	mov	r3, r0
 80039f4:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb0 ;
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	71fb      	strb	r3, [r7, #7]
	  LCD_DataWrite(temp);
 80039fe:	79fb      	ldrb	r3, [r7, #7]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fe fe0d 	bl	8002620 <LCD_DataWrite>
}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <BTE_ROP_Code>:

//[91h]=========================================================================
void BTE_ROP_Code(unsigned char setx)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	4603      	mov	r3, r0
 8003a16:	71fb      	strb	r3, [r7, #7]
1101 : S0+~S1
1110 : S0+S1
1111 : 1 ( Whiteness )
*/
    unsigned char temp;
    LCD_CmdWrite(0x91);
 8003a18:	2091      	movs	r0, #145	; 0x91
 8003a1a:	f7fe fdd9 	bl	80025d0 <LCD_CmdWrite>
    temp = LCD_DataRead();
 8003a1e:	f7fe fe27 	bl	8002670 <LCD_DataRead>
 8003a22:	4603      	mov	r3, r0
 8003a24:	73fb      	strb	r3, [r7, #15]
    temp &= 0x0f ;
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	73fb      	strb	r3, [r7, #15]
		temp |= (setx<<4);
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	b25a      	sxtb	r2, r3
 8003a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	b25b      	sxtb	r3, r3
 8003a3c:	73fb      	strb	r3, [r7, #15]
	  LCD_DataWrite(temp);
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe fded 	bl	8002620 <LCD_DataWrite>
}
 8003a46:	bf00      	nop
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <BTE_Operation_Code>:

//[91h]=========================================================================
void BTE_Operation_Code(unsigned char setx)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b084      	sub	sp, #16
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	4603      	mov	r3, r0
 8003a56:	71fb      	strb	r3, [r7, #7]
1101 : Reserved
1110 : Reserved
1111 : Reserved
*/
    unsigned char temp;
    LCD_CmdWrite(0x91);
 8003a58:	2091      	movs	r0, #145	; 0x91
 8003a5a:	f7fe fdb9 	bl	80025d0 <LCD_CmdWrite>
    temp = LCD_DataRead();
 8003a5e:	f7fe fe07 	bl	8002670 <LCD_DataRead>
 8003a62:	4603      	mov	r3, r0
 8003a64:	73fb      	strb	r3, [r7, #15]
    temp &= 0xf0 ;
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
 8003a68:	f023 030f 	bic.w	r3, r3, #15
 8003a6c:	73fb      	strb	r3, [r7, #15]
		temp |= setx ;
 8003a6e:	7bfa      	ldrb	r2, [r7, #15]
 8003a70:	79fb      	ldrb	r3, [r7, #7]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	73fb      	strb	r3, [r7, #15]
	  LCD_DataWrite(temp);
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fe fdd1 	bl	8002620 <LCD_DataWrite>

}
 8003a7e:	bf00      	nop
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <BTE_S0_Color_16bpp>:
		temp &= cClrb5 ;
	  LCD_DataWrite(temp);
}
//[92h]=========================================================================
void BTE_S0_Color_16bpp(void)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
00 : 256 Color
01 : 64k Color
1x : 16M Color
*/
    unsigned char temp;
    LCD_CmdWrite(0x92);
 8003a8c:	2092      	movs	r0, #146	; 0x92
 8003a8e:	f7fe fd9f 	bl	80025d0 <LCD_CmdWrite>
    temp = LCD_DataRead();
 8003a92:	f7fe fded 	bl	8002670 <LCD_DataRead>
 8003a96:	4603      	mov	r3, r0
 8003a98:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb6 ;
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aa0:	71fb      	strb	r3, [r7, #7]
		temp |= cSetb5 ;
 8003aa2:	79fb      	ldrb	r3, [r7, #7]
 8003aa4:	f043 0320 	orr.w	r3, r3, #32
 8003aa8:	71fb      	strb	r3, [r7, #7]
	  LCD_DataWrite(temp);
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fe fdb7 	bl	8002620 <LCD_DataWrite>

}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <BTE_S1_Color_16bpp>:
	  temp &= cClrb2 ;
	  LCD_DataWrite(temp);
}
//[92h]=========================================================================
void BTE_S1_Color_16bpp(void)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
011 : Constant Color
100 : 8 bit pixel alpha blending
101 : 16 bit pixel alpha blending
*/
    unsigned char temp;
    LCD_CmdWrite(0x92);
 8003ac0:	2092      	movs	r0, #146	; 0x92
 8003ac2:	f7fe fd85 	bl	80025d0 <LCD_CmdWrite>
    temp = LCD_DataRead();
 8003ac6:	f7fe fdd3 	bl	8002670 <LCD_DataRead>
 8003aca:	4603      	mov	r3, r0
 8003acc:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb4 ;
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	f023 0310 	bic.w	r3, r3, #16
 8003ad4:	71fb      	strb	r3, [r7, #7]
		temp &= cClrb3 ;
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	f023 0308 	bic.w	r3, r3, #8
 8003adc:	71fb      	strb	r3, [r7, #7]
	  temp |= cSetb2 ;
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	f043 0304 	orr.w	r3, r3, #4
 8003ae4:	71fb      	strb	r3, [r7, #7]
	  LCD_DataWrite(temp);
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fe fd99 	bl	8002620 <LCD_DataWrite>

}
 8003aee:	bf00      	nop
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <BTE_Destination_Color_16bpp>:
		temp &= cClrb0 ;
	  LCD_DataWrite(temp);
}
//[92h]=========================================================================
void BTE_Destination_Color_16bpp(void)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
00 : 256 Color
01 : 64k Color
1x : 16M Color
*/
    unsigned char temp;
    LCD_CmdWrite(0x92);
 8003afc:	2092      	movs	r0, #146	; 0x92
 8003afe:	f7fe fd67 	bl	80025d0 <LCD_CmdWrite>
    temp = LCD_DataRead();
 8003b02:	f7fe fdb5 	bl	8002670 <LCD_DataRead>
 8003b06:	4603      	mov	r3, r0
 8003b08:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb1 ;
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	f023 0302 	bic.w	r3, r3, #2
 8003b10:	71fb      	strb	r3, [r7, #7]
		temp |= cSetb0 ;
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	71fb      	strb	r3, [r7, #7]
	  LCD_DataWrite(temp);
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fe fd7f 	bl	8002620 <LCD_DataWrite>

}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <BTE_S0_Memory_Start_Address>:
}


//[93h][94h][95h][96h]=========================================================================
void BTE_S0_Memory_Start_Address(unsigned long Addr)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
[93h] BTE S0 Memory Start Address [7:0]
[94h] BTE S0 Memory Start Address [15:8]
[95h] BTE S0 Memory Start Address [23:16]
[96h] BTE S0 Memory Start Address [31:24]
*/
	LCD_RegisterWrite(0x93,Addr);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	4619      	mov	r1, r3
 8003b38:	2093      	movs	r0, #147	; 0x93
 8003b3a:	f7fe fde9 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x94,Addr>>8);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	0a1b      	lsrs	r3, r3, #8
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	4619      	mov	r1, r3
 8003b46:	2094      	movs	r0, #148	; 0x94
 8003b48:	f7fe fde2 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x95,Addr>>16);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	0c1b      	lsrs	r3, r3, #16
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	4619      	mov	r1, r3
 8003b54:	2095      	movs	r0, #149	; 0x95
 8003b56:	f7fe fddb 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x96,Addr>>24);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	0e1b      	lsrs	r3, r3, #24
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	4619      	mov	r1, r3
 8003b62:	2096      	movs	r0, #150	; 0x96
 8003b64:	f7fe fdd4 	bl	8002710 <LCD_RegisterWrite>
}
 8003b68:	bf00      	nop
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <BTE_S0_Image_Width>:


//[97h][98h]=========================================================================
void BTE_S0_Image_Width(unsigned short WX)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	80fb      	strh	r3, [r7, #6]
/*
[97h] BTE S0 Image Width [7:0]
[98h] BTE S0 Image Width [12:8]
Unit: Pixel.
*/
	LCD_RegisterWrite(0x97,WX);
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	4619      	mov	r1, r3
 8003b80:	2097      	movs	r0, #151	; 0x97
 8003b82:	f7fe fdc5 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x98,WX>>8);
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	0a1b      	lsrs	r3, r3, #8
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	4619      	mov	r1, r3
 8003b90:	2098      	movs	r0, #152	; 0x98
 8003b92:	f7fe fdbd 	bl	8002710 <LCD_RegisterWrite>
}
 8003b96:	bf00      	nop
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <BTE_S0_Window_Start_XY>:


//[99h][9Ah][9Bh][9Ch]=========================================================================
void BTE_S0_Window_Start_XY(unsigned short WX,unsigned short HY)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	460a      	mov	r2, r1
 8003ba8:	80fb      	strh	r3, [r7, #6]
 8003baa:	4613      	mov	r3, r2
 8003bac:	80bb      	strh	r3, [r7, #4]
[99h] BTE S0 Window Upper-Left corner X-coordination [7:0]
[9Ah] BTE S0 Window Upper-Left corner X-coordination [12:8]
[9Bh] BTE S0 Window Upper-Left corner Y-coordination [7:0]
[9Ch] BTE S0 Window Upper-Left corner Y-coordination [12:8]
*/
	LCD_RegisterWrite(0x99,WX);
 8003bae:	88fb      	ldrh	r3, [r7, #6]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	2099      	movs	r0, #153	; 0x99
 8003bb6:	f7fe fdab 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x9A,WX>>8);
 8003bba:	88fb      	ldrh	r3, [r7, #6]
 8003bbc:	0a1b      	lsrs	r3, r3, #8
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	209a      	movs	r0, #154	; 0x9a
 8003bc6:	f7fe fda3 	bl	8002710 <LCD_RegisterWrite>

	LCD_RegisterWrite(0x9B,HY);
 8003bca:	88bb      	ldrh	r3, [r7, #4]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	4619      	mov	r1, r3
 8003bd0:	209b      	movs	r0, #155	; 0x9b
 8003bd2:	f7fe fd9d 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x9C,HY>>8);
 8003bd6:	88bb      	ldrh	r3, [r7, #4]
 8003bd8:	0a1b      	lsrs	r3, r3, #8
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	4619      	mov	r1, r3
 8003be0:	209c      	movs	r0, #156	; 0x9c
 8003be2:	f7fe fd95 	bl	8002710 <LCD_RegisterWrite>
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <BTE_S1_Memory_Start_Address>:



//[9Dh][9Eh][9Fh][A0h]=========================================================================
void BTE_S1_Memory_Start_Address(unsigned long Addr)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
[9Dh] BTE S1 Memory Start Address [7:0]
[9Eh] BTE S1 Memory Start Address [15:8]
[9Fh] BTE S1 Memory Start Address [23:16]
[A0h] BTE S1 Memory Start Address [31:24]
*/
	LCD_RegisterWrite(0x9D,Addr);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	209d      	movs	r0, #157	; 0x9d
 8003bfe:	f7fe fd87 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x9E,Addr>>8);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	0a1b      	lsrs	r3, r3, #8
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	4619      	mov	r1, r3
 8003c0a:	209e      	movs	r0, #158	; 0x9e
 8003c0c:	f7fe fd80 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x9F,Addr>>16);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	0c1b      	lsrs	r3, r3, #16
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	4619      	mov	r1, r3
 8003c18:	209f      	movs	r0, #159	; 0x9f
 8003c1a:	f7fe fd79 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0xA0,Addr>>24);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	0e1b      	lsrs	r3, r3, #24
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	4619      	mov	r1, r3
 8003c26:	20a0      	movs	r0, #160	; 0xa0
 8003c28:	f7fe fd72 	bl	8002710 <LCD_RegisterWrite>
}
 8003c2c:	bf00      	nop
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <BTE_S1_Image_Width>:



//[A1h][A2h]=========================================================================
void BTE_S1_Image_Width(unsigned short WX)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	80fb      	strh	r3, [r7, #6]
/*
[A1h] BTE S1 Image Width [7:0]
[A2h] BTE S1 Image Width [12:8]
Unit: Pixel.
*/
	LCD_RegisterWrite(0xA1,WX);
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	4619      	mov	r1, r3
 8003c44:	20a1      	movs	r0, #161	; 0xa1
 8003c46:	f7fe fd63 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0xA2,WX>>8);
 8003c4a:	88fb      	ldrh	r3, [r7, #6]
 8003c4c:	0a1b      	lsrs	r3, r3, #8
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	4619      	mov	r1, r3
 8003c54:	20a2      	movs	r0, #162	; 0xa2
 8003c56:	f7fe fd5b 	bl	8002710 <LCD_RegisterWrite>
}
 8003c5a:	bf00      	nop
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <BTE_S1_Window_Start_XY>:


//[A3h][A4h][A5h][A6h]=========================================================================
void BTE_S1_Window_Start_XY(unsigned short WX,unsigned short HY)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b082      	sub	sp, #8
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	4603      	mov	r3, r0
 8003c6a:	460a      	mov	r2, r1
 8003c6c:	80fb      	strh	r3, [r7, #6]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	80bb      	strh	r3, [r7, #4]
[A3h] BTE S1 Window Upper-Left corner X-coordination [7:0]
[A4h] BTE S1 Window Upper-Left corner X-coordination [12:8]
[A5h] BTE S1 Window Upper-Left corner Y-coordination [7:0]
[A6h] BTE S1 Window Upper-Left corner Y-coordination [12:8]
*/
	LCD_RegisterWrite(0xA3,WX);
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	4619      	mov	r1, r3
 8003c78:	20a3      	movs	r0, #163	; 0xa3
 8003c7a:	f7fe fd49 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0xA4,WX>>8);
 8003c7e:	88fb      	ldrh	r3, [r7, #6]
 8003c80:	0a1b      	lsrs	r3, r3, #8
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	4619      	mov	r1, r3
 8003c88:	20a4      	movs	r0, #164	; 0xa4
 8003c8a:	f7fe fd41 	bl	8002710 <LCD_RegisterWrite>

	LCD_RegisterWrite(0xA5,HY);
 8003c8e:	88bb      	ldrh	r3, [r7, #4]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	4619      	mov	r1, r3
 8003c94:	20a5      	movs	r0, #165	; 0xa5
 8003c96:	f7fe fd3b 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0xA6,HY>>8);
 8003c9a:	88bb      	ldrh	r3, [r7, #4]
 8003c9c:	0a1b      	lsrs	r3, r3, #8
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	20a6      	movs	r0, #166	; 0xa6
 8003ca6:	f7fe fd33 	bl	8002710 <LCD_RegisterWrite>
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <BTE_Destination_Memory_Start_Address>:



//[A7h][A8h][A9h][AAh]=========================================================================
void BTE_Destination_Memory_Start_Address(unsigned long Addr)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b082      	sub	sp, #8
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
[A7h] BTE Destination Memory Start Address [7:0]
[A8h] BTE Destination Memory Start Address [15:8]
[A9h] BTE Destination Memory Start Address [23:16]
[AAh] BTE Destination Memory Start Address [31:24]
*/
	LCD_RegisterWrite(0xA7,Addr);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	20a7      	movs	r0, #167	; 0xa7
 8003cc2:	f7fe fd25 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0xA8,Addr>>8);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	0a1b      	lsrs	r3, r3, #8
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	4619      	mov	r1, r3
 8003cce:	20a8      	movs	r0, #168	; 0xa8
 8003cd0:	f7fe fd1e 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0xA9,Addr>>16);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	0c1b      	lsrs	r3, r3, #16
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	4619      	mov	r1, r3
 8003cdc:	20a9      	movs	r0, #169	; 0xa9
 8003cde:	f7fe fd17 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0xAA,Addr>>24);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	0e1b      	lsrs	r3, r3, #24
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	4619      	mov	r1, r3
 8003cea:	20aa      	movs	r0, #170	; 0xaa
 8003cec:	f7fe fd10 	bl	8002710 <LCD_RegisterWrite>
}
 8003cf0:	bf00      	nop
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <BTE_Destination_Image_Width>:


//[ABh][ACh]=========================================================================
void BTE_Destination_Image_Width(unsigned short WX)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	80fb      	strh	r3, [r7, #6]
/*
[ABh] BTE Destination Image Width [7:0]
[ACh] BTE Destination Image Width [12:8]
Unit: Pixel.
*/
	LCD_RegisterWrite(0xAB,WX);
 8003d02:	88fb      	ldrh	r3, [r7, #6]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	4619      	mov	r1, r3
 8003d08:	20ab      	movs	r0, #171	; 0xab
 8003d0a:	f7fe fd01 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0xAC,WX>>8);
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	0a1b      	lsrs	r3, r3, #8
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	4619      	mov	r1, r3
 8003d18:	20ac      	movs	r0, #172	; 0xac
 8003d1a:	f7fe fcf9 	bl	8002710 <LCD_RegisterWrite>
}
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <BTE_Destination_Window_Start_XY>:


//[ADh][AEh][AFh][B0h]=========================================================================
void BTE_Destination_Window_Start_XY(unsigned short WX,unsigned short HY)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	460a      	mov	r2, r1
 8003d30:	80fb      	strh	r3, [r7, #6]
 8003d32:	4613      	mov	r3, r2
 8003d34:	80bb      	strh	r3, [r7, #4]
[ADh] BTE Destination Window Upper-Left corner X-coordination [7:0]
[AEh] BTE Destination Window Upper-Left corner X-coordination [12:8]
[AFh] BTE Destination Window Upper-Left corner Y-coordination [7:0]
[B0h] BTE Destination Window Upper-Left corner Y-coordination [12:8]
*/
	LCD_RegisterWrite(0xAD,WX);
 8003d36:	88fb      	ldrh	r3, [r7, #6]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	20ad      	movs	r0, #173	; 0xad
 8003d3e:	f7fe fce7 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0xAE,WX>>8);
 8003d42:	88fb      	ldrh	r3, [r7, #6]
 8003d44:	0a1b      	lsrs	r3, r3, #8
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	20ae      	movs	r0, #174	; 0xae
 8003d4e:	f7fe fcdf 	bl	8002710 <LCD_RegisterWrite>

	LCD_RegisterWrite(0xAF,HY);
 8003d52:	88bb      	ldrh	r3, [r7, #4]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	4619      	mov	r1, r3
 8003d58:	20af      	movs	r0, #175	; 0xaf
 8003d5a:	f7fe fcd9 	bl	8002710 <LCD_RegisterWrite>
	LCD_RegisterWrite(0xB0,HY>>8);
 8003d5e:	88bb      	ldrh	r3, [r7, #4]
 8003d60:	0a1b      	lsrs	r3, r3, #8
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	4619      	mov	r1, r3
 8003d68:	20b0      	movs	r0, #176	; 0xb0
 8003d6a:	f7fe fcd1 	bl	8002710 <LCD_RegisterWrite>
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <BTE_Window_Size>:

//[B1h][B2h][B3h][B4h]===============================================================

void BTE_Window_Size(unsigned short WX, unsigned short WY)

{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	460a      	mov	r2, r1
 8003d80:	80fb      	strh	r3, [r7, #6]
 8003d82:	4613      	mov	r3, r2
 8003d84:	80bb      	strh	r3, [r7, #4]
[B2h] BTE Window Width [12:8]

[B3h] BTE Window Height [7:0]
[B4h] BTE Window Height [12:8]
*/
        LCD_RegisterWrite(0xB1,WX);
 8003d86:	88fb      	ldrh	r3, [r7, #6]
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	20b1      	movs	r0, #177	; 0xb1
 8003d8e:	f7fe fcbf 	bl	8002710 <LCD_RegisterWrite>
        LCD_RegisterWrite(0xB2,WX>>8);
 8003d92:	88fb      	ldrh	r3, [r7, #6]
 8003d94:	0a1b      	lsrs	r3, r3, #8
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	20b2      	movs	r0, #178	; 0xb2
 8003d9e:	f7fe fcb7 	bl	8002710 <LCD_RegisterWrite>

	    LCD_RegisterWrite(0xB3,WY);
 8003da2:	88bb      	ldrh	r3, [r7, #4]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	4619      	mov	r1, r3
 8003da8:	20b3      	movs	r0, #179	; 0xb3
 8003daa:	f7fe fcb1 	bl	8002710 <LCD_RegisterWrite>
        LCD_RegisterWrite(0xB4,WY>>8);
 8003dae:	88bb      	ldrh	r3, [r7, #4]
 8003db0:	0a1b      	lsrs	r3, r3, #8
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	4619      	mov	r1, r3
 8003db8:	20b4      	movs	r0, #180	; 0xb4
 8003dba:	f7fe fca9 	bl	8002710 <LCD_RegisterWrite>
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <Start_SFI_DMA>:
}


//[B6h]=========================================================================
void Start_SFI_DMA(void)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
	unsigned char temp;
	LCD_CmdWrite(0xB6);
 8003dcc:	20b6      	movs	r0, #182	; 0xb6
 8003dce:	f7fe fbff 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8003dd2:	f7fe fc4d 	bl	8002670 <LCD_DataRead>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb0;
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fe fc1b 	bl	8002620 <LCD_DataWrite>
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <Check_Busy_SFI_DMA>:

void Check_Busy_SFI_DMA(void)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	af00      	add	r7, sp, #0
	LCD_CmdWrite(0xB6);
 8003df6:	20b6      	movs	r0, #182	; 0xb6
 8003df8:	f7fe fbea 	bl	80025d0 <LCD_CmdWrite>
	do
	{
	}while((LCD_DataRead()&0x01)==0x01);
 8003dfc:	f7fe fc38 	bl	8002670 <LCD_DataRead>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d0f8      	beq.n	8003dfc <Check_Busy_SFI_DMA+0xa>
}
 8003e0a:	bf00      	nop
 8003e0c:	bf00      	nop
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <Select_SFI_0>:


//[B7h]=========================================================================
void Select_SFI_0(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
Serial Flash/ROM I/F # Select
0: Serial Flash/ROM 0 I/F is selected.
1: Serial Flash/ROM 1 I/F is selected.
*/
	unsigned char temp;
	LCD_CmdWrite(0xB7);
 8003e16:	20b7      	movs	r0, #183	; 0xb7
 8003e18:	f7fe fbda 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8003e1c:	f7fe fc28 	bl	8002670 <LCD_DataRead>
 8003e20:	4603      	mov	r3, r0
 8003e22:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb7;
 8003e24:	79fb      	ldrb	r3, [r7, #7]
 8003e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e2a:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8003e2c:	79fb      	ldrb	r3, [r7, #7]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fe fbf6 	bl	8002620 <LCD_DataWrite>
}
 8003e34:	bf00      	nop
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <Select_SFI_1>:
void Select_SFI_1(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
Serial Flash/ROM I/F # Select
0: Serial Flash/ROM 0 I/F is selected.
1: Serial Flash/ROM 1 I/F is selected.
*/
	unsigned char temp;
	LCD_CmdWrite(0xB7);
 8003e42:	20b7      	movs	r0, #183	; 0xb7
 8003e44:	f7fe fbc4 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8003e48:	f7fe fc12 	bl	8002670 <LCD_DataRead>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb7;
 8003e50:	79fb      	ldrb	r3, [r7, #7]
 8003e52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e56:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8003e58:	79fb      	ldrb	r3, [r7, #7]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fe fbe0 	bl	8002620 <LCD_DataWrite>
}
 8003e60:	bf00      	nop
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <Select_SFI_Font_Mode>:
void Select_SFI_Font_Mode(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
Serial Flash /ROM Access Mode
0: Font mode V for external cgrom
1: DMA mode V for cgram , pattern , bootstart image or osd
*/
	unsigned char temp;
	LCD_CmdWrite(0xB7);
 8003e6e:	20b7      	movs	r0, #183	; 0xb7
 8003e70:	f7fe fbae 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8003e74:	f7fe fbfc 	bl	8002670 <LCD_DataRead>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb6;
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e82:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8003e84:	79fb      	ldrb	r3, [r7, #7]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fe fbca 	bl	8002620 <LCD_DataWrite>
}
 8003e8c:	bf00      	nop
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <Select_SFI_DMA_Mode>:
void Select_SFI_DMA_Mode(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
Serial Flash /ROM Access Mode
0: Font mode V for external cgrom
1: DMA mode V for cgram , pattern , bootstart image or osd
*/
	unsigned char temp;
	LCD_CmdWrite(0xB7);
 8003e9a:	20b7      	movs	r0, #183	; 0xb7
 8003e9c:	f7fe fb98 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8003ea0:	f7fe fbe6 	bl	8002670 <LCD_DataRead>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb6;
 8003ea8:	79fb      	ldrb	r3, [r7, #7]
 8003eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eae:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fe fbb4 	bl	8002620 <LCD_DataWrite>
}
 8003eb8:	bf00      	nop
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <Select_SFI_24bit_Address>:
void Select_SFI_24bit_Address(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
Serial Flash/ROM Address Mode
0: 24 bits address mode
1: 32 bits address mode
*/
	unsigned char temp;
	LCD_CmdWrite(0xB7);
 8003ec6:	20b7      	movs	r0, #183	; 0xb7
 8003ec8:	f7fe fb82 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8003ecc:	f7fe fbd0 	bl	8002670 <LCD_DataRead>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb5;
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	f023 0320 	bic.w	r3, r3, #32
 8003eda:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fe fb9e 	bl	8002620 <LCD_DataWrite>
}
 8003ee4:	bf00      	nop
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <Select_SFI_Waveform_Mode_0>:
	temp = LCD_DataRead();
    temp |= cSetb5;
	LCD_DataWrite(temp);
}
void Select_SFI_Waveform_Mode_0(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
Serial Flash/ROM Waveform Mode
Mode 0.
Mode 3.
*/
	unsigned char temp;
	LCD_CmdWrite(0xB7);
 8003ef2:	20b7      	movs	r0, #183	; 0xb7
 8003ef4:	f7fe fb6c 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8003ef8:	f7fe fbba 	bl	8002670 <LCD_DataRead>
 8003efc:	4603      	mov	r3, r0
 8003efe:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb4;
 8003f00:	79fb      	ldrb	r3, [r7, #7]
 8003f02:	f023 0310 	bic.w	r3, r3, #16
 8003f06:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8003f08:	79fb      	ldrb	r3, [r7, #7]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fe fb88 	bl	8002620 <LCD_DataWrite>
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <Select_SFI_Waveform_Mode_3>:
void Select_SFI_Waveform_Mode_3(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
Serial Flash/ROM Waveform Mode
Mode 0.
Mode 3.
*/
	unsigned char temp;
	LCD_CmdWrite(0xB7);
 8003f1e:	20b7      	movs	r0, #183	; 0xb7
 8003f20:	f7fe fb56 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8003f24:	f7fe fba4 	bl	8002670 <LCD_DataRead>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb4;
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	f043 0310 	orr.w	r3, r3, #16
 8003f32:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8003f34:	79fb      	ldrb	r3, [r7, #7]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fe fb72 	bl	8002620 <LCD_DataWrite>
}
 8003f3c:	bf00      	nop
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <Select_SFI_0_DummyRead>:
void Select_SFI_0_DummyRead(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
01b: 1 dummy cycle mode
10b: 2 dummy cycle mode
11b: 4 dummy cycle mode
*/
	unsigned char temp;
	LCD_CmdWrite(0xB7);
 8003f4a:	20b7      	movs	r0, #183	; 0xb7
 8003f4c:	f7fe fb40 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8003f50:	f7fe fb8e 	bl	8002670 <LCD_DataRead>
 8003f54:	4603      	mov	r3, r0
 8003f56:	71fb      	strb	r3, [r7, #7]
	temp &= 0xF3;
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	f023 030c 	bic.w	r3, r3, #12
 8003f5e:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8003f60:	79fb      	ldrb	r3, [r7, #7]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fe fb5c 	bl	8002620 <LCD_DataWrite>
}
 8003f68:	bf00      	nop
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <Select_SFI_8_DummyRead>:
void Select_SFI_8_DummyRead(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
	unsigned char temp;
	LCD_CmdWrite(0xB7);
 8003f76:	20b7      	movs	r0, #183	; 0xb7
 8003f78:	f7fe fb2a 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8003f7c:	f7fe fb78 	bl	8002670 <LCD_DataRead>
 8003f80:	4603      	mov	r3, r0
 8003f82:	71fb      	strb	r3, [r7, #7]
	temp &= 0xF3;
 8003f84:	79fb      	ldrb	r3, [r7, #7]
 8003f86:	f023 030c 	bic.w	r3, r3, #12
 8003f8a:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb2;
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	f043 0304 	orr.w	r3, r3, #4
 8003f92:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8003f94:	79fb      	ldrb	r3, [r7, #7]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe fb42 	bl	8002620 <LCD_DataWrite>
}
 8003f9c:	bf00      	nop
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <Select_SFI_Single_Mode>:
	temp = LCD_DataRead();
    temp |= 0x0c;
	LCD_DataWrite(temp);
}
void Select_SFI_Single_Mode(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
0Xb: Single Mode
10b: Dual Mode 0.
11b: Dual Mode 1.
*/
	unsigned char temp;
	LCD_CmdWrite(0xB7);
 8003faa:	20b7      	movs	r0, #183	; 0xb7
 8003fac:	f7fe fb10 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8003fb0:	f7fe fb5e 	bl	8002670 <LCD_DataRead>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	71fb      	strb	r3, [r7, #7]
	temp &= 0xFC;
 8003fb8:	79fb      	ldrb	r3, [r7, #7]
 8003fba:	f023 0303 	bic.w	r3, r3, #3
 8003fbe:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8003fc0:	79fb      	ldrb	r3, [r7, #7]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe fb2c 	bl	8002620 <LCD_DataWrite>
}
 8003fc8:	bf00      	nop
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <Select_SFI_Dual_Mode0>:
void Select_SFI_Dual_Mode0(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
	unsigned char temp;
	LCD_CmdWrite(0xB7);
 8003fd6:	20b7      	movs	r0, #183	; 0xb7
 8003fd8:	f7fe fafa 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8003fdc:	f7fe fb48 	bl	8002670 <LCD_DataRead>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	71fb      	strb	r3, [r7, #7]
	temp &= 0xFC;
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	f023 0303 	bic.w	r3, r3, #3
 8003fea:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb1;
 8003fec:	79fb      	ldrb	r3, [r7, #7]
 8003fee:	f043 0302 	orr.w	r3, r3, #2
 8003ff2:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8003ff4:	79fb      	ldrb	r3, [r7, #7]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fe fb12 	bl	8002620 <LCD_DataWrite>
}
 8003ffc:	bf00      	nop
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <SPI_Clock_Period>:
}


//REG[BB] SPI Clock period (SPIDIV)
void SPI_Clock_Period(unsigned char temp)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	71fb      	strb	r3, [r7, #7]
   LCD_CmdWrite(0xBB);
 800400e:	20bb      	movs	r0, #187	; 0xbb
 8004010:	f7fe fade 	bl	80025d0 <LCD_CmdWrite>
   LCD_DataWrite(temp);
 8004014:	79fb      	ldrb	r3, [r7, #7]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe fb02 	bl	8002620 <LCD_DataWrite>
}
 800401c:	bf00      	nop
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <SFI_DMA_Source_Start_Address>:

//[BCh][BDh][BEh][BFh]=========================================================================
void SFI_DMA_Source_Start_Address(unsigned long Addr)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
/*
DMA Source START ADDRESS
This bits index serial flash address [7:0][15:8][23:16][31:24]
*/
	LCD_CmdWrite(0xBC);
 800402c:	20bc      	movs	r0, #188	; 0xbc
 800402e:	f7fe facf 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(Addr);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	b2db      	uxtb	r3, r3
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe faf2 	bl	8002620 <LCD_DataWrite>
	LCD_CmdWrite(0xBD);
 800403c:	20bd      	movs	r0, #189	; 0xbd
 800403e:	f7fe fac7 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(Addr>>8);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	0a1b      	lsrs	r3, r3, #8
 8004046:	b2db      	uxtb	r3, r3
 8004048:	4618      	mov	r0, r3
 800404a:	f7fe fae9 	bl	8002620 <LCD_DataWrite>
	LCD_CmdWrite(0xBE);
 800404e:	20be      	movs	r0, #190	; 0xbe
 8004050:	f7fe fabe 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(Addr>>16);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	0c1b      	lsrs	r3, r3, #16
 8004058:	b2db      	uxtb	r3, r3
 800405a:	4618      	mov	r0, r3
 800405c:	f7fe fae0 	bl	8002620 <LCD_DataWrite>
	LCD_CmdWrite(0xBF);
 8004060:	20bf      	movs	r0, #191	; 0xbf
 8004062:	f7fe fab5 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(Addr>>24);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	0e1b      	lsrs	r3, r3, #24
 800406a:	b2db      	uxtb	r3, r3
 800406c:	4618      	mov	r0, r3
 800406e:	f7fe fad7 	bl	8002620 <LCD_DataWrite>
}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <SFI_DMA_Destination_Upper_Left_Corner>:
	LCD_CmdWrite(0xC3);
	LCD_DataWrite(Addr>>24);
}
//[C0h][C1h][C2h][C3h]=========================================================================
void SFI_DMA_Destination_Upper_Left_Corner(unsigned short WX,unsigned short HY)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b082      	sub	sp, #8
 800407e:	af00      	add	r7, sp, #0
 8004080:	4603      	mov	r3, r0
 8004082:	460a      	mov	r2, r1
 8004084:	80fb      	strh	r3, [r7, #6]
 8004086:	4613      	mov	r3, r2
 8004088:	80bb      	strh	r3, [r7, #4]
Y-coordination [12:8] on Canvas area.
When REG DMACR bit 1 = 1 (Block Mode)
This register defines Destination address [31:24] in SDRAM.
*/

 LCD_CmdWrite(0xC0);
 800408a:	20c0      	movs	r0, #192	; 0xc0
 800408c:	f7fe faa0 	bl	80025d0 <LCD_CmdWrite>
 LCD_DataWrite(WX);
 8004090:	88fb      	ldrh	r3, [r7, #6]
 8004092:	b2db      	uxtb	r3, r3
 8004094:	4618      	mov	r0, r3
 8004096:	f7fe fac3 	bl	8002620 <LCD_DataWrite>
 LCD_CmdWrite(0xC1);
 800409a:	20c1      	movs	r0, #193	; 0xc1
 800409c:	f7fe fa98 	bl	80025d0 <LCD_CmdWrite>
 LCD_DataWrite(WX>>8);
 80040a0:	88fb      	ldrh	r3, [r7, #6]
 80040a2:	0a1b      	lsrs	r3, r3, #8
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fe fab9 	bl	8002620 <LCD_DataWrite>

 LCD_CmdWrite(0xC2);
 80040ae:	20c2      	movs	r0, #194	; 0xc2
 80040b0:	f7fe fa8e 	bl	80025d0 <LCD_CmdWrite>
 LCD_DataWrite(HY);
 80040b4:	88bb      	ldrh	r3, [r7, #4]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fe fab1 	bl	8002620 <LCD_DataWrite>
 LCD_CmdWrite(0xC3);
 80040be:	20c3      	movs	r0, #195	; 0xc3
 80040c0:	f7fe fa86 	bl	80025d0 <LCD_CmdWrite>
 LCD_DataWrite(HY>>8);
 80040c4:	88bb      	ldrh	r3, [r7, #4]
 80040c6:	0a1b      	lsrs	r3, r3, #8
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fe faa7 	bl	8002620 <LCD_DataWrite>
}
 80040d2:	bf00      	nop
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <SFI_DMA_Transfer_Width_Height>:
	LCD_DataWrite(Addr>>16);
	LCD_CmdWrite(0xC9);
	LCD_DataWrite(Addr>>24);
}
void SFI_DMA_Transfer_Width_Height(unsigned short WX,unsigned short HY)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b082      	sub	sp, #8
 80040de:	af00      	add	r7, sp, #0
 80040e0:	4603      	mov	r3, r0
 80040e2:	460a      	mov	r2, r1
 80040e4:	80fb      	strh	r3, [r7, #6]
 80040e6:	4613      	mov	r3, r2
 80040e8:	80bb      	strh	r3, [r7, #4]

When REG DMACR bit 1 = 1 (Block Mode)
DMA Block Width [7:0][15:8]
DMA Block HIGH[7:0][15:8]
*/
	LCD_CmdWrite(0xC6);
 80040ea:	20c6      	movs	r0, #198	; 0xc6
 80040ec:	f7fe fa70 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 80040f0:	88fb      	ldrh	r3, [r7, #6]
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fe fa93 	bl	8002620 <LCD_DataWrite>
	LCD_CmdWrite(0xC7);
 80040fa:	20c7      	movs	r0, #199	; 0xc7
 80040fc:	f7fe fa68 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(WX>>8);
 8004100:	88fb      	ldrh	r3, [r7, #6]
 8004102:	0a1b      	lsrs	r3, r3, #8
 8004104:	b29b      	uxth	r3, r3
 8004106:	b2db      	uxtb	r3, r3
 8004108:	4618      	mov	r0, r3
 800410a:	f7fe fa89 	bl	8002620 <LCD_DataWrite>

	LCD_CmdWrite(0xC8);
 800410e:	20c8      	movs	r0, #200	; 0xc8
 8004110:	f7fe fa5e 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(HY);
 8004114:	88bb      	ldrh	r3, [r7, #4]
 8004116:	b2db      	uxtb	r3, r3
 8004118:	4618      	mov	r0, r3
 800411a:	f7fe fa81 	bl	8002620 <LCD_DataWrite>
	LCD_CmdWrite(0xC9);
 800411e:	20c9      	movs	r0, #201	; 0xc9
 8004120:	f7fe fa56 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(HY>>8);
 8004124:	88bb      	ldrh	r3, [r7, #4]
 8004126:	0a1b      	lsrs	r3, r3, #8
 8004128:	b29b      	uxth	r3, r3
 800412a:	b2db      	uxtb	r3, r3
 800412c:	4618      	mov	r0, r3
 800412e:	f7fe fa77 	bl	8002620 <LCD_DataWrite>
}
 8004132:	bf00      	nop
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <SFI_DMA_Source_Width>:
//[CAh][CBh]=========================================================================
void SFI_DMA_Source_Width(unsigned short WX)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b082      	sub	sp, #8
 800413e:	af00      	add	r7, sp, #0
 8004140:	4603      	mov	r3, r0
 8004142:	80fb      	strh	r3, [r7, #6]
/*
DMA Source Picture Width [7:0][12:8]
Unit: pixel
*/
	LCD_CmdWrite(0xCA);
 8004144:	20ca      	movs	r0, #202	; 0xca
 8004146:	f7fe fa43 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	b2db      	uxtb	r3, r3
 800414e:	4618      	mov	r0, r3
 8004150:	f7fe fa66 	bl	8002620 <LCD_DataWrite>
	LCD_CmdWrite(0xCB);
 8004154:	20cb      	movs	r0, #203	; 0xcb
 8004156:	f7fe fa3b 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(WX>>8);
 800415a:	88fb      	ldrh	r3, [r7, #6]
 800415c:	0a1b      	lsrs	r3, r3, #8
 800415e:	b29b      	uxth	r3, r3
 8004160:	b2db      	uxtb	r3, r3
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe fa5c 	bl	8002620 <LCD_DataWrite>
}
 8004168:	bf00      	nop
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <CGROM_Select_Internal_CGROM>:
    temp |= cSetb7;
	temp &= cClrb6;
	LCD_DataWrite(temp);
}
void CGROM_Select_Internal_CGROM(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
00 : Internal CGROM
01 : Genitop serial flash
10 : User-defined Font
*/
	unsigned char temp;
	LCD_CmdWrite(0xCC);
 8004176:	20cc      	movs	r0, #204	; 0xcc
 8004178:	f7fe fa2a 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 800417c:	f7fe fa78 	bl	8002670 <LCD_DataRead>
 8004180:	4603      	mov	r3, r0
 8004182:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb7;
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800418a:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb6;
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004192:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8004194:	79fb      	ldrb	r3, [r7, #7]
 8004196:	4618      	mov	r0, r3
 8004198:	f7fe fa42 	bl	8002620 <LCD_DataWrite>
}
 800419c:	bf00      	nop
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <CGROM_Select_Genitop_FontROM>:
void CGROM_Select_Genitop_FontROM(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
00 : Internal CGROM
01 : Genitop serial flash
10 : User-defined Font
*/
	unsigned char temp;
	LCD_CmdWrite(0xCC);
 80041aa:	20cc      	movs	r0, #204	; 0xcc
 80041ac:	f7fe fa10 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80041b0:	f7fe fa5e 	bl	8002670 <LCD_DataRead>
 80041b4:	4603      	mov	r3, r0
 80041b6:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb7;
 80041b8:	79fb      	ldrb	r3, [r7, #7]
 80041ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041be:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb6;
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041c6:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80041c8:	79fb      	ldrb	r3, [r7, #7]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fe fa28 	bl	8002620 <LCD_DataWrite>
}
 80041d0:	bf00      	nop
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <Font_Select_8x16_16x16>:
void Font_Select_8x16_16x16(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
*** User-defined Font width is decided by font code. Genitop
serial flashs font width is decided by font code or GT Font ROM
control register.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCC);
 80041de:	20cc      	movs	r0, #204	; 0xcc
 80041e0:	f7fe f9f6 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80041e4:	f7fe fa44 	bl	8002670 <LCD_DataRead>
 80041e8:	4603      	mov	r3, r0
 80041ea:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb5;
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	f023 0320 	bic.w	r3, r3, #32
 80041f2:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb4;
 80041f4:	79fb      	ldrb	r3, [r7, #7]
 80041f6:	f023 0310 	bic.w	r3, r3, #16
 80041fa:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fe fa0e 	bl	8002620 <LCD_DataWrite>
}
 8004204:	bf00      	nop
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <Font_Select_12x24_24x24>:
void Font_Select_12x24_24x24(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
*** User-defined Font width is decided by font code. Genitop
serial flashs font width is decided by font code or GT Font ROM
control register.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCC);
 8004212:	20cc      	movs	r0, #204	; 0xcc
 8004214:	f7fe f9dc 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8004218:	f7fe fa2a 	bl	8002670 <LCD_DataRead>
 800421c:	4603      	mov	r3, r0
 800421e:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb5;
 8004220:	79fb      	ldrb	r3, [r7, #7]
 8004222:	f023 0320 	bic.w	r3, r3, #32
 8004226:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb4;
 8004228:	79fb      	ldrb	r3, [r7, #7]
 800422a:	f043 0310 	orr.w	r3, r3, #16
 800422e:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8004230:	79fb      	ldrb	r3, [r7, #7]
 8004232:	4618      	mov	r0, r3
 8004234:	f7fe f9f4 	bl	8002620 <LCD_DataWrite>
}
 8004238:	bf00      	nop
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <Font_Select_16x32_32x32>:
void Font_Select_16x32_32x32(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
*** User-defined Font width is decided by font code. Genitop
serial flashs font width is decided by font code or GT Font ROM
control register.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCC);
 8004246:	20cc      	movs	r0, #204	; 0xcc
 8004248:	f7fe f9c2 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 800424c:	f7fe fa10 	bl	8002670 <LCD_DataRead>
 8004250:	4603      	mov	r3, r0
 8004252:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb5;
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	f043 0320 	orr.w	r3, r3, #32
 800425a:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb4;
 800425c:	79fb      	ldrb	r3, [r7, #7]
 800425e:	f023 0310 	bic.w	r3, r3, #16
 8004262:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8004264:	79fb      	ldrb	r3, [r7, #7]
 8004266:	4618      	mov	r0, r3
 8004268:	f7fe f9da 	bl	8002620 <LCD_DataWrite>
}
 800426c:	bf00      	nop
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <Font_Background_select_Transparency>:
	temp = LCD_DataRead();
    temp &= cClrb7;
	LCD_DataWrite(temp);
}
void Font_Background_select_Transparency(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
Font Transparency
0 : Font with background color.
1 : Font with background transparency.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 800427a:	20cd      	movs	r0, #205	; 0xcd
 800427c:	f7fe f9a8 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8004280:	f7fe f9f6 	bl	8002670 <LCD_DataRead>
 8004284:	4603      	mov	r3, r0
 8004286:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb6;
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800428e:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	4618      	mov	r0, r3
 8004294:	f7fe f9c4 	bl	8002620 <LCD_DataWrite>
}
 8004298:	bf00      	nop
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <Font_Background_select_Color>:
void Font_Background_select_Color(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
Font Transparency
0 : Font with background color.
1 : Font with background transparency.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 80042a6:	20cd      	movs	r0, #205	; 0xcd
 80042a8:	f7fe f992 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80042ac:	f7fe f9e0 	bl	8002670 <LCD_DataRead>
 80042b0:	4603      	mov	r3, r0
 80042b2:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb6;
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ba:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80042bc:	79fb      	ldrb	r3, [r7, #7]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fe f9ae 	bl	8002620 <LCD_DataWrite>
}
 80042c4:	bf00      	nop
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <Font_Width_X1>:
	temp = LCD_DataRead();
    temp |= cSetb4;
	LCD_DataWrite(temp);
}
void Font_Width_X1(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
01b : X2.
10b : X3.
11b : X4.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 80042d2:	20cd      	movs	r0, #205	; 0xcd
 80042d4:	f7fe f97c 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80042d8:	f7fe f9ca 	bl	8002670 <LCD_DataRead>
 80042dc:	4603      	mov	r3, r0
 80042de:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb3;
 80042e0:	79fb      	ldrb	r3, [r7, #7]
 80042e2:	f023 0308 	bic.w	r3, r3, #8
 80042e6:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb2;
 80042e8:	79fb      	ldrb	r3, [r7, #7]
 80042ea:	f023 0304 	bic.w	r3, r3, #4
 80042ee:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fe f994 	bl	8002620 <LCD_DataWrite>
}
 80042f8:	bf00      	nop
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <Font_Height_X1>:
    temp |= cSetb3;
    temp |= cSetb2;
	LCD_DataWrite(temp);
}
void Font_Height_X1(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
01b : X2.
10b : X3.
11b : X4.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 8004306:	20cd      	movs	r0, #205	; 0xcd
 8004308:	f7fe f962 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 800430c:	f7fe f9b0 	bl	8002670 <LCD_DataRead>
 8004310:	4603      	mov	r3, r0
 8004312:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb1;
 8004314:	79fb      	ldrb	r3, [r7, #7]
 8004316:	f023 0302 	bic.w	r3, r3, #2
 800431a:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb0;
 800431c:	79fb      	ldrb	r3, [r7, #7]
 800431e:	f023 0301 	bic.w	r3, r3, #1
 8004322:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	4618      	mov	r0, r3
 8004328:	f7fe f97a 	bl	8002620 <LCD_DataWrite>
}
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <GTFont_Select_GT23L24T3Y_GT23H24T3Y>:
    temp &= cClrb6;
    temp |= cSetb5;
	LCD_DataWrite(temp);
}
void GTFont_Select_GT23L24T3Y_GT23H24T3Y(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
101b: GT20L24F6Y
110b: GT21L24S1W
111b: GT22L16A1Y
*/
	unsigned char temp;
	LCD_CmdWrite(0xCE);
 800433a:	20ce      	movs	r0, #206	; 0xce
 800433c:	f7fe f948 	bl	80025d0 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8004340:	f7fe f996 	bl	8002670 <LCD_DataRead>
 8004344:	4603      	mov	r3, r0
 8004346:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb7;
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800434e:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb6;
 8004350:	79fb      	ldrb	r3, [r7, #7]
 8004352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004356:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb5;
 8004358:	79fb      	ldrb	r3, [r7, #7]
 800435a:	f023 0320 	bic.w	r3, r3, #32
 800435e:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8004360:	79fb      	ldrb	r3, [r7, #7]
 8004362:	4618      	mov	r0, r3
 8004364:	f7fe f95c 	bl	8002620 <LCD_DataWrite>
}
 8004368:	bf00      	nop
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <Set_GTFont_Decoder>:
	LCD_DataWrite(temp);
}

//[CFh]=========================================================================
void Set_GTFont_Decoder(unsigned char temp)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	71fb      	strb	r3, [r7, #7]
00b		Normal			Normal 					NA
01b		Arial 		Variable Width 			Presentation Forms-A
10b		Roman 			NA 					Presentation Forms-B
11b		Bold			NA 						NA
*/
	LCD_CmdWrite(0xCF);
 800437a:	20cf      	movs	r0, #207	; 0xcf
 800437c:	f7fe f928 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	4618      	mov	r0, r3
 8004384:	f7fe f94c 	bl	8002620 <LCD_DataWrite>
}
 8004388:	bf00      	nop
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <Foreground_color_65k>:
 LCD_DataWrite(temp<<6);
}

//Input data format:R5G6B5
void Foreground_color_65k(unsigned short temp)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	4603      	mov	r3, r0
 8004398:	80fb      	strh	r3, [r7, #6]
    LCD_CmdWrite(0xD2);
 800439a:	20d2      	movs	r0, #210	; 0xd2
 800439c:	f7fe f918 	bl	80025d0 <LCD_CmdWrite>
 LCD_DataWrite(temp>>8);
 80043a0:	88fb      	ldrh	r3, [r7, #6]
 80043a2:	0a1b      	lsrs	r3, r3, #8
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fe f939 	bl	8002620 <LCD_DataWrite>

    LCD_CmdWrite(0xD3);
 80043ae:	20d3      	movs	r0, #211	; 0xd3
 80043b0:	f7fe f90e 	bl	80025d0 <LCD_CmdWrite>
 LCD_DataWrite(temp>>3);
 80043b4:	88fb      	ldrh	r3, [r7, #6]
 80043b6:	08db      	lsrs	r3, r3, #3
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fe f92f 	bl	8002620 <LCD_DataWrite>

    LCD_CmdWrite(0xD4);
 80043c2:	20d4      	movs	r0, #212	; 0xd4
 80043c4:	f7fe f904 	bl	80025d0 <LCD_CmdWrite>
 LCD_DataWrite(temp<<3);
 80043c8:	88fb      	ldrh	r3, [r7, #6]
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fe f925 	bl	8002620 <LCD_DataWrite>
}
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <Background_color_65k>:
 LCD_DataWrite(temp<<6);
}

//Input data format:R5G6B6
void Background_color_65k(unsigned short temp)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b082      	sub	sp, #8
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	4603      	mov	r3, r0
 80043e6:	80fb      	strh	r3, [r7, #6]
    LCD_CmdWrite(0xD5);
 80043e8:	20d5      	movs	r0, #213	; 0xd5
 80043ea:	f7fe f8f1 	bl	80025d0 <LCD_CmdWrite>
 LCD_DataWrite(temp>>8);
 80043ee:	88fb      	ldrh	r3, [r7, #6]
 80043f0:	0a1b      	lsrs	r3, r3, #8
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fe f912 	bl	8002620 <LCD_DataWrite>

    LCD_CmdWrite(0xD6);
 80043fc:	20d6      	movs	r0, #214	; 0xd6
 80043fe:	f7fe f8e7 	bl	80025d0 <LCD_CmdWrite>
 LCD_DataWrite(temp>>3);
 8004402:	88fb      	ldrh	r3, [r7, #6]
 8004404:	08db      	lsrs	r3, r3, #3
 8004406:	b29b      	uxth	r3, r3
 8004408:	b2db      	uxtb	r3, r3
 800440a:	4618      	mov	r0, r3
 800440c:	f7fe f908 	bl	8002620 <LCD_DataWrite>

    LCD_CmdWrite(0xD7);
 8004410:	20d7      	movs	r0, #215	; 0xd7
 8004412:	f7fe f8dd 	bl	80025d0 <LCD_CmdWrite>
 LCD_DataWrite(temp<<3);
 8004416:	88fb      	ldrh	r3, [r7, #6]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	b2db      	uxtb	r3, r3
 800441e:	4618      	mov	r0, r3
 8004420:	f7fe f8fe 	bl	8002620 <LCD_DataWrite>
}
 8004424:	bf00      	nop
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <Show_String>:
}



void Show_String(char *str)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  Text_Mode();
 8004434:	f7fe fc1f 	bl	8002c76 <Text_Mode>
  LCD_CmdWrite(0x04);
 8004438:	2004      	movs	r0, #4
 800443a:	f7fe f8c9 	bl	80025d0 <LCD_CmdWrite>
  while(*str != '\0')
 800443e:	e009      	b.n	8004454 <Show_String+0x28>
  {
   LCD_DataWrite(*str);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f7fe f8eb 	bl	8002620 <LCD_DataWrite>
   Check_Mem_WR_FIFO_not_Full();
 800444a:	f7fe fb1f 	bl	8002a8c <Check_Mem_WR_FIFO_not_Full>
  ++str;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3301      	adds	r3, #1
 8004452:	607b      	str	r3, [r7, #4]
  while(*str != '\0')
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1f1      	bne.n	8004440 <Show_String+0x14>
  }
   Check_2D_Busy();
 800445c:	f7fe fb2d 	bl	8002aba <Check_2D_Busy>

   Graphic_Mode(); //back to graphic mode
 8004460:	f7fe fbf3 	bl	8002c4a <Graphic_Mode>
}
 8004464:	bf00      	nop
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <Show_picture>:


void Show_picture(unsigned long numbers,const unsigned short *datap)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  unsigned long i;

  LCD_CmdWrite(0x04);
 8004476:	2004      	movs	r0, #4
 8004478:	f7fe f8aa 	bl	80025d0 <LCD_CmdWrite>
  for(i=0;i<numbers;i++)
 800447c:	2300      	movs	r3, #0
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	e018      	b.n	80044b4 <Show_picture+0x48>
   {
   LCD_DataWrite(datap[i]);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	4413      	add	r3, r2
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	b2db      	uxtb	r3, r3
 800448e:	4618      	mov	r0, r3
 8004490:	f7fe f8c6 	bl	8002620 <LCD_DataWrite>
   LCD_DataWrite(datap[i]>>8);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	4413      	add	r3, r2
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	0a1b      	lsrs	r3, r3, #8
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fe f8bb 	bl	8002620 <LCD_DataWrite>
   Check_Mem_WR_FIFO_not_Full();
 80044aa:	f7fe faef 	bl	8002a8c <Check_Mem_WR_FIFO_not_Full>
  for(i=0;i<numbers;i++)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3301      	adds	r3, #1
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d3e2      	bcc.n	8004482 <Show_picture+0x16>
   }

}
 80044bc:	bf00      	nop
 80044be:	bf00      	nop
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <Show_picture1>:

void Show_picture1(unsigned long numbers,const unsigned short *datap)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
  unsigned long i;

  LCD_CmdWrite(0x04);
 80044d0:	2004      	movs	r0, #4
 80044d2:	f7fe f87d 	bl	80025d0 <LCD_CmdWrite>
  for(i=0;i<numbers;i++)
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	e018      	b.n	800450e <Show_picture1+0x48>
   {
   LCD_DataWrite(datap[i]>>8);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	4413      	add	r3, r2
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	0a1b      	lsrs	r3, r3, #8
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fe f897 	bl	8002620 <LCD_DataWrite>
   LCD_DataWrite(datap[i]);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	4413      	add	r3, r2
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fe f88e 	bl	8002620 <LCD_DataWrite>
   Check_Mem_WR_FIFO_not_Full();
 8004504:	f7fe fac2 	bl	8002a8c <Check_Mem_WR_FIFO_not_Full>
  for(i=0;i<numbers;i++)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	3301      	adds	r3, #1
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	429a      	cmp	r2, r3
 8004514:	d3e2      	bcc.n	80044dc <Show_picture1+0x16>
   }

}
 8004516:	bf00      	nop
 8004518:	bf00      	nop
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <Text_cursor_initial>:
    Enable_Graphic_Cursor();
}


void Text_cursor_initial(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0

   //Disable_Text_Cursor();
    Enable_Text_Cursor_Blinking();
 8004524:	f7fe ffe1 	bl	80034ea <Enable_Text_Cursor_Blinking>
    //Disable_Text_Cursor_Blinking();
    Blinking_Time_Frames(10);
 8004528:	200a      	movs	r0, #10
 800452a:	f7fe fff4 	bl	8003516 <Blinking_Time_Frames>
    //**[3E][3Fh]**//
    Text_Cursor_H_V(1,15);
 800452e:	210f      	movs	r1, #15
 8004530:	2001      	movs	r0, #1
 8004532:	f7ff f800 	bl	8003536 <Text_Cursor_H_V>
	Enable_Text_Cursor();
 8004536:	f7fe ffc2 	bl	80034be <Enable_Text_Cursor>

}
 800453a:	bf00      	nop
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <TOUCH_Start>:
0xE3,0x01
};

//IIC start
void TOUCH_Start(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CTP_SDA_GPIO_Port, CTP_SDA_Pin, GPIO_PIN_SET);
 8004544:	2201      	movs	r2, #1
 8004546:	2110      	movs	r1, #16
 8004548:	480c      	ldr	r0, [pc, #48]	; (800457c <TOUCH_Start+0x3c>)
 800454a:	f001 feba 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CTP_SCL_GPIO_Port, CTP_SCL_Pin, GPIO_PIN_SET);
 800454e:	2201      	movs	r2, #1
 8004550:	2120      	movs	r1, #32
 8004552:	480a      	ldr	r0, [pc, #40]	; (800457c <TOUCH_Start+0x3c>)
 8004554:	f001 feb5 	bl	80062c2 <HAL_GPIO_WritePin>
	delay_us(3);
 8004558:	2003      	movs	r0, #3
 800455a:	f7fd ff91 	bl	8002480 <delay_us>
	HAL_GPIO_WritePin(CTP_SDA_GPIO_Port, CTP_SDA_Pin, GPIO_PIN_RESET);
 800455e:	2200      	movs	r2, #0
 8004560:	2110      	movs	r1, #16
 8004562:	4806      	ldr	r0, [pc, #24]	; (800457c <TOUCH_Start+0x3c>)
 8004564:	f001 fead 	bl	80062c2 <HAL_GPIO_WritePin>
	delay_us(3);
 8004568:	2003      	movs	r0, #3
 800456a:	f7fd ff89 	bl	8002480 <delay_us>
	HAL_GPIO_WritePin(CTP_SCL_GPIO_Port, CTP_SCL_Pin, GPIO_PIN_RESET);
 800456e:	2200      	movs	r2, #0
 8004570:	2120      	movs	r1, #32
 8004572:	4802      	ldr	r0, [pc, #8]	; (800457c <TOUCH_Start+0x3c>)
 8004574:	f001 fea5 	bl	80062c2 <HAL_GPIO_WritePin>
//	delay_us(1);
}
 8004578:	bf00      	nop
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40010c00 	.word	0x40010c00

08004580 <TOUCH_Stop>:

//IIC stop
void TOUCH_Stop(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CTP_SDA_GPIO_Port, CTP_SDA_Pin, GPIO_PIN_RESET);
 8004584:	2200      	movs	r2, #0
 8004586:	2110      	movs	r1, #16
 8004588:	480c      	ldr	r0, [pc, #48]	; (80045bc <TOUCH_Stop+0x3c>)
 800458a:	f001 fe9a 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CTP_SCL_GPIO_Port, CTP_SCL_Pin, GPIO_PIN_SET);
 800458e:	2201      	movs	r2, #1
 8004590:	2120      	movs	r1, #32
 8004592:	480a      	ldr	r0, [pc, #40]	; (80045bc <TOUCH_Stop+0x3c>)
 8004594:	f001 fe95 	bl	80062c2 <HAL_GPIO_WritePin>
	delay_us(3);
 8004598:	2003      	movs	r0, #3
 800459a:	f7fd ff71 	bl	8002480 <delay_us>
	HAL_GPIO_WritePin(CTP_SDA_GPIO_Port, CTP_SDA_Pin, GPIO_PIN_SET);
 800459e:	2201      	movs	r2, #1
 80045a0:	2110      	movs	r1, #16
 80045a2:	4806      	ldr	r0, [pc, #24]	; (80045bc <TOUCH_Stop+0x3c>)
 80045a4:	f001 fe8d 	bl	80062c2 <HAL_GPIO_WritePin>
	delay_us(3);
 80045a8:	2003      	movs	r0, #3
 80045aa:	f7fd ff69 	bl	8002480 <delay_us>
	HAL_GPIO_WritePin(CTP_SCL_GPIO_Port, CTP_SCL_Pin, GPIO_PIN_RESET);
 80045ae:	2200      	movs	r2, #0
 80045b0:	2120      	movs	r1, #32
 80045b2:	4802      	ldr	r0, [pc, #8]	; (80045bc <TOUCH_Stop+0x3c>)
 80045b4:	f001 fe85 	bl	80062c2 <HAL_GPIO_WritePin>
//	delay_us(1);
}
 80045b8:	bf00      	nop
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40010c00 	.word	0x40010c00

080045c0 <TOUCH_Wait_Ack>:


//Wait for an answer signal
uchar TOUCH_Wait_Ack(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
	uchar errtime=0;
 80045c6:	2300      	movs	r3, #0
 80045c8:	75fb      	strb	r3, [r7, #23]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ca:	1d3b      	adds	r3, r7, #4
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	605a      	str	r2, [r3, #4]
 80045d2:	609a      	str	r2, [r3, #8]
 80045d4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(CTP_SDA_GPIO_Port, CTP_SDA_Pin, GPIO_PIN_SET);
 80045d6:	2201      	movs	r2, #1
 80045d8:	2110      	movs	r1, #16
 80045da:	481b      	ldr	r0, [pc, #108]	; (8004648 <TOUCH_Wait_Ack+0x88>)
 80045dc:	f001 fe71 	bl	80062c2 <HAL_GPIO_WritePin>
//	delay_us(1);
	HAL_GPIO_WritePin(CTP_SCL_GPIO_Port, CTP_SCL_Pin, GPIO_PIN_SET);
 80045e0:	2201      	movs	r2, #1
 80045e2:	2120      	movs	r1, #32
 80045e4:	4818      	ldr	r0, [pc, #96]	; (8004648 <TOUCH_Wait_Ack+0x88>)
 80045e6:	f001 fe6c 	bl	80062c2 <HAL_GPIO_WritePin>
//	delay_us(1);
	/*Configure GPIO pin : SSD2828_SDI_Pin */
	GPIO_InitStruct.Pin = CTP_SDA_Pin;
 80045ea:	2310      	movs	r3, #16
 80045ec:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(CTP_SDA_GPIO_Port, &GPIO_InitStruct);
 80045f6:	1d3b      	adds	r3, r7, #4
 80045f8:	4619      	mov	r1, r3
 80045fa:	4813      	ldr	r0, [pc, #76]	; (8004648 <TOUCH_Wait_Ack+0x88>)
 80045fc:	f001 fcc6 	bl	8005f8c <HAL_GPIO_Init>
  	while(HAL_GPIO_ReadPin(CTP_SDA_GPIO_Port, CTP_SDA_Pin) == GPIO_PIN_SET)
 8004600:	e009      	b.n	8004616 <TOUCH_Wait_Ack+0x56>
	{
	    errtime++;
 8004602:	7dfb      	ldrb	r3, [r7, #23]
 8004604:	3301      	adds	r3, #1
 8004606:	75fb      	strb	r3, [r7, #23]
	    if(errtime>250)
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	2bfa      	cmp	r3, #250	; 0xfa
 800460c:	d903      	bls.n	8004616 <TOUCH_Wait_Ack+0x56>
		{
		  TOUCH_Stop();
 800460e:	f7ff ffb7 	bl	8004580 <TOUCH_Stop>
		  return 1;
 8004612:	2301      	movs	r3, #1
 8004614:	e013      	b.n	800463e <TOUCH_Wait_Ack+0x7e>
  	while(HAL_GPIO_ReadPin(CTP_SDA_GPIO_Port, CTP_SDA_Pin) == GPIO_PIN_SET)
 8004616:	2110      	movs	r1, #16
 8004618:	480b      	ldr	r0, [pc, #44]	; (8004648 <TOUCH_Wait_Ack+0x88>)
 800461a:	f001 fe3b 	bl	8006294 <HAL_GPIO_ReadPin>
 800461e:	4603      	mov	r3, r0
 8004620:	2b01      	cmp	r3, #1
 8004622:	d0ee      	beq.n	8004602 <TOUCH_Wait_Ack+0x42>
		}
	}
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004624:	2301      	movs	r3, #1
 8004626:	60bb      	str	r3, [r7, #8]
  	HAL_GPIO_Init(CTP_SDA_GPIO_Port, &GPIO_InitStruct);
 8004628:	1d3b      	adds	r3, r7, #4
 800462a:	4619      	mov	r1, r3
 800462c:	4806      	ldr	r0, [pc, #24]	; (8004648 <TOUCH_Wait_Ack+0x88>)
 800462e:	f001 fcad 	bl	8005f8c <HAL_GPIO_Init>
  	HAL_GPIO_WritePin(CTP_SCL_GPIO_Port, CTP_SCL_Pin, GPIO_PIN_RESET);
 8004632:	2200      	movs	r2, #0
 8004634:	2120      	movs	r1, #32
 8004636:	4804      	ldr	r0, [pc, #16]	; (8004648 <TOUCH_Wait_Ack+0x88>)
 8004638:	f001 fe43 	bl	80062c2 <HAL_GPIO_WritePin>
//	delay_us(1);
	return 0;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40010c00 	.word	0x40010c00

0800464c <TOUCH_Ack>:



//Acknowledge
void TOUCH_Ack(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CTP_SCL_GPIO_Port, CTP_SCL_Pin, GPIO_PIN_RESET);
 8004650:	2200      	movs	r2, #0
 8004652:	2120      	movs	r1, #32
 8004654:	480c      	ldr	r0, [pc, #48]	; (8004688 <TOUCH_Ack+0x3c>)
 8004656:	f001 fe34 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CTP_SDA_GPIO_Port, CTP_SDA_Pin, GPIO_PIN_RESET);
 800465a:	2200      	movs	r2, #0
 800465c:	2110      	movs	r1, #16
 800465e:	480a      	ldr	r0, [pc, #40]	; (8004688 <TOUCH_Ack+0x3c>)
 8004660:	f001 fe2f 	bl	80062c2 <HAL_GPIO_WritePin>
	delay_us(2);
 8004664:	2002      	movs	r0, #2
 8004666:	f7fd ff0b 	bl	8002480 <delay_us>
	HAL_GPIO_WritePin(CTP_SCL_GPIO_Port, CTP_SCL_Pin, GPIO_PIN_SET);
 800466a:	2201      	movs	r2, #1
 800466c:	2120      	movs	r1, #32
 800466e:	4806      	ldr	r0, [pc, #24]	; (8004688 <TOUCH_Ack+0x3c>)
 8004670:	f001 fe27 	bl	80062c2 <HAL_GPIO_WritePin>
	delay_us(2);
 8004674:	2002      	movs	r0, #2
 8004676:	f7fd ff03 	bl	8002480 <delay_us>
	HAL_GPIO_WritePin(CTP_SCL_GPIO_Port, CTP_SCL_Pin, GPIO_PIN_RESET);
 800467a:	2200      	movs	r2, #0
 800467c:	2120      	movs	r1, #32
 800467e:	4802      	ldr	r0, [pc, #8]	; (8004688 <TOUCH_Ack+0x3c>)
 8004680:	f001 fe1f 	bl	80062c2 <HAL_GPIO_WritePin>
}
 8004684:	bf00      	nop
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40010c00 	.word	0x40010c00

0800468c <TOUCH_NAck>:

//NO Acknowledge
void TOUCH_NAck(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CTP_SCL_GPIO_Port, CTP_SCL_Pin, GPIO_PIN_RESET);
 8004690:	2200      	movs	r2, #0
 8004692:	2120      	movs	r1, #32
 8004694:	480e      	ldr	r0, [pc, #56]	; (80046d0 <TOUCH_NAck+0x44>)
 8004696:	f001 fe14 	bl	80062c2 <HAL_GPIO_WritePin>
	delay_us(1);
 800469a:	2001      	movs	r0, #1
 800469c:	f7fd fef0 	bl	8002480 <delay_us>
	HAL_GPIO_WritePin(CTP_SDA_GPIO_Port, CTP_SDA_Pin, GPIO_PIN_SET);
 80046a0:	2201      	movs	r2, #1
 80046a2:	2110      	movs	r1, #16
 80046a4:	480a      	ldr	r0, [pc, #40]	; (80046d0 <TOUCH_NAck+0x44>)
 80046a6:	f001 fe0c 	bl	80062c2 <HAL_GPIO_WritePin>
	delay_us(2);
 80046aa:	2002      	movs	r0, #2
 80046ac:	f7fd fee8 	bl	8002480 <delay_us>
	HAL_GPIO_WritePin(CTP_SCL_GPIO_Port, CTP_SCL_Pin, GPIO_PIN_SET);
 80046b0:	2201      	movs	r2, #1
 80046b2:	2120      	movs	r1, #32
 80046b4:	4806      	ldr	r0, [pc, #24]	; (80046d0 <TOUCH_NAck+0x44>)
 80046b6:	f001 fe04 	bl	80062c2 <HAL_GPIO_WritePin>
	delay_us(2);
 80046ba:	2002      	movs	r0, #2
 80046bc:	f7fd fee0 	bl	8002480 <delay_us>
	HAL_GPIO_WritePin(CTP_SCL_GPIO_Port, CTP_SCL_Pin, GPIO_PIN_RESET);
 80046c0:	2200      	movs	r2, #0
 80046c2:	2120      	movs	r1, #32
 80046c4:	4802      	ldr	r0, [pc, #8]	; (80046d0 <TOUCH_NAck+0x44>)
 80046c6:	f001 fdfc 	bl	80062c2 <HAL_GPIO_WritePin>
}
 80046ca:	bf00      	nop
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40010c00 	.word	0x40010c00

080046d4 <TOUCH_Send_Byte>:


//IIC send one byte
void TOUCH_Send_Byte(uchar Byte)
{	uchar t;
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	4603      	mov	r3, r0
 80046dc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CTP_SCL_GPIO_Port, CTP_SCL_Pin, GPIO_PIN_RESET);
 80046de:	2200      	movs	r2, #0
 80046e0:	2120      	movs	r1, #32
 80046e2:	4816      	ldr	r0, [pc, #88]	; (800473c <TOUCH_Send_Byte+0x68>)
 80046e4:	f001 fded 	bl	80062c2 <HAL_GPIO_WritePin>
//	delayus(5);
    for(t=0;t<8;t++)
 80046e8:	2300      	movs	r3, #0
 80046ea:	73fb      	strb	r3, [r7, #15]
 80046ec:	e01d      	b.n	800472a <TOUCH_Send_Byte+0x56>
    {
    	HAL_GPIO_WritePin(CTP_SDA_GPIO_Port, CTP_SDA_Pin, (Byte & 0x80)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80046ee:	79fb      	ldrb	r3, [r7, #7]
 80046f0:	09db      	lsrs	r3, r3, #7
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	2110      	movs	r1, #16
 80046f8:	4810      	ldr	r0, [pc, #64]	; (800473c <TOUCH_Send_Byte+0x68>)
 80046fa:	f001 fde2 	bl	80062c2 <HAL_GPIO_WritePin>
	   	Byte <<=1;
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	71fb      	strb	r3, [r7, #7]
		delay_us(2);
 8004704:	2002      	movs	r0, #2
 8004706:	f7fd febb 	bl	8002480 <delay_us>
		HAL_GPIO_WritePin(CTP_SCL_GPIO_Port, CTP_SCL_Pin, GPIO_PIN_SET);
 800470a:	2201      	movs	r2, #1
 800470c:	2120      	movs	r1, #32
 800470e:	480b      	ldr	r0, [pc, #44]	; (800473c <TOUCH_Send_Byte+0x68>)
 8004710:	f001 fdd7 	bl	80062c2 <HAL_GPIO_WritePin>
		delay_us(2);
 8004714:	2002      	movs	r0, #2
 8004716:	f7fd feb3 	bl	8002480 <delay_us>
		HAL_GPIO_WritePin(CTP_SCL_GPIO_Port, CTP_SCL_Pin, GPIO_PIN_RESET);
 800471a:	2200      	movs	r2, #0
 800471c:	2120      	movs	r1, #32
 800471e:	4807      	ldr	r0, [pc, #28]	; (800473c <TOUCH_Send_Byte+0x68>)
 8004720:	f001 fdcf 	bl	80062c2 <HAL_GPIO_WritePin>
    for(t=0;t<8;t++)
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	3301      	adds	r3, #1
 8004728:	73fb      	strb	r3, [r7, #15]
 800472a:	7bfb      	ldrb	r3, [r7, #15]
 800472c:	2b07      	cmp	r3, #7
 800472e:	d9de      	bls.n	80046ee <TOUCH_Send_Byte+0x1a>
	//	delayus(5);
    }
}
 8004730:	bf00      	nop
 8004732:	bf00      	nop
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40010c00 	.word	0x40010c00

08004740 <TOUCH_Read_Byte>:


uchar TOUCH_Read_Byte(uchar ack)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b088      	sub	sp, #32
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	71fb      	strb	r3, [r7, #7]
	uchar t,receive=0;
 800474a:	2300      	movs	r3, #0
 800474c:	77bb      	strb	r3, [r7, #30]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800474e:	f107 030c 	add.w	r3, r7, #12
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	605a      	str	r2, [r3, #4]
 8004758:	609a      	str	r2, [r3, #8]
 800475a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(CTP_SCL_GPIO_Port, CTP_SCL_Pin, GPIO_PIN_RESET);
 800475c:	2200      	movs	r2, #0
 800475e:	2120      	movs	r1, #32
 8004760:	4823      	ldr	r0, [pc, #140]	; (80047f0 <TOUCH_Read_Byte+0xb0>)
 8004762:	f001 fdae 	bl	80062c2 <HAL_GPIO_WritePin>
//	delayus(5);
	HAL_GPIO_WritePin(CTP_SDA_GPIO_Port, CTP_SDA_Pin, GPIO_PIN_SET);
 8004766:	2201      	movs	r2, #1
 8004768:	2110      	movs	r1, #16
 800476a:	4821      	ldr	r0, [pc, #132]	; (80047f0 <TOUCH_Read_Byte+0xb0>)
 800476c:	f001 fda9 	bl	80062c2 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = CTP_SDA_Pin;
 8004770:	2310      	movs	r3, #16
 8004772:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004774:	2300      	movs	r3, #0
 8004776:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(CTP_SDA_GPIO_Port, &GPIO_InitStruct);
 800477c:	f107 030c 	add.w	r3, r7, #12
 8004780:	4619      	mov	r1, r3
 8004782:	481b      	ldr	r0, [pc, #108]	; (80047f0 <TOUCH_Read_Byte+0xb0>)
 8004784:	f001 fc02 	bl	8005f8c <HAL_GPIO_Init>
//	delayus(5);
	for(t = 0; t < 8; t++)
 8004788:	2300      	movs	r3, #0
 800478a:	77fb      	strb	r3, [r7, #31]
 800478c:	e020      	b.n	80047d0 <TOUCH_Read_Byte+0x90>
	{
		HAL_GPIO_WritePin(CTP_SCL_GPIO_Port, CTP_SCL_Pin, GPIO_PIN_RESET);
 800478e:	2200      	movs	r2, #0
 8004790:	2120      	movs	r1, #32
 8004792:	4817      	ldr	r0, [pc, #92]	; (80047f0 <TOUCH_Read_Byte+0xb0>)
 8004794:	f001 fd95 	bl	80062c2 <HAL_GPIO_WritePin>
		delay_us(4);
 8004798:	2004      	movs	r0, #4
 800479a:	f7fd fe71 	bl	8002480 <delay_us>
		HAL_GPIO_WritePin(CTP_SCL_GPIO_Port, CTP_SCL_Pin, GPIO_PIN_SET);
 800479e:	2201      	movs	r2, #1
 80047a0:	2120      	movs	r1, #32
 80047a2:	4813      	ldr	r0, [pc, #76]	; (80047f0 <TOUCH_Read_Byte+0xb0>)
 80047a4:	f001 fd8d 	bl	80062c2 <HAL_GPIO_WritePin>
		delay_us(4);
 80047a8:	2004      	movs	r0, #4
 80047aa:	f7fd fe69 	bl	8002480 <delay_us>
	 	receive<<=1;
 80047ae:	7fbb      	ldrb	r3, [r7, #30]
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	77bb      	strb	r3, [r7, #30]
	 	if(HAL_GPIO_ReadPin(CTP_SDA_GPIO_Port, CTP_SDA_Pin) == GPIO_PIN_SET)receive=receive|0x01;
 80047b4:	2110      	movs	r1, #16
 80047b6:	480e      	ldr	r0, [pc, #56]	; (80047f0 <TOUCH_Read_Byte+0xb0>)
 80047b8:	f001 fd6c 	bl	8006294 <HAL_GPIO_ReadPin>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d103      	bne.n	80047ca <TOUCH_Read_Byte+0x8a>
 80047c2:	7fbb      	ldrb	r3, [r7, #30]
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	77bb      	strb	r3, [r7, #30]
	for(t = 0; t < 8; t++)
 80047ca:	7ffb      	ldrb	r3, [r7, #31]
 80047cc:	3301      	adds	r3, #1
 80047ce:	77fb      	strb	r3, [r7, #31]
 80047d0:	7ffb      	ldrb	r3, [r7, #31]
 80047d2:	2b07      	cmp	r3, #7
 80047d4:	d9db      	bls.n	800478e <TOUCH_Read_Byte+0x4e>
	//	delayus(5);
	}


   	if (ack)  TOUCH_NAck();//NO Acknowledge
 80047d6:	79fb      	ldrb	r3, [r7, #7]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <TOUCH_Read_Byte+0xa2>
 80047dc:	f7ff ff56 	bl	800468c <TOUCH_NAck>
 80047e0:	e001      	b.n	80047e6 <TOUCH_Read_Byte+0xa6>
   	else       TOUCH_Ack(); //Send Acknowledge
 80047e2:	f7ff ff33 	bl	800464c <TOUCH_Ack>

	 return receive;
 80047e6:	7fbb      	ldrb	r3, [r7, #30]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3720      	adds	r7, #32
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40010c00 	.word	0x40010c00

080047f4 <GT911_WR_Reg>:

uchar GT911_WR_Reg(uint reg,uchar *buf,uchar len)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	4613      	mov	r3, r2
 8004800:	71fb      	strb	r3, [r7, #7]
	uchar i;
	uchar ret=0;
 8004802:	2300      	movs	r3, #0
 8004804:	75bb      	strb	r3, [r7, #22]
	TOUCH_Start();
 8004806:	f7ff fe9b 	bl	8004540 <TOUCH_Start>
 	TOUCH_Send_Byte(WRITE_ADD);
 800480a:	20ba      	movs	r0, #186	; 0xba
 800480c:	f7ff ff62 	bl	80046d4 <TOUCH_Send_Byte>
	TOUCH_Wait_Ack();
 8004810:	f7ff fed6 	bl	80045c0 <TOUCH_Wait_Ack>
	TOUCH_Send_Byte(reg>>8);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	0a1b      	lsrs	r3, r3, #8
 8004818:	b2db      	uxtb	r3, r3
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff ff5a 	bl	80046d4 <TOUCH_Send_Byte>
	TOUCH_Wait_Ack();
 8004820:	f7ff fece 	bl	80045c0 <TOUCH_Wait_Ack>
	TOUCH_Send_Byte(reg&0XFF);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	b2db      	uxtb	r3, r3
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff ff53 	bl	80046d4 <TOUCH_Send_Byte>
	TOUCH_Wait_Ack();
 800482e:	f7ff fec7 	bl	80045c0 <TOUCH_Wait_Ack>
	for(i=0;i<len;i++)
 8004832:	2300      	movs	r3, #0
 8004834:	75fb      	strb	r3, [r7, #23]
 8004836:	e010      	b.n	800485a <GT911_WR_Reg+0x66>
	{
    	TOUCH_Send_Byte(buf[i]);
 8004838:	7dfb      	ldrb	r3, [r7, #23]
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	4413      	add	r3, r2
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff ff47 	bl	80046d4 <TOUCH_Send_Byte>
		ret=TOUCH_Wait_Ack();
 8004846:	f7ff febb 	bl	80045c0 <TOUCH_Wait_Ack>
 800484a:	4603      	mov	r3, r0
 800484c:	75bb      	strb	r3, [r7, #22]
		if(ret)break;
 800484e:	7dbb      	ldrb	r3, [r7, #22]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d107      	bne.n	8004864 <GT911_WR_Reg+0x70>
	for(i=0;i<len;i++)
 8004854:	7dfb      	ldrb	r3, [r7, #23]
 8004856:	3301      	adds	r3, #1
 8004858:	75fb      	strb	r3, [r7, #23]
 800485a:	7dfa      	ldrb	r2, [r7, #23]
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	429a      	cmp	r2, r3
 8004860:	d3ea      	bcc.n	8004838 <GT911_WR_Reg+0x44>
 8004862:	e000      	b.n	8004866 <GT911_WR_Reg+0x72>
		if(ret)break;
 8004864:	bf00      	nop
	}
    TOUCH_Stop();
 8004866:	f7ff fe8b 	bl	8004580 <TOUCH_Stop>
	return ret;
 800486a:	7dbb      	ldrb	r3, [r7, #22]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <GT911_RD_Reg>:


void GT911_RD_Reg(uint reg,uchar *buf,uchar len)
{
 8004874:	b590      	push	{r4, r7, lr}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	4613      	mov	r3, r2
 8004880:	71fb      	strb	r3, [r7, #7]
	uchar i;
 	TOUCH_Start();
 8004882:	f7ff fe5d 	bl	8004540 <TOUCH_Start>
 	TOUCH_Send_Byte(WRITE_ADD);
 8004886:	20ba      	movs	r0, #186	; 0xba
 8004888:	f7ff ff24 	bl	80046d4 <TOUCH_Send_Byte>
	TOUCH_Wait_Ack();
 800488c:	f7ff fe98 	bl	80045c0 <TOUCH_Wait_Ack>
 	TOUCH_Send_Byte(reg>>8);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	0a1b      	lsrs	r3, r3, #8
 8004894:	b2db      	uxtb	r3, r3
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff ff1c 	bl	80046d4 <TOUCH_Send_Byte>
	TOUCH_Wait_Ack();
 800489c:	f7ff fe90 	bl	80045c0 <TOUCH_Wait_Ack>
 	TOUCH_Send_Byte(reg&0XFF);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7ff ff15 	bl	80046d4 <TOUCH_Send_Byte>
 	TOUCH_Wait_Ack();
 80048aa:	f7ff fe89 	bl	80045c0 <TOUCH_Wait_Ack>

 	TOUCH_Start();
 80048ae:	f7ff fe47 	bl	8004540 <TOUCH_Start>
	TOUCH_Send_Byte(READ_ADD);
 80048b2:	20bb      	movs	r0, #187	; 0xbb
 80048b4:	f7ff ff0e 	bl	80046d4 <TOUCH_Send_Byte>
	TOUCH_Wait_Ack();
 80048b8:	f7ff fe82 	bl	80045c0 <TOUCH_Wait_Ack>
	for(i=0;i<len;i++)
 80048bc:	2300      	movs	r3, #0
 80048be:	75fb      	strb	r3, [r7, #23]
 80048c0:	e013      	b.n	80048ea <GT911_RD_Reg+0x76>
	{
    	buf[i]=TOUCH_Read_Byte(i==(len-1)?1:0); //
 80048c2:	7dfa      	ldrb	r2, [r7, #23]
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	429a      	cmp	r2, r3
 80048ca:	bf0c      	ite	eq
 80048cc:	2301      	moveq	r3, #1
 80048ce:	2300      	movne	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	4619      	mov	r1, r3
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	18d4      	adds	r4, r2, r3
 80048da:	4608      	mov	r0, r1
 80048dc:	f7ff ff30 	bl	8004740 <TOUCH_Read_Byte>
 80048e0:	4603      	mov	r3, r0
 80048e2:	7023      	strb	r3, [r4, #0]
	for(i=0;i<len;i++)
 80048e4:	7dfb      	ldrb	r3, [r7, #23]
 80048e6:	3301      	adds	r3, #1
 80048e8:	75fb      	strb	r3, [r7, #23]
 80048ea:	7dfa      	ldrb	r2, [r7, #23]
 80048ec:	79fb      	ldrb	r3, [r7, #7]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d3e7      	bcc.n	80048c2 <GT911_RD_Reg+0x4e>

	//	if(i==(len-1))  buf[i]=TOUCH_Read_Byte(1);
	//	else            buf[i]=TOUCH_Read_Byte(0);

	}
     TOUCH_Stop();//
 80048f2:	f7ff fe45 	bl	8004580 <TOUCH_Stop>
}
 80048f6:	bf00      	nop
 80048f8:	371c      	adds	r7, #28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd90      	pop	{r4, r7, pc}

080048fe <GT911_Send_Cfg>:

uchar GT911_Send_Cfg(uchar * buf,uint cfg_len)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b084      	sub	sp, #16
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
 8004906:	6039      	str	r1, [r7, #0]
	uchar ret=0;
 8004908:	2300      	movs	r3, #0
 800490a:	73fb      	strb	r3, [r7, #15]
	uchar retry=0;
 800490c:	2300      	movs	r3, #0
 800490e:	73bb      	strb	r3, [r7, #14]
	for(retry=0;retry<5;retry++)
 8004910:	2300      	movs	r3, #0
 8004912:	73bb      	strb	r3, [r7, #14]
 8004914:	e012      	b.n	800493c <GT911_Send_Cfg+0x3e>
	{
		ret=GT911_WR_Reg(GTP_REG_CONFIG_DATA,buf,cfg_len);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	b2db      	uxtb	r3, r3
 800491a:	461a      	mov	r2, r3
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	f248 0047 	movw	r0, #32839	; 0x8047
 8004922:	f7ff ff67 	bl	80047f4 <GT911_WR_Reg>
 8004926:	4603      	mov	r3, r0
 8004928:	73fb      	strb	r3, [r7, #15]
		if(ret==0)break;
 800492a:	7bfb      	ldrb	r3, [r7, #15]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d009      	beq.n	8004944 <GT911_Send_Cfg+0x46>
		delay_ms(10);
 8004930:	200a      	movs	r0, #10
 8004932:	f7fd fdbe 	bl	80024b2 <delay_ms>
	for(retry=0;retry<5;retry++)
 8004936:	7bbb      	ldrb	r3, [r7, #14]
 8004938:	3301      	adds	r3, #1
 800493a:	73bb      	strb	r3, [r7, #14]
 800493c:	7bbb      	ldrb	r3, [r7, #14]
 800493e:	2b04      	cmp	r3, #4
 8004940:	d9e9      	bls.n	8004916 <GT911_Send_Cfg+0x18>
 8004942:	e000      	b.n	8004946 <GT911_Send_Cfg+0x48>
		if(ret==0)break;
 8004944:	bf00      	nop
	}
	return ret;
 8004946:	7bfb      	ldrb	r3, [r7, #15]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <Draw_Big_Point>:

/******************************************************************************************
*********************************************************************************************/
void Draw_Big_Point(uint x,uint y,uint colour)
{    Graphic_Mode();
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	f7fe f975 	bl	8002c4a <Graphic_Mode>
	 Goto_Pixel_XY(x-1,y-1);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29b      	uxth	r3, r3
 8004970:	4619      	mov	r1, r3
 8004972:	4610      	mov	r0, r2
 8004974:	f7fe feb5 	bl	80036e2 <Goto_Pixel_XY>
	 LCD_CmdWrite(0x04);
 8004978:	2004      	movs	r0, #4
 800497a:	f7fd fe29 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(colour);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	b2db      	uxtb	r3, r3
 8004982:	4618      	mov	r0, r3
 8004984:	f7fd fe4c 	bl	8002620 <LCD_DataWrite>
	LCD_DataWrite(colour>>8);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	0a1b      	lsrs	r3, r3, #8
 800498c:	b2db      	uxtb	r3, r3
 800498e:	4618      	mov	r0, r3
 8004990:	f7fd fe46 	bl	8002620 <LCD_DataWrite>
	LCD_DataWrite(colour);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	b2db      	uxtb	r3, r3
 8004998:	4618      	mov	r0, r3
 800499a:	f7fd fe41 	bl	8002620 <LCD_DataWrite>
	LCD_DataWrite(colour>>8);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	0a1b      	lsrs	r3, r3, #8
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fd fe3b 	bl	8002620 <LCD_DataWrite>
	LCD_DataWrite(colour);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fd fe36 	bl	8002620 <LCD_DataWrite>
	LCD_DataWrite(colour>>8);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	0a1b      	lsrs	r3, r3, #8
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fd fe30 	bl	8002620 <LCD_DataWrite>
	Goto_Pixel_XY(x-1,y);//Memory write position
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	b292      	uxth	r2, r2
 80049cc:	4611      	mov	r1, r2
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fe fe87 	bl	80036e2 <Goto_Pixel_XY>
	LCD_CmdWrite(0x04);
 80049d4:	2004      	movs	r0, #4
 80049d6:	f7fd fdfb 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(colour);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fd fe1e 	bl	8002620 <LCD_DataWrite>
	LCD_DataWrite(colour>>8);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	0a1b      	lsrs	r3, r3, #8
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fd fe18 	bl	8002620 <LCD_DataWrite>
	LCD_DataWrite(colour);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fd fe13 	bl	8002620 <LCD_DataWrite>
	LCD_DataWrite(colour>>8);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	0a1b      	lsrs	r3, r3, #8
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fd fe0d 	bl	8002620 <LCD_DataWrite>
	LCD_DataWrite(colour);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fd fe08 	bl	8002620 <LCD_DataWrite>
	LCD_DataWrite(colour>>8);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	0a1b      	lsrs	r3, r3, #8
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fd fe02 	bl	8002620 <LCD_DataWrite>
 	Goto_Pixel_XY(x-1,y+1);//Memory write position
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	3301      	adds	r3, #1
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4610      	mov	r0, r2
 8004a30:	f7fe fe57 	bl	80036e2 <Goto_Pixel_XY>
	LCD_CmdWrite(0x04);
 8004a34:	2004      	movs	r0, #4
 8004a36:	f7fd fdcb 	bl	80025d0 <LCD_CmdWrite>
	LCD_DataWrite(colour);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fd fdee 	bl	8002620 <LCD_DataWrite>
	LCD_DataWrite(colour>>8);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	0a1b      	lsrs	r3, r3, #8
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fd fde8 	bl	8002620 <LCD_DataWrite>
	LCD_DataWrite(colour);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fd fde3 	bl	8002620 <LCD_DataWrite>
	LCD_DataWrite(colour>>8);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	0a1b      	lsrs	r3, r3, #8
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fd fddd 	bl	8002620 <LCD_DataWrite>
	LCD_DataWrite(colour);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fd fdd8 	bl	8002620 <LCD_DataWrite>
	LCD_DataWrite(colour>>8);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fd fdd2 	bl	8002620 <LCD_DataWrite>
}
 8004a7c:	bf00      	nop
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <GT911_read_data>:

uchar GT911_read_data(void)
{	uchar buf[80] = {0xff}; uchar ret = 0;	uchar ss[4];
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b096      	sub	sp, #88	; 0x58
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	23ff      	movs	r3, #255	; 0xff
 8004a8c:	607b      	str	r3, [r7, #4]
 8004a8e:	f107 0308 	add.w	r3, r7, #8
 8004a92:	224c      	movs	r2, #76	; 0x4c
 8004a94:	2100      	movs	r1, #0
 8004a96:	4618      	mov	r0, r3
 8004a98:	f002 ff85 	bl	80079a6 <memset>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


	GT911_RD_Reg(GTP_READ_COOR_ADDR,buf,80);
 8004aa2:	1d3b      	adds	r3, r7, #4
 8004aa4:	2250      	movs	r2, #80	; 0x50
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	f248 104e 	movw	r0, #33102	; 0x814e
 8004aac:	f7ff fee2 	bl	8004874 <GT911_RD_Reg>

	ss[0]=0;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	703b      	strb	r3, [r7, #0]
 	GT911_WR_Reg(GTP_READ_COOR_ADDR,ss,1);	  //Must clear  Buffer status
 8004ab4:	463b      	mov	r3, r7
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	4619      	mov	r1, r3
 8004aba:	f248 104e 	movw	r0, #33102	; 0x814e
 8004abe:	f7ff fe99 	bl	80047f4 <GT911_WR_Reg>

  	ts_event.touch_point = buf[0] & 0x0f;
 8004ac2:	793b      	ldrb	r3, [r7, #4]
 8004ac4:	f003 030f 	and.w	r3, r3, #15
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	4b34      	ldr	r3, [pc, #208]	; (8004b9c <GT911_read_data+0x118>)
 8004acc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28




  	if (ts_event.touch_point == 0)
 8004ad0:	4b32      	ldr	r3, [pc, #200]	; (8004b9c <GT911_read_data+0x118>)
 8004ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <GT911_read_data+0x5a>
		{

			return 0;
 8004ada:	2300      	movs	r3, #0
 8004adc:	e059      	b.n	8004b92 <GT911_read_data+0x10e>
  		}


					switch (ts_event.touch_point)
 8004ade:	4b2f      	ldr	r3, [pc, #188]	; (8004b9c <GT911_read_data+0x118>)
 8004ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d852      	bhi.n	8004b90 <GT911_read_data+0x10c>
 8004aea:	a201      	add	r2, pc, #4	; (adr r2, 8004af0 <GT911_read_data+0x6c>)
 8004aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af0:	08004b71 	.word	0x08004b71
 8004af4:	08004b59 	.word	0x08004b59
 8004af8:	08004b41 	.word	0x08004b41
 8004afc:	08004b25 	.word	0x08004b25
 8004b00:	08004b05 	.word	0x08004b05
							case 6:
				           			ts_event.x6 = (uint)(buf[43] )<<8 | (uint)buf[42];
				           			ts_event.y6 = (uint)(buf[45] )<<8 | (uint)buf[44];	 	  */

							case 5:
				           			ts_event.y5 = (uint)(buf[35] )<<8 | (uint)buf[34];
 8004b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b08:	021b      	lsls	r3, r3, #8
 8004b0a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	4a22      	ldr	r2, [pc, #136]	; (8004b9c <GT911_read_data+0x118>)
 8004b12:	6253      	str	r3, [r2, #36]	; 0x24
				           			ts_event.x5 = (uint)(buf[37] )<<8 | (uint)buf[36];
 8004b14:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004b18:	021b      	lsls	r3, r3, #8
 8004b1a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	4a1e      	ldr	r2, [pc, #120]	; (8004b9c <GT911_read_data+0x118>)
 8004b22:	6213      	str	r3, [r2, #32]

						    case 4:
						           	ts_event.y4 = (uint)(buf[27] )<<8 | (uint)buf[26];
 8004b24:	7ffb      	ldrb	r3, [r7, #31]
 8004b26:	021b      	lsls	r3, r3, #8
 8004b28:	7fba      	ldrb	r2, [r7, #30]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	4a1b      	ldr	r2, [pc, #108]	; (8004b9c <GT911_read_data+0x118>)
 8004b2e:	61d3      	str	r3, [r2, #28]
						           	ts_event.x4 = (uint)(buf[29] )<<8 | (uint)buf[28];
 8004b30:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004b34:	021b      	lsls	r3, r3, #8
 8004b36:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	4a17      	ldr	r2, [pc, #92]	; (8004b9c <GT911_read_data+0x118>)
 8004b3e:	6193      	str	r3, [r2, #24]

						    case 3:
						           	ts_event.y3 = (uint)(buf[19] )<<8 | (uint)buf[18];
 8004b40:	7dfb      	ldrb	r3, [r7, #23]
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	7dba      	ldrb	r2, [r7, #22]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	4a14      	ldr	r2, [pc, #80]	; (8004b9c <GT911_read_data+0x118>)
 8004b4a:	6153      	str	r3, [r2, #20]
						           	ts_event.x3 = (uint)(buf[21] )<<8 | (uint)buf[20];
 8004b4c:	7e7b      	ldrb	r3, [r7, #25]
 8004b4e:	021b      	lsls	r3, r3, #8
 8004b50:	7e3a      	ldrb	r2, [r7, #24]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	4a11      	ldr	r2, [pc, #68]	; (8004b9c <GT911_read_data+0x118>)
 8004b56:	6113      	str	r3, [r2, #16]

						    case 2:
						           	ts_event.y2 = (uint)(buf[11] )<<8 | (uint)buf[10];
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	021b      	lsls	r3, r3, #8
 8004b5c:	7bba      	ldrb	r2, [r7, #14]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	4a0e      	ldr	r2, [pc, #56]	; (8004b9c <GT911_read_data+0x118>)
 8004b62:	60d3      	str	r3, [r2, #12]
						           	ts_event.x2 = (uint)(buf[13] )<<8 | (uint)buf[12];
 8004b64:	7c7b      	ldrb	r3, [r7, #17]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	7c3a      	ldrb	r2, [r7, #16]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	4a0b      	ldr	r2, [pc, #44]	; (8004b9c <GT911_read_data+0x118>)
 8004b6e:	6093      	str	r3, [r2, #8]

						    case 1:
						           	ts_event.y1 = (uint)(buf[3] )<<8 | (uint)buf[2];
 8004b70:	79fb      	ldrb	r3, [r7, #7]
 8004b72:	021b      	lsls	r3, r3, #8
 8004b74:	79ba      	ldrb	r2, [r7, #6]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	4a08      	ldr	r2, [pc, #32]	; (8004b9c <GT911_read_data+0x118>)
 8004b7a:	6053      	str	r3, [r2, #4]
						           	ts_event.x1 = (uint)(buf[5] )<<8 | (uint)buf[4];
 8004b7c:	7a7b      	ldrb	r3, [r7, #9]
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	7a3a      	ldrb	r2, [r7, #8]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	4a05      	ldr	r2, [pc, #20]	; (8004b9c <GT911_read_data+0x118>)
 8004b86:	6013      	str	r3, [r2, #0]

				    break;
 8004b88:	bf00      	nop
						    return 0;
					}



	return ret;
 8004b8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b8e:	e000      	b.n	8004b92 <GT911_read_data+0x10e>
						    return 0;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3758      	adds	r7, #88	; 0x58
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20000140 	.word	0x20000140

08004ba0 <inttostr>:


void inttostr(uint value,uchar *str)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
	str[0]=value/1000+48;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a2f      	ldr	r2, [pc, #188]	; (8004c6c <inttostr+0xcc>)
 8004bae:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb2:	099b      	lsrs	r3, r3, #6
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	3330      	adds	r3, #48	; 0x30
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	701a      	strb	r2, [r3, #0]
	str[1]=value%1000/100+48;
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	4b2a      	ldr	r3, [pc, #168]	; (8004c6c <inttostr+0xcc>)
 8004bc2:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc6:	099b      	lsrs	r3, r3, #6
 8004bc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004bcc:	fb01 f303 	mul.w	r3, r1, r3
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	4a27      	ldr	r2, [pc, #156]	; (8004c70 <inttostr+0xd0>)
 8004bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	3301      	adds	r3, #1
 8004be0:	3230      	adds	r2, #48	; 0x30
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	701a      	strb	r2, [r3, #0]
	str[2]=value%1000%100/10+48;
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	4b20      	ldr	r3, [pc, #128]	; (8004c6c <inttostr+0xcc>)
 8004bea:	fba3 1302 	umull	r1, r3, r3, r2
 8004bee:	099b      	lsrs	r3, r3, #6
 8004bf0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004bf4:	fb01 f303 	mul.w	r3, r1, r3
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	4a1d      	ldr	r2, [pc, #116]	; (8004c70 <inttostr+0xd0>)
 8004bfc:	fba2 1203 	umull	r1, r2, r2, r3
 8004c00:	0952      	lsrs	r2, r2, #5
 8004c02:	2164      	movs	r1, #100	; 0x64
 8004c04:	fb01 f202 	mul.w	r2, r1, r2
 8004c08:	1a9a      	subs	r2, r3, r2
 8004c0a:	4b1a      	ldr	r3, [pc, #104]	; (8004c74 <inttostr+0xd4>)
 8004c0c:	fba3 2302 	umull	r2, r3, r3, r2
 8004c10:	08db      	lsrs	r3, r3, #3
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	3302      	adds	r3, #2
 8004c18:	3230      	adds	r2, #48	; 0x30
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]
 	str[3]=value%1000%100%10+48;
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	4b12      	ldr	r3, [pc, #72]	; (8004c6c <inttostr+0xcc>)
 8004c22:	fba3 1302 	umull	r1, r3, r3, r2
 8004c26:	099b      	lsrs	r3, r3, #6
 8004c28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004c2c:	fb01 f303 	mul.w	r3, r1, r3
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	4a0f      	ldr	r2, [pc, #60]	; (8004c70 <inttostr+0xd0>)
 8004c34:	fba2 1203 	umull	r1, r2, r2, r3
 8004c38:	0952      	lsrs	r2, r2, #5
 8004c3a:	2164      	movs	r1, #100	; 0x64
 8004c3c:	fb01 f202 	mul.w	r2, r1, r2
 8004c40:	1a9a      	subs	r2, r3, r2
 8004c42:	4b0c      	ldr	r3, [pc, #48]	; (8004c74 <inttostr+0xd4>)
 8004c44:	fba3 1302 	umull	r1, r3, r3, r2
 8004c48:	08d9      	lsrs	r1, r3, #3
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	440b      	add	r3, r1
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	1ad1      	subs	r1, r2, r3
 8004c54:	b2ca      	uxtb	r2, r1
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	3303      	adds	r3, #3
 8004c5a:	3230      	adds	r2, #48	; 0x30
 8004c5c:	b2d2      	uxtb	r2, r2
 8004c5e:	701a      	strb	r2, [r3, #0]
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bc80      	pop	{r7}
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	10624dd3 	.word	0x10624dd3
 8004c70:	51eb851f 	.word	0x51eb851f
 8004c74:	cccccccd 	.word	0xcccccccd

08004c78 <TOUCH_Init>:



void TOUCH_Init(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_RESET);
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c82:	480d      	ldr	r0, [pc, #52]	; (8004cb8 <TOUCH_Init+0x40>)
 8004c84:	f001 fb1d 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CTP_INT_GPIO_Port, CTP_INT_Pin, GPIO_PIN_RESET);
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c8e:	480b      	ldr	r0, [pc, #44]	; (8004cbc <TOUCH_Init+0x44>)
 8004c90:	f001 fb17 	bl	80062c2 <HAL_GPIO_WritePin>
	delay_ms(50);
 8004c94:	2032      	movs	r0, #50	; 0x32
 8004c96:	f7fd fc0c 	bl	80024b2 <delay_ms>
	HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_SET);
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ca0:	4805      	ldr	r0, [pc, #20]	; (8004cb8 <TOUCH_Init+0x40>)
 8004ca2:	f001 fb0e 	bl	80062c2 <HAL_GPIO_WritePin>
	delay_ms(200);
 8004ca6:	20c8      	movs	r0, #200	; 0xc8
 8004ca8:	f7fd fc03 	bl	80024b2 <delay_ms>
	//ACC=PEN_INT;  	    //CTP INT  SET CTP IIC ADDRESS
	//ACC=PEN_INT;  	   //CTP INT  SET CTP IIC ADDRESS
 	delay_ms(200);
 8004cac:	20c8      	movs	r0, #200	; 0xc8
 8004cae:	f7fd fc00 	bl	80024b2 <delay_ms>
}
 8004cb2:	bf00      	nop
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40010800 	.word	0x40010800
 8004cbc:	40010c00 	.word	0x40010c00

08004cc0 <TPTEST>:


void TPTEST(void)
{uchar ss[4]; uchar re=1;//	uchar i;  uchar bb[187];
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	71fb      	strb	r3, [r7, #7]
   	ts_event.Key_Sta=Key_Up;
 8004cca:	4b9a      	ldr	r3, [pc, #616]	; (8004f34 <TPTEST+0x274>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	  					ts_event.x1=0;
 8004cd2:	4b98      	ldr	r3, [pc, #608]	; (8004f34 <TPTEST+0x274>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
						ts_event.y1=0;
 8004cd8:	4b96      	ldr	r3, [pc, #600]	; (8004f34 <TPTEST+0x274>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	605a      	str	r2, [r3, #4]
						ts_event.x2=0;
 8004cde:	4b95      	ldr	r3, [pc, #596]	; (8004f34 <TPTEST+0x274>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	609a      	str	r2, [r3, #8]
						ts_event.y2=0;
 8004ce4:	4b93      	ldr	r3, [pc, #588]	; (8004f34 <TPTEST+0x274>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	60da      	str	r2, [r3, #12]
						ts_event.x3=0;
 8004cea:	4b92      	ldr	r3, [pc, #584]	; (8004f34 <TPTEST+0x274>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	611a      	str	r2, [r3, #16]
						ts_event.y3=0;
 8004cf0:	4b90      	ldr	r3, [pc, #576]	; (8004f34 <TPTEST+0x274>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	615a      	str	r2, [r3, #20]
						ts_event.x4=0;
 8004cf6:	4b8f      	ldr	r3, [pc, #572]	; (8004f34 <TPTEST+0x274>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	619a      	str	r2, [r3, #24]
						ts_event.y4=0;
 8004cfc:	4b8d      	ldr	r3, [pc, #564]	; (8004f34 <TPTEST+0x274>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	61da      	str	r2, [r3, #28]
						ts_event.x5=0;
 8004d02:	4b8c      	ldr	r3, [pc, #560]	; (8004f34 <TPTEST+0x274>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	621a      	str	r2, [r3, #32]
						ts_event.y5=0;
 8004d08:	4b8a      	ldr	r3, [pc, #552]	; (8004f34 <TPTEST+0x274>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	625a      	str	r2, [r3, #36]	; 0x24



		Select_Main_Window_16bpp();
 8004d0e:	f7fe f8a8 	bl	8002e62 <Select_Main_Window_16bpp>
		Main_Image_Start_Address(0);
 8004d12:	2000      	movs	r0, #0
 8004d14:	f7fe fabf 	bl	8003296 <Main_Image_Start_Address>
		Main_Image_Width(400);
 8004d18:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004d1c:	f7fe fade 	bl	80032dc <Main_Image_Width>
		Main_Window_Start_XY(0,0);
 8004d20:	2100      	movs	r1, #0
 8004d22:	2000      	movs	r0, #0
 8004d24:	f7fe faf1 	bl	800330a <Main_Window_Start_XY>

    	Canvas_Image_Start_address(0);//Layer 1
 8004d28:	2000      	movs	r0, #0
 8004d2a:	f7fe fc20 	bl	800356e <Canvas_Image_Start_address>
		Canvas_image_width(400);//
 8004d2e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004d32:	f7fe fc3f 	bl	80035b4 <Canvas_image_width>
    	Active_Window_XY(0,0);
 8004d36:	2100      	movs	r1, #0
 8004d38:	2000      	movs	r0, #0
 8004d3a:	f7fe fc52 	bl	80035e2 <Active_Window_XY>
		Active_Window_WH(400,1280);
 8004d3e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8004d42:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004d46:	f7fe fc74 	bl	8003632 <Active_Window_WH>

		Foreground_color_65k(Black);
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	f7ff fb20 	bl	8004390 <Foreground_color_65k>
		Line_Start_XY(0,0);
 8004d50:	2100      	movs	r1, #0
 8004d52:	2000      	movs	r0, #0
 8004d54:	f7fe fd21 	bl	800379a <Line_Start_XY>
		Line_End_XY(399,1279);
 8004d58:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8004d5c:	f240 108f 	movw	r0, #399	; 0x18f
 8004d60:	f7fe fd4b 	bl	80037fa <Line_End_XY>
		Start_Square_Fill();
 8004d64:	f7fe fd79 	bl	800385a <Start_Square_Fill>

		 Foreground_color_65k(Black);
 8004d68:	2000      	movs	r0, #0
 8004d6a:	f7ff fb11 	bl	8004390 <Foreground_color_65k>
	Background_color_65k(Blue2);
 8004d6e:	f240 501f 	movw	r0, #1311	; 0x51f
 8004d72:	f7ff fb34 	bl	80043de <Background_color_65k>
	CGROM_Select_Internal_CGROM();
 8004d76:	f7ff f9fb 	bl	8004170 <CGROM_Select_Internal_CGROM>
	Font_Select_12x24_24x24();
 8004d7a:	f7ff fa47 	bl	800420c <Font_Select_12x24_24x24>
 	Goto_Text_XY(0,Line1);
 8004d7e:	2118      	movs	r1, #24
 8004d80:	2000      	movs	r0, #0
 8004d82:	f7fe fcd6 	bl	8003732 <Goto_Text_XY>
	Show_String("www.buydisplay.ocm  CTP test");
 8004d86:	486c      	ldr	r0, [pc, #432]	; (8004f38 <TPTEST+0x278>)
 8004d88:	f7ff fb50 	bl	800442c <Show_String>

 	Goto_Text_XY(0,Line52);
 8004d8c:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8004d90:	2000      	movs	r0, #0
 8004d92:	f7fe fcce 	bl	8003732 <Goto_Text_XY>
	Show_String("exit");
 8004d96:	4869      	ldr	r0, [pc, #420]	; (8004f3c <TPTEST+0x27c>)
 8004d98:	f7ff fb48 	bl	800442c <Show_String>
 	Goto_Text_XY(330,Line52);
 8004d9c:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8004da0:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8004da4:	f7fe fcc5 	bl	8003732 <Goto_Text_XY>
	Show_String("clear");
 8004da8:	4865      	ldr	r0, [pc, #404]	; (8004f40 <TPTEST+0x280>)
 8004daa:	f7ff fb3f 	bl	800442c <Show_String>



  	Foreground_color_65k(White);
 8004dae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004db2:	f7ff faed 	bl	8004390 <Foreground_color_65k>
	Background_color_65k(Black);
 8004db6:	2000      	movs	r0, #0
 8004db8:	f7ff fb11 	bl	80043de <Background_color_65k>
	CGROM_Select_Internal_CGROM();
 8004dbc:	f7ff f9d8 	bl	8004170 <CGROM_Select_Internal_CGROM>
	Font_Select_8x16_16x16();
 8004dc0:	f7ff fa0a 	bl	80041d8 <Font_Select_8x16_16x16>


				TOUCH_Init();
 8004dc4:	f7ff ff58 	bl	8004c78 <TOUCH_Init>

			re=GT911_Send_Cfg((uchar*)GTP_CFG_DATA,sizeof(GTP_CFG_DATA));
 8004dc8:	21ba      	movs	r1, #186	; 0xba
 8004dca:	485e      	ldr	r0, [pc, #376]	; (8004f44 <TPTEST+0x284>)
 8004dcc:	f7ff fd97 	bl	80048fe <GT911_Send_Cfg>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	71fb      	strb	r3, [r7, #7]
			if(re==0)
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d107      	bne.n	8004dea <TPTEST+0x12a>
			{Goto_Text_XY(0,60);Show_String("send CFG OK");}
 8004dda:	213c      	movs	r1, #60	; 0x3c
 8004ddc:	2000      	movs	r0, #0
 8004dde:	f7fe fca8 	bl	8003732 <Goto_Text_XY>
 8004de2:	4859      	ldr	r0, [pc, #356]	; (8004f48 <TPTEST+0x288>)
 8004de4:	f7ff fb22 	bl	800442c <Show_String>
 8004de8:	e006      	b.n	8004df8 <TPTEST+0x138>
	 		else  {Goto_Text_XY(0,60);Show_String("send CFG NOK");}
 8004dea:	213c      	movs	r1, #60	; 0x3c
 8004dec:	2000      	movs	r0, #0
 8004dee:	f7fe fca0 	bl	8003732 <Goto_Text_XY>
 8004df2:	4856      	ldr	r0, [pc, #344]	; (8004f4c <TPTEST+0x28c>)
 8004df4:	f7ff fb1a 	bl	800442c <Show_String>
		LCD_DataWrite(',');	delay_us(2);   Check_Mem_WR_FIFO_not_Full();
		i+=1;
		}
*/

	   	ss[0]=0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	703b      	strb	r3, [r7, #0]
 	GT911_WR_Reg(GTP_READ_COOR_ADDR,ss,1);	  //Must clear  Buffer status
 8004dfc:	463b      	mov	r3, r7
 8004dfe:	2201      	movs	r2, #1
 8004e00:	4619      	mov	r1, r3
 8004e02:	f248 104e 	movw	r0, #33102	; 0x814e
 8004e06:	f7ff fcf5 	bl	80047f4 <GT911_WR_Reg>

 	buttonClicked = 0;
 8004e0a:	4b51      	ldr	r3, [pc, #324]	; (8004f50 <TPTEST+0x290>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	701a      	strb	r2, [r3, #0]
	while(buttonClicked == 0)
 8004e10:	e14e      	b.n	80050b0 <TPTEST+0x3f0>
	{	   	Foreground_color_65k(White);
 8004e12:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004e16:	f7ff fabb 	bl	8004390 <Foreground_color_65k>
			Background_color_65k(Black);
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	f7ff fadf 	bl	80043de <Background_color_65k>
			CGROM_Select_Internal_CGROM();
 8004e20:	f7ff f9a6 	bl	8004170 <CGROM_Select_Internal_CGROM>
			Font_Select_8x16_16x16();
 8004e24:	f7ff f9d8 	bl	80041d8 <Font_Select_8x16_16x16>


		  	Goto_Text_XY(0,465);
 8004e28:	f240 11d1 	movw	r1, #465	; 0x1d1
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	f7fe fc80 	bl	8003732 <Goto_Text_XY>
		  	Show_String("Coordinate");
 8004e32:	4848      	ldr	r0, [pc, #288]	; (8004f54 <TPTEST+0x294>)
 8004e34:	f7ff fafa 	bl	800442c <Show_String>



	   GT911_RD_Reg(GTP_READ_COOR_ADDR,ss,1);
 8004e38:	463b      	mov	r3, r7
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	f248 104e 	movw	r0, #33102	; 0x814e
 8004e42:	f7ff fd17 	bl	8004874 <GT911_RD_Reg>
	   if(ss[0]&0x80)
 8004e46:	783b      	ldrb	r3, [r7, #0]
 8004e48:	b25b      	sxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f280 8130 	bge.w	80050b0 <TPTEST+0x3f0>
			{
					GT911_read_data();
 8004e50:	f7ff fe18 	bl	8004a84 <GT911_read_data>
					ts_event.Key_Sta=Key_Up;
 8004e54:	4b37      	ldr	r3, [pc, #220]	; (8004f34 <TPTEST+0x274>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

					if(ts_event.x1<=50&&ts_event.x1>5&&ts_event.y1<=28&&ts_event.y1>5)return;
 8004e5c:	4b35      	ldr	r3, [pc, #212]	; (8004f34 <TPTEST+0x274>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b32      	cmp	r3, #50	; 0x32
 8004e62:	d80c      	bhi.n	8004e7e <TPTEST+0x1be>
 8004e64:	4b33      	ldr	r3, [pc, #204]	; (8004f34 <TPTEST+0x274>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b05      	cmp	r3, #5
 8004e6a:	d908      	bls.n	8004e7e <TPTEST+0x1be>
 8004e6c:	4b31      	ldr	r3, [pc, #196]	; (8004f34 <TPTEST+0x274>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2b1c      	cmp	r3, #28
 8004e72:	d804      	bhi.n	8004e7e <TPTEST+0x1be>
 8004e74:	4b2f      	ldr	r3, [pc, #188]	; (8004f34 <TPTEST+0x274>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2b05      	cmp	r3, #5
 8004e7a:	f200 8122 	bhi.w	80050c2 <TPTEST+0x402>
					if(ts_event.x1>=340&&ts_event.y1<=28)
 8004e7e:	4b2d      	ldr	r3, [pc, #180]	; (8004f34 <TPTEST+0x274>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004e86:	d367      	bcc.n	8004f58 <TPTEST+0x298>
 8004e88:	4b2a      	ldr	r3, [pc, #168]	; (8004f34 <TPTEST+0x274>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	2b1c      	cmp	r3, #28
 8004e8e:	d863      	bhi.n	8004f58 <TPTEST+0x298>
					{
						Select_Main_Window_16bpp();
 8004e90:	f7fd ffe7 	bl	8002e62 <Select_Main_Window_16bpp>
						Main_Image_Start_Address(0);
 8004e94:	2000      	movs	r0, #0
 8004e96:	f7fe f9fe 	bl	8003296 <Main_Image_Start_Address>
						Main_Image_Width(400);
 8004e9a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004e9e:	f7fe fa1d 	bl	80032dc <Main_Image_Width>
						Main_Window_Start_XY(0,0);
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	2000      	movs	r0, #0
 8004ea6:	f7fe fa30 	bl	800330a <Main_Window_Start_XY>

				    	Canvas_Image_Start_address(0);//Layer 1
 8004eaa:	2000      	movs	r0, #0
 8004eac:	f7fe fb5f 	bl	800356e <Canvas_Image_Start_address>
						Canvas_image_width(400);//
 8004eb0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004eb4:	f7fe fb7e 	bl	80035b4 <Canvas_image_width>
				    	Active_Window_XY(0,0);
 8004eb8:	2100      	movs	r1, #0
 8004eba:	2000      	movs	r0, #0
 8004ebc:	f7fe fb91 	bl	80035e2 <Active_Window_XY>
						Active_Window_WH(400,1280);
 8004ec0:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8004ec4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004ec8:	f7fe fbb3 	bl	8003632 <Active_Window_WH>

						Foreground_color_65k(Black);
 8004ecc:	2000      	movs	r0, #0
 8004ece:	f7ff fa5f 	bl	8004390 <Foreground_color_65k>
						Line_Start_XY(0,0);
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	f7fe fc60 	bl	800379a <Line_Start_XY>
						Line_End_XY(399,1279);
 8004eda:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8004ede:	f240 108f 	movw	r0, #399	; 0x18f
 8004ee2:	f7fe fc8a 	bl	80037fa <Line_End_XY>
						Start_Square_Fill();
 8004ee6:	f7fe fcb8 	bl	800385a <Start_Square_Fill>

							 Foreground_color_65k(Black);
 8004eea:	2000      	movs	r0, #0
 8004eec:	f7ff fa50 	bl	8004390 <Foreground_color_65k>
						Background_color_65k(Blue2);
 8004ef0:	f240 501f 	movw	r0, #1311	; 0x51f
 8004ef4:	f7ff fa73 	bl	80043de <Background_color_65k>
						CGROM_Select_Internal_CGROM();
 8004ef8:	f7ff f93a 	bl	8004170 <CGROM_Select_Internal_CGROM>
						Font_Select_12x24_24x24();
 8004efc:	f7ff f986 	bl	800420c <Font_Select_12x24_24x24>
					 	Goto_Text_XY(0,Line1);
 8004f00:	2118      	movs	r1, #24
 8004f02:	2000      	movs	r0, #0
 8004f04:	f7fe fc15 	bl	8003732 <Goto_Text_XY>
						Show_String("www.buydisplay.ocm  CTP test");
 8004f08:	480b      	ldr	r0, [pc, #44]	; (8004f38 <TPTEST+0x278>)
 8004f0a:	f7ff fa8f 	bl	800442c <Show_String>

					 	Goto_Text_XY(0,Line52);
 8004f0e:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8004f12:	2000      	movs	r0, #0
 8004f14:	f7fe fc0d 	bl	8003732 <Goto_Text_XY>
						Show_String("exit");
 8004f18:	4808      	ldr	r0, [pc, #32]	; (8004f3c <TPTEST+0x27c>)
 8004f1a:	f7ff fa87 	bl	800442c <Show_String>
					 	Goto_Text_XY(330,Line52);
 8004f1e:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8004f22:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8004f26:	f7fe fc04 	bl	8003732 <Goto_Text_XY>
						Show_String("clear");
 8004f2a:	4805      	ldr	r0, [pc, #20]	; (8004f40 <TPTEST+0x280>)
 8004f2c:	f7ff fa7e 	bl	800442c <Show_String>
 8004f30:	e0a0      	b.n	8005074 <TPTEST+0x3b4>
 8004f32:	bf00      	nop
 8004f34:	20000140 	.word	0x20000140
 8004f38:	08008af4 	.word	0x08008af4
 8004f3c:	08008b14 	.word	0x08008b14
 8004f40:	08008b1c 	.word	0x08008b1c
 8004f44:	20000000 	.word	0x20000000
 8004f48:	08008b24 	.word	0x08008b24
 8004f4c:	08008b30 	.word	0x08008b30
 8004f50:	200001fc 	.word	0x200001fc
 8004f54:	08008b40 	.word	0x08008b40
					}

					 else{

					inttostr(ts_event.x1,ss);
 8004f58:	4b5c      	ldr	r3, [pc, #368]	; (80050cc <TPTEST+0x40c>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	463a      	mov	r2, r7
 8004f5e:	4611      	mov	r1, r2
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff fe1d 	bl	8004ba0 <inttostr>


				  	Goto_Text_XY(100,465);   //Set the display position
 8004f66:	f240 11d1 	movw	r1, #465	; 0x1d1
 8004f6a:	2064      	movs	r0, #100	; 0x64
 8004f6c:	f7fe fbe1 	bl	8003732 <Goto_Text_XY>

				  	Show_String("X=");
 8004f70:	4857      	ldr	r0, [pc, #348]	; (80050d0 <TPTEST+0x410>)
 8004f72:	f7ff fa5b 	bl	800442c <Show_String>
					Text_Mode();
 8004f76:	f7fd fe7e 	bl	8002c76 <Text_Mode>
					LCD_CmdWrite(0x04);
 8004f7a:	2004      	movs	r0, #4
 8004f7c:	f7fd fb28 	bl	80025d0 <LCD_CmdWrite>
				  	LCD_DataWrite(ss[0]);
 8004f80:	783b      	ldrb	r3, [r7, #0]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fd fb4c 	bl	8002620 <LCD_DataWrite>
					 Check_Mem_WR_FIFO_not_Full();
 8004f88:	f7fd fd80 	bl	8002a8c <Check_Mem_WR_FIFO_not_Full>
				  	LCD_DataWrite(ss[1]);
 8004f8c:	787b      	ldrb	r3, [r7, #1]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fd fb46 	bl	8002620 <LCD_DataWrite>
					 Check_Mem_WR_FIFO_not_Full();
 8004f94:	f7fd fd7a 	bl	8002a8c <Check_Mem_WR_FIFO_not_Full>
				  	LCD_DataWrite(ss[2]);
 8004f98:	78bb      	ldrb	r3, [r7, #2]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fd fb40 	bl	8002620 <LCD_DataWrite>
					 Check_Mem_WR_FIFO_not_Full();
 8004fa0:	f7fd fd74 	bl	8002a8c <Check_Mem_WR_FIFO_not_Full>
 				  	LCD_DataWrite(ss[3]);
 8004fa4:	78fb      	ldrb	r3, [r7, #3]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fd fb3a 	bl	8002620 <LCD_DataWrite>
					 Check_Mem_WR_FIFO_not_Full();
 8004fac:	f7fd fd6e 	bl	8002a8c <Check_Mem_WR_FIFO_not_Full>

					inttostr(ts_event.y1,ss);
 8004fb0:	4b46      	ldr	r3, [pc, #280]	; (80050cc <TPTEST+0x40c>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	463a      	mov	r2, r7
 8004fb6:	4611      	mov	r1, r2
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff fdf1 	bl	8004ba0 <inttostr>
				  	Goto_Text_XY(200, 465);   //Set the display position
 8004fbe:	f240 11d1 	movw	r1, #465	; 0x1d1
 8004fc2:	20c8      	movs	r0, #200	; 0xc8
 8004fc4:	f7fe fbb5 	bl	8003732 <Goto_Text_XY>

				  	Show_String("Y=");
 8004fc8:	4842      	ldr	r0, [pc, #264]	; (80050d4 <TPTEST+0x414>)
 8004fca:	f7ff fa2f 	bl	800442c <Show_String>
 					Text_Mode();
 8004fce:	f7fd fe52 	bl	8002c76 <Text_Mode>
					LCD_CmdWrite(0x04);
 8004fd2:	2004      	movs	r0, #4
 8004fd4:	f7fd fafc 	bl	80025d0 <LCD_CmdWrite>
				  	LCD_DataWrite(ss[0]);
 8004fd8:	783b      	ldrb	r3, [r7, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fd fb20 	bl	8002620 <LCD_DataWrite>
					 Check_Mem_WR_FIFO_not_Full();
 8004fe0:	f7fd fd54 	bl	8002a8c <Check_Mem_WR_FIFO_not_Full>
				  	LCD_DataWrite(ss[1]);
 8004fe4:	787b      	ldrb	r3, [r7, #1]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fd fb1a 	bl	8002620 <LCD_DataWrite>
					 Check_Mem_WR_FIFO_not_Full();
 8004fec:	f7fd fd4e 	bl	8002a8c <Check_Mem_WR_FIFO_not_Full>
				  	LCD_DataWrite(ss[2]);
 8004ff0:	78bb      	ldrb	r3, [r7, #2]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fd fb14 	bl	8002620 <LCD_DataWrite>
					 Check_Mem_WR_FIFO_not_Full();
 8004ff8:	f7fd fd48 	bl	8002a8c <Check_Mem_WR_FIFO_not_Full>
				  	LCD_DataWrite(ss[3]);
 8004ffc:	78fb      	ldrb	r3, [r7, #3]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fd fb0e 	bl	8002620 <LCD_DataWrite>
					  Check_Mem_WR_FIFO_not_Full();
 8005004:	f7fd fd42 	bl	8002a8c <Check_Mem_WR_FIFO_not_Full>



					Draw_Big_Point(ts_event.x1,1280-ts_event.y1,color65k_red);
 8005008:	4b30      	ldr	r3, [pc, #192]	; (80050cc <TPTEST+0x40c>)
 800500a:	6818      	ldr	r0, [r3, #0]
 800500c:	4b2f      	ldr	r3, [pc, #188]	; (80050cc <TPTEST+0x40c>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f5c3 63a0 	rsb	r3, r3, #1280	; 0x500
 8005014:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005018:	4619      	mov	r1, r3
 800501a:	f7ff fc99 	bl	8004950 <Draw_Big_Point>
					Draw_Big_Point(ts_event.x2,1280-ts_event.y2,color65k_green);
 800501e:	4b2b      	ldr	r3, [pc, #172]	; (80050cc <TPTEST+0x40c>)
 8005020:	6898      	ldr	r0, [r3, #8]
 8005022:	4b2a      	ldr	r3, [pc, #168]	; (80050cc <TPTEST+0x40c>)
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f5c3 63a0 	rsb	r3, r3, #1280	; 0x500
 800502a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800502e:	4619      	mov	r1, r3
 8005030:	f7ff fc8e 	bl	8004950 <Draw_Big_Point>
					Draw_Big_Point(ts_event.x3,1280-ts_event.y3,color65k_blue);
 8005034:	4b25      	ldr	r3, [pc, #148]	; (80050cc <TPTEST+0x40c>)
 8005036:	6918      	ldr	r0, [r3, #16]
 8005038:	4b24      	ldr	r3, [pc, #144]	; (80050cc <TPTEST+0x40c>)
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	f5c3 63a0 	rsb	r3, r3, #1280	; 0x500
 8005040:	221f      	movs	r2, #31
 8005042:	4619      	mov	r1, r3
 8005044:	f7ff fc84 	bl	8004950 <Draw_Big_Point>
					Draw_Big_Point(ts_event.x4,1280-ts_event.y4,color65k_cyan);
 8005048:	4b20      	ldr	r3, [pc, #128]	; (80050cc <TPTEST+0x40c>)
 800504a:	6998      	ldr	r0, [r3, #24]
 800504c:	4b1f      	ldr	r3, [pc, #124]	; (80050cc <TPTEST+0x40c>)
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	f5c3 63a0 	rsb	r3, r3, #1280	; 0x500
 8005054:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005058:	4619      	mov	r1, r3
 800505a:	f7ff fc79 	bl	8004950 <Draw_Big_Point>
					Draw_Big_Point(ts_event.x5,1280-ts_event.y5,color65k_purple);
 800505e:	4b1b      	ldr	r3, [pc, #108]	; (80050cc <TPTEST+0x40c>)
 8005060:	6a18      	ldr	r0, [r3, #32]
 8005062:	4b1a      	ldr	r3, [pc, #104]	; (80050cc <TPTEST+0x40c>)
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	f5c3 63a0 	rsb	r3, r3, #1280	; 0x500
 800506a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800506e:	4619      	mov	r1, r3
 8005070:	f7ff fc6e 	bl	8004950 <Draw_Big_Point>



					}

						ts_event.x1=0;
 8005074:	4b15      	ldr	r3, [pc, #84]	; (80050cc <TPTEST+0x40c>)
 8005076:	2200      	movs	r2, #0
 8005078:	601a      	str	r2, [r3, #0]
						ts_event.y1=0;
 800507a:	4b14      	ldr	r3, [pc, #80]	; (80050cc <TPTEST+0x40c>)
 800507c:	2200      	movs	r2, #0
 800507e:	605a      	str	r2, [r3, #4]
						ts_event.x2=0;
 8005080:	4b12      	ldr	r3, [pc, #72]	; (80050cc <TPTEST+0x40c>)
 8005082:	2200      	movs	r2, #0
 8005084:	609a      	str	r2, [r3, #8]
						ts_event.y2=0;
 8005086:	4b11      	ldr	r3, [pc, #68]	; (80050cc <TPTEST+0x40c>)
 8005088:	2200      	movs	r2, #0
 800508a:	60da      	str	r2, [r3, #12]
						ts_event.x3=0;
 800508c:	4b0f      	ldr	r3, [pc, #60]	; (80050cc <TPTEST+0x40c>)
 800508e:	2200      	movs	r2, #0
 8005090:	611a      	str	r2, [r3, #16]
						ts_event.y3=0;
 8005092:	4b0e      	ldr	r3, [pc, #56]	; (80050cc <TPTEST+0x40c>)
 8005094:	2200      	movs	r2, #0
 8005096:	615a      	str	r2, [r3, #20]
						ts_event.x4=0;
 8005098:	4b0c      	ldr	r3, [pc, #48]	; (80050cc <TPTEST+0x40c>)
 800509a:	2200      	movs	r2, #0
 800509c:	619a      	str	r2, [r3, #24]
						ts_event.y4=0;
 800509e:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <TPTEST+0x40c>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	61da      	str	r2, [r3, #28]
						ts_event.x5=0;
 80050a4:	4b09      	ldr	r3, [pc, #36]	; (80050cc <TPTEST+0x40c>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	621a      	str	r2, [r3, #32]
						ts_event.y5=0;
 80050aa:	4b08      	ldr	r3, [pc, #32]	; (80050cc <TPTEST+0x40c>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	625a      	str	r2, [r3, #36]	; 0x24
	while(buttonClicked == 0)
 80050b0:	4b09      	ldr	r3, [pc, #36]	; (80050d8 <TPTEST+0x418>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f43f aeac 	beq.w	8004e12 <TPTEST+0x152>

			}


    }
	buttonClicked = 0;
 80050ba:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <TPTEST+0x418>)
 80050bc:	2200      	movs	r2, #0
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	e000      	b.n	80050c4 <TPTEST+0x404>
					if(ts_event.x1<=50&&ts_event.x1>5&&ts_event.y1<=28&&ts_event.y1>5)return;
 80050c2:	bf00      	nop


}
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20000140 	.word	0x20000140
 80050d0:	08008b4c 	.word	0x08008b4c
 80050d4:	08008b50 	.word	0x08008b50
 80050d8:	200001fc 	.word	0x200001fc

080050dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80050e0:	f000 fde4 	bl	8005cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80050e4:	f000 f85e 	bl	80051a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80050e8:	f000 f940 	bl	800536c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80050ec:	f000 f914 	bl	8005318 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80050f0:	f000 f89a 	bl	8005228 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  SSD2828_Reset();
 80050f4:	f7fb f82a 	bl	800014c <SSD2828_Reset>
  SSD2828_initial();
 80050f8:	f7fb f910 	bl	800031c <SSD2828_initial>
  RA8876_HW_Reset();
 80050fc:	f7fd fb24 	bl	8002748 <RA8876_HW_Reset>
  while(LCD_StatusRead()&0x02);	 //Initial_Display_test	and  set SW2 pin2 = 1
 8005100:	bf00      	nop
 8005102:	f7fd fadd 	bl	80026c0 <LCD_StatusRead>
 8005106:	4603      	mov	r3, r0
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1f8      	bne.n	8005102 <main+0x26>
  RA8876_initial();
 8005110:	f7fd fc03 	bl	800291a <RA8876_initial>
  Display_ON();
 8005114:	f7fd ff09 	bl	8002f2a <Display_ON>
  delay_ms(20);
 8005118:	2014      	movs	r0, #20
 800511a:	f7fd f9ca 	bl	80024b2 <delay_ms>
  Foreground_color_65k(White);
 800511e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005122:	f7ff f935 	bl	8004390 <Foreground_color_65k>
  Line_Start_XY(0,0);
 8005126:	2100      	movs	r1, #0
 8005128:	2000      	movs	r0, #0
 800512a:	f7fe fb36 	bl	800379a <Line_Start_XY>
  Line_End_XY(399,1279);
 800512e:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8005132:	f240 108f 	movw	r0, #399	; 0x18f
 8005136:	f7fe fb60 	bl	80037fa <Line_End_XY>
  Start_Square_Fill();
 800513a:	f7fe fb8e 	bl	800385a <Start_Square_Fill>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	///////////////////////////////////////////////// BackLight  Brightness control test  whit RA8876's PWM0
	Enable_PWM0_Interrupt();
 800513e:	f7fd fdca 	bl	8002cd6 <Enable_PWM0_Interrupt>
	Clear_PWM0_Interrupt_Flag();
 8005142:	f7fd fdde 	bl	8002d02 <Clear_PWM0_Interrupt_Flag>
	Mask_PWM0_Interrupt_Flag();
 8005146:	f7fd fdf2 	bl	8002d2e <Mask_PWM0_Interrupt_Flag>
	Select_PWM0_Clock_Divided_By_2();
 800514a:	f7fe fb92 	bl	8003872 <Select_PWM0_Clock_Divided_By_2>
	Select_PWM0();
 800514e:	f7fe fbaa 	bl	80038a6 <Select_PWM0>
	Enable_PWM0_Dead_Zone();
 8005152:	f7fe fbc2 	bl	80038da <Enable_PWM0_Dead_Zone>
	Auto_Reload_PWM0();
 8005156:	f7fe fbd6 	bl	8003906 <Auto_Reload_PWM0>
	Start_PWM0();
 800515a:	f7fe fbea 	bl	8003932 <Start_PWM0>
	Set_Timer0_Compare_Buffer(0xffff);
 800515e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005162:	f7fe fbfc 	bl	800395e <Set_Timer0_Compare_Buffer>
	delay_ms(2000);
	Set_Timer0_Compare_Buffer(0x0ff0);
	delay_ms(2000);
	Set_Timer0_Compare_Buffer(0xffff);
	delay_ms(2000);	*/
	TPTEST();
 8005166:	f7ff fdab 	bl	8004cc0 <TPTEST>
	// 	Geometric();
	Text_Demo();
 800516a:	f7fc fe35 	bl	8001dd8 <Text_Demo>
	mono_Demo();
 800516e:	f7fc fd83 	bl	8001c78 <mono_Demo>
	gray();
 8005172:	f7fd f833 	bl	80021dc <gray>
	Display_JPG_SDCARD();
 8005176:	f000 fb23 	bl	80057c0 <Display_JPG_SDCARD>
	delay_ms(3000);
 800517a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800517e:	f7fd f998 	bl	80024b2 <delay_ms>
	DMA_Demo();
 8005182:	f7fc ffab 	bl	80020dc <DMA_Demo>
	BTE_Pattern_Fill();
 8005186:	f7fb fb87 	bl	8000898 <BTE_Pattern_Fill>
	BTE_Color_Expansion();
 800518a:	f7fb f9d7 	bl	800053c <BTE_Color_Expansion>
	PIP_Demo();
 800518e:	f7fb fccb 	bl	8000b28 <PIP_Demo>
	App_Demo_Waveform();
 8005192:	f7fb feed 	bl	8000f70 <App_Demo_Waveform>
	App_Demo_Scrolling_Text();
 8005196:	f7fc f8a3 	bl	80012e0 <App_Demo_Scrolling_Text>
	App_Demo_slide_frame_buffer();
 800519a:	f7fc fc63 	bl	8001a64 <App_Demo_slide_frame_buffer>
    App_Demo_multi_frame_buffer();
 800519e:	f7fc faeb 	bl	8001778 <App_Demo_multi_frame_buffer>
	Enable_PWM0_Interrupt();
 80051a2:	e7cc      	b.n	800513e <main+0x62>

080051a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b090      	sub	sp, #64	; 0x40
 80051a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80051aa:	f107 0318 	add.w	r3, r7, #24
 80051ae:	2228      	movs	r2, #40	; 0x28
 80051b0:	2100      	movs	r1, #0
 80051b2:	4618      	mov	r0, r3
 80051b4:	f002 fbf7 	bl	80079a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051b8:	1d3b      	adds	r3, r7, #4
 80051ba:	2200      	movs	r2, #0
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	605a      	str	r2, [r3, #4]
 80051c0:	609a      	str	r2, [r3, #8]
 80051c2:	60da      	str	r2, [r3, #12]
 80051c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80051c6:	2302      	movs	r3, #2
 80051c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80051ca:	2301      	movs	r3, #1
 80051cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80051ce:	2310      	movs	r3, #16
 80051d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051d2:	2302      	movs	r3, #2
 80051d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80051d6:	2300      	movs	r3, #0
 80051d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80051da:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80051de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051e0:	f107 0318 	add.w	r3, r7, #24
 80051e4:	4618      	mov	r0, r3
 80051e6:	f001 f89d 	bl	8006324 <HAL_RCC_OscConfig>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80051f0:	f000 f990 	bl	8005514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80051f4:	230f      	movs	r3, #15
 80051f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80051f8:	2302      	movs	r3, #2
 80051fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005204:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005206:	2300      	movs	r3, #0
 8005208:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800520a:	1d3b      	adds	r3, r7, #4
 800520c:	2102      	movs	r1, #2
 800520e:	4618      	mov	r0, r3
 8005210:	f001 fb0a 	bl	8006828 <HAL_RCC_ClockConfig>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800521a:	f000 f97b 	bl	8005514 <Error_Handler>
  }
}
 800521e:	bf00      	nop
 8005220:	3740      	adds	r7, #64	; 0x40
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b08e      	sub	sp, #56	; 0x38
 800522c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800522e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	605a      	str	r2, [r3, #4]
 8005238:	609a      	str	r2, [r3, #8]
 800523a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800523c:	f107 0320 	add.w	r3, r7, #32
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005246:	1d3b      	adds	r3, r7, #4
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	605a      	str	r2, [r3, #4]
 800524e:	609a      	str	r2, [r3, #8]
 8005250:	60da      	str	r2, [r3, #12]
 8005252:	611a      	str	r2, [r3, #16]
 8005254:	615a      	str	r2, [r3, #20]
 8005256:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005258:	4b2e      	ldr	r3, [pc, #184]	; (8005314 <MX_TIM2_Init+0xec>)
 800525a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800525e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8005260:	4b2c      	ldr	r3, [pc, #176]	; (8005314 <MX_TIM2_Init+0xec>)
 8005262:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005266:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005268:	4b2a      	ldr	r3, [pc, #168]	; (8005314 <MX_TIM2_Init+0xec>)
 800526a:	2200      	movs	r2, #0
 800526c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800526e:	4b29      	ldr	r3, [pc, #164]	; (8005314 <MX_TIM2_Init+0xec>)
 8005270:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005274:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005276:	4b27      	ldr	r3, [pc, #156]	; (8005314 <MX_TIM2_Init+0xec>)
 8005278:	2200      	movs	r2, #0
 800527a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800527c:	4b25      	ldr	r3, [pc, #148]	; (8005314 <MX_TIM2_Init+0xec>)
 800527e:	2200      	movs	r2, #0
 8005280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005282:	4824      	ldr	r0, [pc, #144]	; (8005314 <MX_TIM2_Init+0xec>)
 8005284:	f001 fc5e 	bl	8006b44 <HAL_TIM_Base_Init>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800528e:	f000 f941 	bl	8005514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005296:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005298:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800529c:	4619      	mov	r1, r3
 800529e:	481d      	ldr	r0, [pc, #116]	; (8005314 <MX_TIM2_Init+0xec>)
 80052a0:	f001 fdba 	bl	8006e18 <HAL_TIM_ConfigClockSource>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80052aa:	f000 f933 	bl	8005514 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80052ae:	4819      	ldr	r0, [pc, #100]	; (8005314 <MX_TIM2_Init+0xec>)
 80052b0:	f001 fc97 	bl	8006be2 <HAL_TIM_PWM_Init>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80052ba:	f000 f92b 	bl	8005514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052be:	2300      	movs	r3, #0
 80052c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052c2:	2300      	movs	r3, #0
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80052c6:	f107 0320 	add.w	r3, r7, #32
 80052ca:	4619      	mov	r1, r3
 80052cc:	4811      	ldr	r0, [pc, #68]	; (8005314 <MX_TIM2_Init+0xec>)
 80052ce:	f002 f8eb 	bl	80074a8 <HAL_TIMEx_MasterConfigSynchronization>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80052d8:	f000 f91c 	bl	8005514 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80052dc:	2360      	movs	r3, #96	; 0x60
 80052de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 80052e0:	f240 13f3 	movw	r3, #499	; 0x1f3
 80052e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80052e6:	2300      	movs	r3, #0
 80052e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052ea:	2300      	movs	r3, #0
 80052ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80052ee:	1d3b      	adds	r3, r7, #4
 80052f0:	220c      	movs	r2, #12
 80052f2:	4619      	mov	r1, r3
 80052f4:	4807      	ldr	r0, [pc, #28]	; (8005314 <MX_TIM2_Init+0xec>)
 80052f6:	f001 fccd 	bl	8006c94 <HAL_TIM_PWM_ConfigChannel>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8005300:	f000 f908 	bl	8005514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005304:	4803      	ldr	r0, [pc, #12]	; (8005314 <MX_TIM2_Init+0xec>)
 8005306:	f000 fb31 	bl	800596c <HAL_TIM_MspPostInit>

}
 800530a:	bf00      	nop
 800530c:	3738      	adds	r7, #56	; 0x38
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	2000016c 	.word	0x2000016c

08005318 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800531c:	4b11      	ldr	r3, [pc, #68]	; (8005364 <MX_USART2_UART_Init+0x4c>)
 800531e:	4a12      	ldr	r2, [pc, #72]	; (8005368 <MX_USART2_UART_Init+0x50>)
 8005320:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005322:	4b10      	ldr	r3, [pc, #64]	; (8005364 <MX_USART2_UART_Init+0x4c>)
 8005324:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005328:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800532a:	4b0e      	ldr	r3, [pc, #56]	; (8005364 <MX_USART2_UART_Init+0x4c>)
 800532c:	2200      	movs	r2, #0
 800532e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005330:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <MX_USART2_UART_Init+0x4c>)
 8005332:	2200      	movs	r2, #0
 8005334:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005336:	4b0b      	ldr	r3, [pc, #44]	; (8005364 <MX_USART2_UART_Init+0x4c>)
 8005338:	2200      	movs	r2, #0
 800533a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800533c:	4b09      	ldr	r3, [pc, #36]	; (8005364 <MX_USART2_UART_Init+0x4c>)
 800533e:	220c      	movs	r2, #12
 8005340:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005342:	4b08      	ldr	r3, [pc, #32]	; (8005364 <MX_USART2_UART_Init+0x4c>)
 8005344:	2200      	movs	r2, #0
 8005346:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005348:	4b06      	ldr	r3, [pc, #24]	; (8005364 <MX_USART2_UART_Init+0x4c>)
 800534a:	2200      	movs	r2, #0
 800534c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800534e:	4805      	ldr	r0, [pc, #20]	; (8005364 <MX_USART2_UART_Init+0x4c>)
 8005350:	f002 f908 	bl	8007564 <HAL_UART_Init>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800535a:	f000 f8db 	bl	8005514 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800535e:	bf00      	nop
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	200001b4 	.word	0x200001b4
 8005368:	40004400 	.word	0x40004400

0800536c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005372:	f107 0310 	add.w	r3, r7, #16
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	605a      	str	r2, [r3, #4]
 800537c:	609a      	str	r2, [r3, #8]
 800537e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005380:	4b55      	ldr	r3, [pc, #340]	; (80054d8 <MX_GPIO_Init+0x16c>)
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	4a54      	ldr	r2, [pc, #336]	; (80054d8 <MX_GPIO_Init+0x16c>)
 8005386:	f043 0310 	orr.w	r3, r3, #16
 800538a:	6193      	str	r3, [r2, #24]
 800538c:	4b52      	ldr	r3, [pc, #328]	; (80054d8 <MX_GPIO_Init+0x16c>)
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005398:	4b4f      	ldr	r3, [pc, #316]	; (80054d8 <MX_GPIO_Init+0x16c>)
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	4a4e      	ldr	r2, [pc, #312]	; (80054d8 <MX_GPIO_Init+0x16c>)
 800539e:	f043 0320 	orr.w	r3, r3, #32
 80053a2:	6193      	str	r3, [r2, #24]
 80053a4:	4b4c      	ldr	r3, [pc, #304]	; (80054d8 <MX_GPIO_Init+0x16c>)
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	f003 0320 	and.w	r3, r3, #32
 80053ac:	60bb      	str	r3, [r7, #8]
 80053ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80053b0:	4b49      	ldr	r3, [pc, #292]	; (80054d8 <MX_GPIO_Init+0x16c>)
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	4a48      	ldr	r2, [pc, #288]	; (80054d8 <MX_GPIO_Init+0x16c>)
 80053b6:	f043 0304 	orr.w	r3, r3, #4
 80053ba:	6193      	str	r3, [r2, #24]
 80053bc:	4b46      	ldr	r3, [pc, #280]	; (80054d8 <MX_GPIO_Init+0x16c>)
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	607b      	str	r3, [r7, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80053c8:	4b43      	ldr	r3, [pc, #268]	; (80054d8 <MX_GPIO_Init+0x16c>)
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	4a42      	ldr	r2, [pc, #264]	; (80054d8 <MX_GPIO_Init+0x16c>)
 80053ce:	f043 0308 	orr.w	r3, r3, #8
 80053d2:	6193      	str	r3, [r2, #24]
 80053d4:	4b40      	ldr	r3, [pc, #256]	; (80054d8 <MX_GPIO_Init+0x16c>)
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	603b      	str	r3, [r7, #0]
 80053de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SD_CS_Pin|SSD2828_SCK_Pin|SSD2828_CS_Pin
 80053e0:	2200      	movs	r2, #0
 80053e2:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 80053e6:	483d      	ldr	r0, [pc, #244]	; (80054dc <MX_GPIO_Init+0x170>)
 80053e8:	f000 ff6b 	bl	80062c2 <HAL_GPIO_WritePin>
                          |SSD2828_RST_Pin|CTP_RST_Pin|SD_DO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_RA8876_NSS_Pin|RESET_RA8876_Pin|CTP_INT_Pin|SD_CLK_Pin
 80053ec:	2200      	movs	r2, #0
 80053ee:	f24b 4136 	movw	r1, #46134	; 0xb436
 80053f2:	483b      	ldr	r0, [pc, #236]	; (80054e0 <MX_GPIO_Init+0x174>)
 80053f4:	f000 ff65 	bl	80062c2 <HAL_GPIO_WritePin>
                          |SPI_RA8876_SCK_Pin|SPI_RA8876_MOSI_Pin|CTP_SDA_Pin|CTP_SCL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSD2828_SDO_GPIO_Port, SSD2828_SDO_Pin, GPIO_PIN_RESET);
 80053f8:	2200      	movs	r2, #0
 80053fa:	2180      	movs	r1, #128	; 0x80
 80053fc:	4839      	ldr	r0, [pc, #228]	; (80054e4 <MX_GPIO_Init+0x178>)
 80053fe:	f000 ff60 	bl	80062c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005402:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005408:	4b37      	ldr	r3, [pc, #220]	; (80054e8 <MX_GPIO_Init+0x17c>)
 800540a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800540c:	2300      	movs	r3, #0
 800540e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005410:	f107 0310 	add.w	r3, r7, #16
 8005414:	4619      	mov	r1, r3
 8005416:	4833      	ldr	r0, [pc, #204]	; (80054e4 <MX_GPIO_Init+0x178>)
 8005418:	f000 fdb8 	bl	8005f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SD_CS_Pin SSD2828_SCK_Pin SSD2828_CS_Pin
                           SSD2828_RST_Pin CTP_RST_Pin SD_DO_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SD_CS_Pin|SSD2828_SCK_Pin|SSD2828_CS_Pin
 800541c:	f44f 637e 	mov.w	r3, #4064	; 0xfe0
 8005420:	613b      	str	r3, [r7, #16]
                          |SSD2828_RST_Pin|CTP_RST_Pin|SD_DO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005422:	2301      	movs	r3, #1
 8005424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005426:	2300      	movs	r3, #0
 8005428:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800542a:	2302      	movs	r3, #2
 800542c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800542e:	f107 0310 	add.w	r3, r7, #16
 8005432:	4619      	mov	r1, r3
 8005434:	4829      	ldr	r0, [pc, #164]	; (80054dc <MX_GPIO_Init+0x170>)
 8005436:	f000 fda9 	bl	8005f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_RA8876_NSS_Pin RESET_RA8876_Pin CTP_INT_Pin SD_CLK_Pin
                           SPI_RA8876_SCK_Pin SPI_RA8876_MOSI_Pin CTP_SDA_Pin CTP_SCL_Pin */
  GPIO_InitStruct.Pin = SPI_RA8876_NSS_Pin|RESET_RA8876_Pin|CTP_INT_Pin|SD_CLK_Pin
 800543a:	f24b 4336 	movw	r3, #46134	; 0xb436
 800543e:	613b      	str	r3, [r7, #16]
                          |SPI_RA8876_SCK_Pin|SPI_RA8876_MOSI_Pin|CTP_SDA_Pin|CTP_SCL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005440:	2301      	movs	r3, #1
 8005442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005444:	2300      	movs	r3, #0
 8005446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005448:	2302      	movs	r3, #2
 800544a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800544c:	f107 0310 	add.w	r3, r7, #16
 8005450:	4619      	mov	r1, r3
 8005452:	4823      	ldr	r0, [pc, #140]	; (80054e0 <MX_GPIO_Init+0x174>)
 8005454:	f000 fd9a 	bl	8005f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_RA8876_MISO_Pin */
  GPIO_InitStruct.Pin = SPI_RA8876_MISO_Pin;
 8005458:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800545c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800545e:	2300      	movs	r3, #0
 8005460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005462:	2301      	movs	r3, #1
 8005464:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_RA8876_MISO_GPIO_Port, &GPIO_InitStruct);
 8005466:	f107 0310 	add.w	r3, r7, #16
 800546a:	4619      	mov	r1, r3
 800546c:	481c      	ldr	r0, [pc, #112]	; (80054e0 <MX_GPIO_Init+0x174>)
 800546e:	f000 fd8d 	bl	8005f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : SSD2828_SDO_Pin */
  GPIO_InitStruct.Pin = SSD2828_SDO_Pin;
 8005472:	2380      	movs	r3, #128	; 0x80
 8005474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005476:	2301      	movs	r3, #1
 8005478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800547a:	2300      	movs	r3, #0
 800547c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800547e:	2302      	movs	r3, #2
 8005480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SSD2828_SDO_GPIO_Port, &GPIO_InitStruct);
 8005482:	f107 0310 	add.w	r3, r7, #16
 8005486:	4619      	mov	r1, r3
 8005488:	4816      	ldr	r0, [pc, #88]	; (80054e4 <MX_GPIO_Init+0x178>)
 800548a:	f000 fd7f 	bl	8005f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DI_Pin */
  GPIO_InitStruct.Pin = SD_DI_Pin;
 800548e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005494:	2300      	movs	r3, #0
 8005496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005498:	2300      	movs	r3, #0
 800549a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_DI_GPIO_Port, &GPIO_InitStruct);
 800549c:	f107 0310 	add.w	r3, r7, #16
 80054a0:	4619      	mov	r1, r3
 80054a2:	480e      	ldr	r0, [pc, #56]	; (80054dc <MX_GPIO_Init+0x170>)
 80054a4:	f000 fd72 	bl	8005f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : SSD2828_SDI_Pin */
  GPIO_InitStruct.Pin = SSD2828_SDI_Pin;
 80054a8:	2340      	movs	r3, #64	; 0x40
 80054aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054ac:	2300      	movs	r3, #0
 80054ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b0:	2300      	movs	r3, #0
 80054b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSD2828_SDI_GPIO_Port, &GPIO_InitStruct);
 80054b4:	f107 0310 	add.w	r3, r7, #16
 80054b8:	4619      	mov	r1, r3
 80054ba:	4809      	ldr	r0, [pc, #36]	; (80054e0 <MX_GPIO_Init+0x174>)
 80054bc:	f000 fd66 	bl	8005f8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80054c0:	2200      	movs	r2, #0
 80054c2:	2100      	movs	r1, #0
 80054c4:	2028      	movs	r0, #40	; 0x28
 80054c6:	f000 fd2a 	bl	8005f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80054ca:	2028      	movs	r0, #40	; 0x28
 80054cc:	f000 fd43 	bl	8005f56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80054d0:	bf00      	nop
 80054d2:	3720      	adds	r7, #32
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	40021000 	.word	0x40021000
 80054dc:	40010800 	.word	0x40010800
 80054e0:	40010c00 	.word	0x40010c00
 80054e4:	40011000 	.word	0x40011000
 80054e8:	10110000 	.word	0x10110000

080054ec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	4603      	mov	r3, r0
 80054f4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  if(GPIO_Pin == B1_Pin)
 80054f6:	88fb      	ldrh	r3, [r7, #6]
 80054f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054fc:	d102      	bne.n	8005504 <HAL_GPIO_EXTI_Callback+0x18>
  {
	  buttonClicked = 1;
 80054fe:	4b04      	ldr	r3, [pc, #16]	; (8005510 <HAL_GPIO_EXTI_Callback+0x24>)
 8005500:	2201      	movs	r2, #1
 8005502:	701a      	strb	r2, [r3, #0]
  }
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	bc80      	pop	{r7}
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	200001fc 	.word	0x200001fc

08005514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005518:	b672      	cpsid	i
}
 800551a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800551c:	e7fe      	b.n	800551c <Error_Handler+0x8>
	...

08005520 <SdWrite>:
unsigned char DATA[512];

//===========================================================
//write one byte to SD
void SdWrite(unsigned char n)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	4603      	mov	r3, r0
 8005528:	71fb      	strb	r3, [r7, #7]
	unsigned char i;

	for(i=8;i;i--)
 800552a:	2308      	movs	r3, #8
 800552c:	73fb      	strb	r3, [r7, #15]
 800552e:	e01a      	b.n	8005566 <SdWrite+0x46>
	{
		HAL_GPIO_WritePin(SD_CLK_GPIO_Port, SD_CLK_Pin, GPIO_PIN_RESET);
 8005530:	2200      	movs	r2, #0
 8005532:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005536:	4812      	ldr	r0, [pc, #72]	; (8005580 <SdWrite+0x60>)
 8005538:	f000 fec3 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SD_DO_GPIO_Port, SD_DO_Pin, (n&0x80)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800553c:	79fb      	ldrb	r3, [r7, #7]
 800553e:	09db      	lsrs	r3, r3, #7
 8005540:	b2db      	uxtb	r3, r3
 8005542:	461a      	mov	r2, r3
 8005544:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005548:	480e      	ldr	r0, [pc, #56]	; (8005584 <SdWrite+0x64>)
 800554a:	f000 feba 	bl	80062c2 <HAL_GPIO_WritePin>
		n<<=1;
 800554e:	79fb      	ldrb	r3, [r7, #7]
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(SD_CLK_GPIO_Port, SD_CLK_Pin, GPIO_PIN_SET);
 8005554:	2201      	movs	r2, #1
 8005556:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800555a:	4809      	ldr	r0, [pc, #36]	; (8005580 <SdWrite+0x60>)
 800555c:	f000 feb1 	bl	80062c2 <HAL_GPIO_WritePin>
	for(i=8;i;i--)
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	3b01      	subs	r3, #1
 8005564:	73fb      	strb	r3, [r7, #15]
 8005566:	7bfb      	ldrb	r3, [r7, #15]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1e1      	bne.n	8005530 <SdWrite+0x10>
	}
	HAL_GPIO_WritePin(SD_CLK_GPIO_Port, SD_CLK_Pin, GPIO_PIN_SET);
 800556c:	2201      	movs	r2, #1
 800556e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005572:	4803      	ldr	r0, [pc, #12]	; (8005580 <SdWrite+0x60>)
 8005574:	f000 fea5 	bl	80062c2 <HAL_GPIO_WritePin>
}
 8005578:	bf00      	nop
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40010c00 	.word	0x40010c00
 8005584:	40010800 	.word	0x40010800

08005588 <SdRead>:
//===========================================================
//read one byte
unsigned char SdRead()
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
	unsigned char n,i;
	for(i=8;i;i--)
 800558e:	2308      	movs	r3, #8
 8005590:	71bb      	strb	r3, [r7, #6]
 8005592:	e01d      	b.n	80055d0 <SdRead+0x48>
	{
		HAL_GPIO_WritePin(SD_CLK_GPIO_Port, SD_CLK_Pin, GPIO_PIN_RESET);
 8005594:	2200      	movs	r2, #0
 8005596:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800559a:	4811      	ldr	r0, [pc, #68]	; (80055e0 <SdRead+0x58>)
 800559c:	f000 fe91 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SD_CLK_GPIO_Port, SD_CLK_Pin, GPIO_PIN_SET);
 80055a0:	2201      	movs	r2, #1
 80055a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80055a6:	480e      	ldr	r0, [pc, #56]	; (80055e0 <SdRead+0x58>)
 80055a8:	f000 fe8b 	bl	80062c2 <HAL_GPIO_WritePin>
		n<<=1;
 80055ac:	79fb      	ldrb	r3, [r7, #7]
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	71fb      	strb	r3, [r7, #7]
		if(HAL_GPIO_ReadPin(SD_DI_GPIO_Port, SD_DI_Pin) == GPIO_PIN_SET) n|=1;
 80055b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80055b6:	480b      	ldr	r0, [pc, #44]	; (80055e4 <SdRead+0x5c>)
 80055b8:	f000 fe6c 	bl	8006294 <HAL_GPIO_ReadPin>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d103      	bne.n	80055ca <SdRead+0x42>
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	f043 0301 	orr.w	r3, r3, #1
 80055c8:	71fb      	strb	r3, [r7, #7]
	for(i=8;i;i--)
 80055ca:	79bb      	ldrb	r3, [r7, #6]
 80055cc:	3b01      	subs	r3, #1
 80055ce:	71bb      	strb	r3, [r7, #6]
 80055d0:	79bb      	ldrb	r3, [r7, #6]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1de      	bne.n	8005594 <SdRead+0xc>
	}
	return n;
 80055d6:	79fb      	ldrb	r3, [r7, #7]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	40010c00 	.word	0x40010c00
 80055e4:	40010800 	.word	0x40010800

080055e8 <SdResponse>:
//============================================================
//Detecting the response of the SD card
unsigned char SdResponse()
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
	unsigned char i=0,response;
 80055ee:	2300      	movs	r3, #0
 80055f0:	71fb      	strb	r3, [r7, #7]

	while(i<=8)
 80055f2:	e00c      	b.n	800560e <SdResponse+0x26>
	{
		response = SdRead();
 80055f4:	f7ff ffc8 	bl	8005588 <SdRead>
 80055f8:	4603      	mov	r3, r0
 80055fa:	71bb      	strb	r3, [r7, #6]
		if(response==0x00)
 80055fc:	79bb      	ldrb	r3, [r7, #6]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d009      	beq.n	8005616 <SdResponse+0x2e>
			break;
		if(response==0x01)
 8005602:	79bb      	ldrb	r3, [r7, #6]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d008      	beq.n	800561a <SdResponse+0x32>
			break;
		i++;
 8005608:	79fb      	ldrb	r3, [r7, #7]
 800560a:	3301      	adds	r3, #1
 800560c:	71fb      	strb	r3, [r7, #7]
	while(i<=8)
 800560e:	79fb      	ldrb	r3, [r7, #7]
 8005610:	2b08      	cmp	r3, #8
 8005612:	d9ef      	bls.n	80055f4 <SdResponse+0xc>
 8005614:	e002      	b.n	800561c <SdResponse+0x34>
			break;
 8005616:	bf00      	nop
 8005618:	e000      	b.n	800561c <SdResponse+0x34>
			break;
 800561a:	bf00      	nop
	}
	return response;
 800561c:	79bb      	ldrb	r3, [r7, #6]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <SdCommand>:

void SdCommand(unsigned char command, unsigned long argument, unsigned char crc)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b082      	sub	sp, #8
 800562a:	af00      	add	r7, sp, #0
 800562c:	4603      	mov	r3, r0
 800562e:	6039      	str	r1, [r7, #0]
 8005630:	71fb      	strb	r3, [r7, #7]
 8005632:	4613      	mov	r3, r2
 8005634:	71bb      	strb	r3, [r7, #6]
	SdWrite(command|0x40);
 8005636:	79fb      	ldrb	r3, [r7, #7]
 8005638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800563c:	b2db      	uxtb	r3, r3
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff ff6e 	bl	8005520 <SdWrite>
	SdWrite(((unsigned char *)&argument)[0]);
 8005644:	463b      	mov	r3, r7
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff ff69 	bl	8005520 <SdWrite>
	SdWrite(((unsigned char *)&argument)[1]);
 800564e:	463b      	mov	r3, r7
 8005650:	3301      	adds	r3, #1
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	4618      	mov	r0, r3
 8005656:	f7ff ff63 	bl	8005520 <SdWrite>
	SdWrite(((unsigned char *)&argument)[2]);
 800565a:	463b      	mov	r3, r7
 800565c:	3302      	adds	r3, #2
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	4618      	mov	r0, r3
 8005662:	f7ff ff5d 	bl	8005520 <SdWrite>
	SdWrite(((unsigned char *)&argument)[3]);
 8005666:	463b      	mov	r3, r7
 8005668:	3303      	adds	r3, #3
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff ff57 	bl	8005520 <SdWrite>
	SdWrite(crc);
 8005672:	79bb      	ldrb	r3, [r7, #6]
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff ff53 	bl	8005520 <SdWrite>
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
	...

08005684 <SdInit>:

unsigned char SdInit(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
	unsigned char i;
	unsigned char response=0x01;
 800568a:	2301      	movs	r3, #1
 800568c:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800568e:	2201      	movs	r2, #1
 8005690:	2140      	movs	r1, #64	; 0x40
 8005692:	4824      	ldr	r0, [pc, #144]	; (8005724 <SdInit+0xa0>)
 8005694:	f000 fe15 	bl	80062c2 <HAL_GPIO_WritePin>
	for(i=0;i<=9;i++)
 8005698:	2300      	movs	r3, #0
 800569a:	71fb      	strb	r3, [r7, #7]
 800569c:	e005      	b.n	80056aa <SdInit+0x26>
	SdWrite(0xff);
 800569e:	20ff      	movs	r0, #255	; 0xff
 80056a0:	f7ff ff3e 	bl	8005520 <SdWrite>
	for(i=0;i<=9;i++)
 80056a4:	79fb      	ldrb	r3, [r7, #7]
 80056a6:	3301      	adds	r3, #1
 80056a8:	71fb      	strb	r3, [r7, #7]
 80056aa:	79fb      	ldrb	r3, [r7, #7]
 80056ac:	2b09      	cmp	r3, #9
 80056ae:	d9f6      	bls.n	800569e <SdInit+0x1a>
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80056b0:	2200      	movs	r2, #0
 80056b2:	2140      	movs	r1, #64	; 0x40
 80056b4:	481b      	ldr	r0, [pc, #108]	; (8005724 <SdInit+0xa0>)
 80056b6:	f000 fe04 	bl	80062c2 <HAL_GPIO_WritePin>
	//Send Command 0 to put MMC in SPI mode
	SdCommand(0x00,0,0x95);
 80056ba:	2295      	movs	r2, #149	; 0x95
 80056bc:	2100      	movs	r1, #0
 80056be:	2000      	movs	r0, #0
 80056c0:	f7ff ffb1 	bl	8005626 <SdCommand>

	response=SdResponse();
 80056c4:	f7ff ff90 	bl	80055e8 <SdResponse>
 80056c8:	4603      	mov	r3, r0
 80056ca:	71bb      	strb	r3, [r7, #6]

	if(response!=0x01)
 80056cc:	79bb      	ldrb	r3, [r7, #6]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d017      	beq.n	8005702 <SdInit+0x7e>
	{
		return 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	e021      	b.n	800571a <SdInit+0x96>
	}

	while(response==0x01)
	{
		HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80056d6:	2201      	movs	r2, #1
 80056d8:	2140      	movs	r1, #64	; 0x40
 80056da:	4812      	ldr	r0, [pc, #72]	; (8005724 <SdInit+0xa0>)
 80056dc:	f000 fdf1 	bl	80062c2 <HAL_GPIO_WritePin>
		SdWrite(0xff);
 80056e0:	20ff      	movs	r0, #255	; 0xff
 80056e2:	f7ff ff1d 	bl	8005520 <SdWrite>
		HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80056e6:	2200      	movs	r2, #0
 80056e8:	2140      	movs	r1, #64	; 0x40
 80056ea:	480e      	ldr	r0, [pc, #56]	; (8005724 <SdInit+0xa0>)
 80056ec:	f000 fde9 	bl	80062c2 <HAL_GPIO_WritePin>
		SdCommand(0x01,0x00ffc000,0xff);
 80056f0:	22ff      	movs	r2, #255	; 0xff
 80056f2:	490d      	ldr	r1, [pc, #52]	; (8005728 <SdInit+0xa4>)
 80056f4:	2001      	movs	r0, #1
 80056f6:	f7ff ff96 	bl	8005626 <SdCommand>
		response=SdResponse();
 80056fa:	f7ff ff75 	bl	80055e8 <SdResponse>
 80056fe:	4603      	mov	r3, r0
 8005700:	71bb      	strb	r3, [r7, #6]
	while(response==0x01)
 8005702:	79bb      	ldrb	r3, [r7, #6]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d0e6      	beq.n	80056d6 <SdInit+0x52>
	}

	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8005708:	2201      	movs	r2, #1
 800570a:	2140      	movs	r1, #64	; 0x40
 800570c:	4805      	ldr	r0, [pc, #20]	; (8005724 <SdInit+0xa0>)
 800570e:	f000 fdd8 	bl	80062c2 <HAL_GPIO_WritePin>
	SdWrite(0xff);
 8005712:	20ff      	movs	r0, #255	; 0xff
 8005714:	f7ff ff04 	bl	8005520 <SdWrite>
	return 1;
 8005718:	2301      	movs	r3, #1
}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	40010800 	.word	0x40010800
 8005728:	00ffc000 	.word	0x00ffc000

0800572c <SdReadBlock>:
}

//=======================================================================
//Specified address from the SD card to read data, a maximum of 512 bytes
unsigned char SdReadBlock(unsigned char *Block, unsigned long address,int len)
{
 800572c:	b590      	push	{r4, r7, lr}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
	//Block size is 512 bytes exactly
	//First Lower SS

	 //printf("MMC_read_block\n");

	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8005738:	2200      	movs	r2, #0
 800573a:	2140      	movs	r1, #64	; 0x40
 800573c:	481f      	ldr	r0, [pc, #124]	; (80057bc <SdReadBlock+0x90>)
 800573e:	f000 fdc0 	bl	80062c2 <HAL_GPIO_WritePin>
	//Then send write command
	SdCommand(0x11,address,0xff);
 8005742:	22ff      	movs	r2, #255	; 0xff
 8005744:	68b9      	ldr	r1, [r7, #8]
 8005746:	2011      	movs	r0, #17
 8005748:	f7ff ff6d 	bl	8005626 <SdCommand>

	if(SdResponse()==00)
 800574c:	f7ff ff4c 	bl	80055e8 <SdResponse>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d12d      	bne.n	80057b2 <SdReadBlock+0x86>
	{
		//command was a success - now send data
		//start with DATA TOKEN = 0xFE
		while(SdRead()!=0xfe);
 8005756:	bf00      	nop
 8005758:	f7ff ff16 	bl	8005588 <SdRead>
 800575c:	4603      	mov	r3, r0
 800575e:	2bfe      	cmp	r3, #254	; 0xfe
 8005760:	d1fa      	bne.n	8005758 <SdReadBlock+0x2c>

		for(count=0;count<len;count++) *Block++=SdRead();
 8005762:	2300      	movs	r3, #0
 8005764:	617b      	str	r3, [r7, #20]
 8005766:	e009      	b.n	800577c <SdReadBlock+0x50>
 8005768:	68fc      	ldr	r4, [r7, #12]
 800576a:	1c63      	adds	r3, r4, #1
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	f7ff ff0b 	bl	8005588 <SdRead>
 8005772:	4603      	mov	r3, r0
 8005774:	7023      	strb	r3, [r4, #0]
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	3301      	adds	r3, #1
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	429a      	cmp	r2, r3
 8005782:	d3f1      	bcc.n	8005768 <SdReadBlock+0x3c>

		for(;count<512;count++) SdRead();
 8005784:	e004      	b.n	8005790 <SdReadBlock+0x64>
 8005786:	f7ff feff 	bl	8005588 <SdRead>
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	3301      	adds	r3, #1
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005796:	d3f6      	bcc.n	8005786 <SdReadBlock+0x5a>

		//data block sent - now send checksum
		SdRead();
 8005798:	f7ff fef6 	bl	8005588 <SdRead>
		SdRead();
 800579c:	f7ff fef4 	bl	8005588 <SdRead>
		//Now read in the DATA RESPONSE token
		HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80057a0:	2201      	movs	r2, #1
 80057a2:	2140      	movs	r1, #64	; 0x40
 80057a4:	4805      	ldr	r0, [pc, #20]	; (80057bc <SdReadBlock+0x90>)
 80057a6:	f000 fd8c 	bl	80062c2 <HAL_GPIO_WritePin>
		SdRead();
 80057aa:	f7ff feed 	bl	8005588 <SdRead>
		return 1;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e000      	b.n	80057b4 <SdReadBlock+0x88>
	}
	 //printf("Command 0x11 (Read) was not received by the MMC.\n");
	return 0;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	371c      	adds	r7, #28
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd90      	pop	{r4, r7, pc}
 80057bc:	40010800 	.word	0x40010800

080057c0 <Display_JPG_SDCARD>:


void Display_JPG_SDCARD()///SD card physical address of the first data address initial value
{ unsigned long jn;
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
  unsigned int in;
 // unsigned long AddTemp=314880;///SD card physical address of the first data address initial value  1G CARD
  unsigned long AddTemp=4456448;///SD card physical address of the first data address initial value    256M CARD
 80057c6:	f44f 0388 	mov.w	r3, #4456448	; 0x440000
 80057ca:	607b      	str	r3, [r7, #4]
  unsigned char mn=3;  //Total number of picture
 80057cc:	2303      	movs	r3, #3
 80057ce:	70fb      	strb	r3, [r7, #3]


    Select_Main_Window_16bpp();
 80057d0:	f7fd fb47 	bl	8002e62 <Select_Main_Window_16bpp>
	Main_Image_Start_Address(0);
 80057d4:	2000      	movs	r0, #0
 80057d6:	f7fd fd5e 	bl	8003296 <Main_Image_Start_Address>
	Main_Image_Width(400);
 80057da:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80057de:	f7fd fd7d 	bl	80032dc <Main_Image_Width>
	Main_Window_Start_XY(0,0);
 80057e2:	2100      	movs	r1, #0
 80057e4:	2000      	movs	r0, #0
 80057e6:	f7fd fd90 	bl	800330a <Main_Window_Start_XY>

	Canvas_Image_Start_address(0);//Layer 1
 80057ea:	2000      	movs	r0, #0
 80057ec:	f7fd febf 	bl	800356e <Canvas_Image_Start_address>
	Canvas_image_width(400);//
 80057f0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80057f4:	f7fd fede 	bl	80035b4 <Canvas_image_width>
    Active_Window_XY(0,0);
 80057f8:	2100      	movs	r1, #0
 80057fa:	2000      	movs	r0, #0
 80057fc:	f7fd fef1 	bl	80035e2 <Active_Window_XY>
	Active_Window_WH(400,1280);
 8005800:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8005804:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005808:	f7fd ff13 	bl	8003632 <Active_Window_WH>

	Foreground_color_65k(Blue);
 800580c:	201f      	movs	r0, #31
 800580e:	f7fe fdbf 	bl	8004390 <Foreground_color_65k>
	Line_Start_XY(0,0);
 8005812:	2100      	movs	r1, #0
 8005814:	2000      	movs	r0, #0
 8005816:	f7fd ffc0 	bl	800379a <Line_Start_XY>
	Line_End_XY(399,1279);
 800581a:	f240 41ff 	movw	r1, #1279	; 0x4ff
 800581e:	f240 108f 	movw	r0, #399	; 0x18f
 8005822:	f7fd ffea 	bl	80037fa <Line_End_XY>
	Start_Square_Fill();
 8005826:	f7fe f818 	bl	800385a <Start_Square_Fill>

	buttonClicked = 0;
 800582a:	4b27      	ldr	r3, [pc, #156]	; (80058c8 <Display_JPG_SDCARD+0x108>)
 800582c:	2200      	movs	r2, #0
 800582e:	701a      	strb	r2, [r3, #0]
 		SdInit();
 8005830:	f7ff ff28 	bl	8005684 <SdInit>
	for(;mn!=0;mn--)
 8005834:	e040      	b.n	80058b8 <Display_JPG_SDCARD+0xf8>
	 {
      	LCD_SetCursor(0,0);
 8005836:	2100      	movs	r1, #0
 8005838:	2000      	movs	r0, #0
 800583a:	f7fd f843 	bl	80028c4 <LCD_SetCursor>
     //	LCD_CmdWrite(0x04); //

	 	for(jn=0;jn<2000;jn++)      //A picture information  comprising 2400x512 bytes
 800583e:	2300      	movs	r3, #0
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	e02a      	b.n	800589a <Display_JPG_SDCARD+0xda>
		    {
		    SdReadBlock(DATA,AddTemp+(jn*512),512);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	025a      	lsls	r2, r3, #9
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4413      	add	r3, r2
 800584c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005850:	4619      	mov	r1, r3
 8005852:	481e      	ldr	r0, [pc, #120]	; (80058cc <Display_JPG_SDCARD+0x10c>)
 8005854:	f7ff ff6a 	bl	800572c <SdReadBlock>
		   	LCD_WriteRAM_Prepare();
 8005858:	f7fc ff6e 	bl	8002738 <LCD_WriteRAM_Prepare>
		    for(in=0;in<512;in+=2)
 800585c:	2300      	movs	r3, #0
 800585e:	60bb      	str	r3, [r7, #8]
 8005860:	e010      	b.n	8005884 <Display_JPG_SDCARD+0xc4>
			   {
			    LCD_DataWrite(DATA[in+1]);
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	3301      	adds	r3, #1
 8005866:	4a19      	ldr	r2, [pc, #100]	; (80058cc <Display_JPG_SDCARD+0x10c>)
 8005868:	5cd3      	ldrb	r3, [r2, r3]
 800586a:	4618      	mov	r0, r3
 800586c:	f7fc fed8 	bl	8002620 <LCD_DataWrite>
			    LCD_DataWrite(DATA[in]);
 8005870:	4a16      	ldr	r2, [pc, #88]	; (80058cc <Display_JPG_SDCARD+0x10c>)
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	4413      	add	r3, r2
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	4618      	mov	r0, r3
 800587a:	f7fc fed1 	bl	8002620 <LCD_DataWrite>
		    for(in=0;in<512;in+=2)
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	3302      	adds	r3, #2
 8005882:	60bb      	str	r3, [r7, #8]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800588a:	d3ea      	bcc.n	8005862 <Display_JPG_SDCARD+0xa2>
		       }

			    if(buttonClicked) return;
 800588c:	4b0e      	ldr	r3, [pc, #56]	; (80058c8 <Display_JPG_SDCARD+0x108>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d115      	bne.n	80058c0 <Display_JPG_SDCARD+0x100>
	 	for(jn=0;jn<2000;jn++)      //A picture information  comprising 2400x512 bytes
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3301      	adds	r3, #1
 8005898:	60fb      	str	r3, [r7, #12]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80058a0:	d3d0      	bcc.n	8005844 <Display_JPG_SDCARD+0x84>
		     }
		     AddTemp = AddTemp+((jn+16)*512);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3310      	adds	r3, #16
 80058a6:	025b      	lsls	r3, r3, #9
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	4413      	add	r3, r2
 80058ac:	607b      	str	r3, [r7, #4]

		 	NextStep();
 80058ae:	f7fc fdcf 	bl	8002450 <NextStep>
	for(;mn!=0;mn--)
 80058b2:	78fb      	ldrb	r3, [r7, #3]
 80058b4:	3b01      	subs	r3, #1
 80058b6:	70fb      	strb	r3, [r7, #3]
 80058b8:	78fb      	ldrb	r3, [r7, #3]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1bb      	bne.n	8005836 <Display_JPG_SDCARD+0x76>
 80058be:	e000      	b.n	80058c2 <Display_JPG_SDCARD+0x102>
			    if(buttonClicked) return;
 80058c0:	bf00      	nop
	}
}
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	200001fc 	.word	0x200001fc
 80058cc:	20000200 	.word	0x20000200

080058d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80058d6:	4b15      	ldr	r3, [pc, #84]	; (800592c <HAL_MspInit+0x5c>)
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	4a14      	ldr	r2, [pc, #80]	; (800592c <HAL_MspInit+0x5c>)
 80058dc:	f043 0301 	orr.w	r3, r3, #1
 80058e0:	6193      	str	r3, [r2, #24]
 80058e2:	4b12      	ldr	r3, [pc, #72]	; (800592c <HAL_MspInit+0x5c>)
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	60bb      	str	r3, [r7, #8]
 80058ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80058ee:	4b0f      	ldr	r3, [pc, #60]	; (800592c <HAL_MspInit+0x5c>)
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	4a0e      	ldr	r2, [pc, #56]	; (800592c <HAL_MspInit+0x5c>)
 80058f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f8:	61d3      	str	r3, [r2, #28]
 80058fa:	4b0c      	ldr	r3, [pc, #48]	; (800592c <HAL_MspInit+0x5c>)
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005902:	607b      	str	r3, [r7, #4]
 8005904:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005906:	4b0a      	ldr	r3, [pc, #40]	; (8005930 <HAL_MspInit+0x60>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005912:	60fb      	str	r3, [r7, #12]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800591a:	60fb      	str	r3, [r7, #12]
 800591c:	4a04      	ldr	r2, [pc, #16]	; (8005930 <HAL_MspInit+0x60>)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005922:	bf00      	nop
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	bc80      	pop	{r7}
 800592a:	4770      	bx	lr
 800592c:	40021000 	.word	0x40021000
 8005930:	40010000 	.word	0x40010000

08005934 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005944:	d10b      	bne.n	800595e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005946:	4b08      	ldr	r3, [pc, #32]	; (8005968 <HAL_TIM_Base_MspInit+0x34>)
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	4a07      	ldr	r2, [pc, #28]	; (8005968 <HAL_TIM_Base_MspInit+0x34>)
 800594c:	f043 0301 	orr.w	r3, r3, #1
 8005950:	61d3      	str	r3, [r2, #28]
 8005952:	4b05      	ldr	r3, [pc, #20]	; (8005968 <HAL_TIM_Base_MspInit+0x34>)
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	bc80      	pop	{r7}
 8005966:	4770      	bx	lr
 8005968:	40021000 	.word	0x40021000

0800596c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b088      	sub	sp, #32
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005974:	f107 030c 	add.w	r3, r7, #12
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	605a      	str	r2, [r3, #4]
 800597e:	609a      	str	r2, [r3, #8]
 8005980:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800598a:	d12a      	bne.n	80059e2 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800598c:	4b17      	ldr	r3, [pc, #92]	; (80059ec <HAL_TIM_MspPostInit+0x80>)
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	4a16      	ldr	r2, [pc, #88]	; (80059ec <HAL_TIM_MspPostInit+0x80>)
 8005992:	f043 0308 	orr.w	r3, r3, #8
 8005996:	6193      	str	r3, [r2, #24]
 8005998:	4b14      	ldr	r3, [pc, #80]	; (80059ec <HAL_TIM_MspPostInit+0x80>)
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f003 0308 	and.w	r3, r3, #8
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80059a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059aa:	2302      	movs	r3, #2
 80059ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059ae:	2302      	movs	r3, #2
 80059b0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059b2:	f107 030c 	add.w	r3, r7, #12
 80059b6:	4619      	mov	r1, r3
 80059b8:	480d      	ldr	r0, [pc, #52]	; (80059f0 <HAL_TIM_MspPostInit+0x84>)
 80059ba:	f000 fae7 	bl	8005f8c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80059be:	4b0d      	ldr	r3, [pc, #52]	; (80059f4 <HAL_TIM_MspPostInit+0x88>)
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	61fb      	str	r3, [r7, #28]
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ca:	61fb      	str	r3, [r7, #28]
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80059d2:	61fb      	str	r3, [r7, #28]
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059da:	61fb      	str	r3, [r7, #28]
 80059dc:	4a05      	ldr	r2, [pc, #20]	; (80059f4 <HAL_TIM_MspPostInit+0x88>)
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80059e2:	bf00      	nop
 80059e4:	3720      	adds	r7, #32
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	40021000 	.word	0x40021000
 80059f0:	40010c00 	.word	0x40010c00
 80059f4:	40010000 	.word	0x40010000

080059f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a00:	f107 0310 	add.w	r3, r7, #16
 8005a04:	2200      	movs	r2, #0
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	605a      	str	r2, [r3, #4]
 8005a0a:	609a      	str	r2, [r3, #8]
 8005a0c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a15      	ldr	r2, [pc, #84]	; (8005a68 <HAL_UART_MspInit+0x70>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d123      	bne.n	8005a60 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005a18:	4b14      	ldr	r3, [pc, #80]	; (8005a6c <HAL_UART_MspInit+0x74>)
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	4a13      	ldr	r2, [pc, #76]	; (8005a6c <HAL_UART_MspInit+0x74>)
 8005a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a22:	61d3      	str	r3, [r2, #28]
 8005a24:	4b11      	ldr	r3, [pc, #68]	; (8005a6c <HAL_UART_MspInit+0x74>)
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a2c:	60fb      	str	r3, [r7, #12]
 8005a2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a30:	4b0e      	ldr	r3, [pc, #56]	; (8005a6c <HAL_UART_MspInit+0x74>)
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	4a0d      	ldr	r2, [pc, #52]	; (8005a6c <HAL_UART_MspInit+0x74>)
 8005a36:	f043 0304 	orr.w	r3, r3, #4
 8005a3a:	6193      	str	r3, [r2, #24]
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	; (8005a6c <HAL_UART_MspInit+0x74>)
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	f003 0304 	and.w	r3, r3, #4
 8005a44:	60bb      	str	r3, [r7, #8]
 8005a46:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005a48:	230c      	movs	r3, #12
 8005a4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a50:	2302      	movs	r3, #2
 8005a52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a54:	f107 0310 	add.w	r3, r7, #16
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4805      	ldr	r0, [pc, #20]	; (8005a70 <HAL_UART_MspInit+0x78>)
 8005a5c:	f000 fa96 	bl	8005f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005a60:	bf00      	nop
 8005a62:	3720      	adds	r7, #32
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	40004400 	.word	0x40004400
 8005a6c:	40021000 	.word	0x40021000
 8005a70:	40010800 	.word	0x40010800

08005a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005a78:	e7fe      	b.n	8005a78 <NMI_Handler+0x4>

08005a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a7e:	e7fe      	b.n	8005a7e <HardFault_Handler+0x4>

08005a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a80:	b480      	push	{r7}
 8005a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a84:	e7fe      	b.n	8005a84 <MemManage_Handler+0x4>

08005a86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a86:	b480      	push	{r7}
 8005a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a8a:	e7fe      	b.n	8005a8a <BusFault_Handler+0x4>

08005a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a90:	e7fe      	b.n	8005a90 <UsageFault_Handler+0x4>

08005a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005a92:	b480      	push	{r7}
 8005a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005a96:	bf00      	nop
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bc80      	pop	{r7}
 8005a9c:	4770      	bx	lr

08005a9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005aa2:	bf00      	nop
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bc80      	pop	{r7}
 8005aa8:	4770      	bx	lr

08005aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005aae:	bf00      	nop
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bc80      	pop	{r7}
 8005ab4:	4770      	bx	lr

08005ab6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005aba:	f000 f93d 	bl	8005d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005abe:	bf00      	nop
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005ac6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005aca:	f000 fc13 	bl	80062f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005ace:	bf00      	nop
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	af00      	add	r7, sp, #0
  return 1;
 8005ad6:	2301      	movs	r3, #1
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bc80      	pop	{r7}
 8005ade:	4770      	bx	lr

08005ae0 <_kill>:

int _kill(int pid, int sig)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005aea:	f001 ffab 	bl	8007a44 <__errno>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2216      	movs	r2, #22
 8005af2:	601a      	str	r2, [r3, #0]
  return -1;
 8005af4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <_exit>:

void _exit (int status)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005b08:	f04f 31ff 	mov.w	r1, #4294967295
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff ffe7 	bl	8005ae0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005b12:	e7fe      	b.n	8005b12 <_exit+0x12>

08005b14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b20:	2300      	movs	r3, #0
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	e00a      	b.n	8005b3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005b26:	f3af 8000 	nop.w
 8005b2a:	4601      	mov	r1, r0
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	1c5a      	adds	r2, r3, #1
 8005b30:	60ba      	str	r2, [r7, #8]
 8005b32:	b2ca      	uxtb	r2, r1
 8005b34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	dbf0      	blt.n	8005b26 <_read+0x12>
  }

  return len;
 8005b44:	687b      	ldr	r3, [r7, #4]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b086      	sub	sp, #24
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	617b      	str	r3, [r7, #20]
 8005b5e:	e009      	b.n	8005b74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	60ba      	str	r2, [r7, #8]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	3301      	adds	r3, #1
 8005b72:	617b      	str	r3, [r7, #20]
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	dbf1      	blt.n	8005b60 <_write+0x12>
  }
  return len;
 8005b7c:	687b      	ldr	r3, [r7, #4]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3718      	adds	r7, #24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <_close>:

int _close(int file)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005b8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bc80      	pop	{r7}
 8005b9a:	4770      	bx	lr

08005b9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005bac:	605a      	str	r2, [r3, #4]
  return 0;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc80      	pop	{r7}
 8005bb8:	4770      	bx	lr

08005bba <_isatty>:

int _isatty(int file)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005bc2:	2301      	movs	r3, #1
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bc80      	pop	{r7}
 8005bcc:	4770      	bx	lr

08005bce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b085      	sub	sp, #20
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bc80      	pop	{r7}
 8005be4:	4770      	bx	lr
	...

08005be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005bf0:	4a14      	ldr	r2, [pc, #80]	; (8005c44 <_sbrk+0x5c>)
 8005bf2:	4b15      	ldr	r3, [pc, #84]	; (8005c48 <_sbrk+0x60>)
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005bfc:	4b13      	ldr	r3, [pc, #76]	; (8005c4c <_sbrk+0x64>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d102      	bne.n	8005c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005c04:	4b11      	ldr	r3, [pc, #68]	; (8005c4c <_sbrk+0x64>)
 8005c06:	4a12      	ldr	r2, [pc, #72]	; (8005c50 <_sbrk+0x68>)
 8005c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005c0a:	4b10      	ldr	r3, [pc, #64]	; (8005c4c <_sbrk+0x64>)
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4413      	add	r3, r2
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d207      	bcs.n	8005c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005c18:	f001 ff14 	bl	8007a44 <__errno>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	220c      	movs	r2, #12
 8005c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005c22:	f04f 33ff 	mov.w	r3, #4294967295
 8005c26:	e009      	b.n	8005c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005c28:	4b08      	ldr	r3, [pc, #32]	; (8005c4c <_sbrk+0x64>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005c2e:	4b07      	ldr	r3, [pc, #28]	; (8005c4c <_sbrk+0x64>)
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4413      	add	r3, r2
 8005c36:	4a05      	ldr	r2, [pc, #20]	; (8005c4c <_sbrk+0x64>)
 8005c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	20005000 	.word	0x20005000
 8005c48:	00000400 	.word	0x00000400
 8005c4c:	20000400 	.word	0x20000400
 8005c50:	20000558 	.word	0x20000558

08005c54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005c58:	bf00      	nop
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr

08005c60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005c60:	f7ff fff8 	bl	8005c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005c64:	480b      	ldr	r0, [pc, #44]	; (8005c94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005c66:	490c      	ldr	r1, [pc, #48]	; (8005c98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005c68:	4a0c      	ldr	r2, [pc, #48]	; (8005c9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8005c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c6c:	e002      	b.n	8005c74 <LoopCopyDataInit>

08005c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c72:	3304      	adds	r3, #4

08005c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c78:	d3f9      	bcc.n	8005c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c7a:	4a09      	ldr	r2, [pc, #36]	; (8005ca0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005c7c:	4c09      	ldr	r4, [pc, #36]	; (8005ca4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c80:	e001      	b.n	8005c86 <LoopFillZerobss>

08005c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c84:	3204      	adds	r2, #4

08005c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c88:	d3fb      	bcc.n	8005c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005c8a:	f001 fee1 	bl	8007a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005c8e:	f7ff fa25 	bl	80050dc <main>
  bx lr
 8005c92:	4770      	bx	lr
  ldr r0, =_sdata
 8005c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005c98:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8005c9c:	08010634 	.word	0x08010634
  ldr r2, =_sbss
 8005ca0:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 8005ca4:	20000554 	.word	0x20000554

08005ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005ca8:	e7fe      	b.n	8005ca8 <ADC1_2_IRQHandler>
	...

08005cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005cb0:	4b08      	ldr	r3, [pc, #32]	; (8005cd4 <HAL_Init+0x28>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a07      	ldr	r2, [pc, #28]	; (8005cd4 <HAL_Init+0x28>)
 8005cb6:	f043 0310 	orr.w	r3, r3, #16
 8005cba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005cbc:	2003      	movs	r0, #3
 8005cbe:	f000 f923 	bl	8005f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005cc2:	2000      	movs	r0, #0
 8005cc4:	f000 f808 	bl	8005cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005cc8:	f7ff fe02 	bl	80058d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	40022000 	.word	0x40022000

08005cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005ce0:	4b12      	ldr	r3, [pc, #72]	; (8005d2c <HAL_InitTick+0x54>)
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	4b12      	ldr	r3, [pc, #72]	; (8005d30 <HAL_InitTick+0x58>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	4619      	mov	r1, r3
 8005cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 f93b 	bl	8005f72 <HAL_SYSTICK_Config>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e00e      	b.n	8005d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b0f      	cmp	r3, #15
 8005d0a:	d80a      	bhi.n	8005d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	f04f 30ff 	mov.w	r0, #4294967295
 8005d14:	f000 f903 	bl	8005f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d18:	4a06      	ldr	r2, [pc, #24]	; (8005d34 <HAL_InitTick+0x5c>)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	e000      	b.n	8005d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	200000bc 	.word	0x200000bc
 8005d30:	200000c4 	.word	0x200000c4
 8005d34:	200000c0 	.word	0x200000c0

08005d38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d3c:	4b05      	ldr	r3, [pc, #20]	; (8005d54 <HAL_IncTick+0x1c>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	461a      	mov	r2, r3
 8005d42:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <HAL_IncTick+0x20>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4413      	add	r3, r2
 8005d48:	4a03      	ldr	r2, [pc, #12]	; (8005d58 <HAL_IncTick+0x20>)
 8005d4a:	6013      	str	r3, [r2, #0]
}
 8005d4c:	bf00      	nop
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bc80      	pop	{r7}
 8005d52:	4770      	bx	lr
 8005d54:	200000c4 	.word	0x200000c4
 8005d58:	20000404 	.word	0x20000404

08005d5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8005d60:	4b02      	ldr	r3, [pc, #8]	; (8005d6c <HAL_GetTick+0x10>)
 8005d62:	681b      	ldr	r3, [r3, #0]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bc80      	pop	{r7}
 8005d6a:	4770      	bx	lr
 8005d6c:	20000404 	.word	0x20000404

08005d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f003 0307 	and.w	r3, r3, #7
 8005d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d80:	4b0c      	ldr	r3, [pc, #48]	; (8005db4 <__NVIC_SetPriorityGrouping+0x44>)
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005da2:	4a04      	ldr	r2, [pc, #16]	; (8005db4 <__NVIC_SetPriorityGrouping+0x44>)
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	60d3      	str	r3, [r2, #12]
}
 8005da8:	bf00      	nop
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bc80      	pop	{r7}
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	e000ed00 	.word	0xe000ed00

08005db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005db8:	b480      	push	{r7}
 8005dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005dbc:	4b04      	ldr	r3, [pc, #16]	; (8005dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	0a1b      	lsrs	r3, r3, #8
 8005dc2:	f003 0307 	and.w	r3, r3, #7
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bc80      	pop	{r7}
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	e000ed00 	.word	0xe000ed00

08005dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	4603      	mov	r3, r0
 8005ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	db0b      	blt.n	8005dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005de6:	79fb      	ldrb	r3, [r7, #7]
 8005de8:	f003 021f 	and.w	r2, r3, #31
 8005dec:	4906      	ldr	r1, [pc, #24]	; (8005e08 <__NVIC_EnableIRQ+0x34>)
 8005dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005df2:	095b      	lsrs	r3, r3, #5
 8005df4:	2001      	movs	r0, #1
 8005df6:	fa00 f202 	lsl.w	r2, r0, r2
 8005dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005dfe:	bf00      	nop
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bc80      	pop	{r7}
 8005e06:	4770      	bx	lr
 8005e08:	e000e100 	.word	0xe000e100

08005e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	4603      	mov	r3, r0
 8005e14:	6039      	str	r1, [r7, #0]
 8005e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	db0a      	blt.n	8005e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	490c      	ldr	r1, [pc, #48]	; (8005e58 <__NVIC_SetPriority+0x4c>)
 8005e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e2a:	0112      	lsls	r2, r2, #4
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	440b      	add	r3, r1
 8005e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e34:	e00a      	b.n	8005e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	4908      	ldr	r1, [pc, #32]	; (8005e5c <__NVIC_SetPriority+0x50>)
 8005e3c:	79fb      	ldrb	r3, [r7, #7]
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	3b04      	subs	r3, #4
 8005e44:	0112      	lsls	r2, r2, #4
 8005e46:	b2d2      	uxtb	r2, r2
 8005e48:	440b      	add	r3, r1
 8005e4a:	761a      	strb	r2, [r3, #24]
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bc80      	pop	{r7}
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	e000e100 	.word	0xe000e100
 8005e5c:	e000ed00 	.word	0xe000ed00

08005e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b089      	sub	sp, #36	; 0x24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f003 0307 	and.w	r3, r3, #7
 8005e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	f1c3 0307 	rsb	r3, r3, #7
 8005e7a:	2b04      	cmp	r3, #4
 8005e7c:	bf28      	it	cs
 8005e7e:	2304      	movcs	r3, #4
 8005e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	3304      	adds	r3, #4
 8005e86:	2b06      	cmp	r3, #6
 8005e88:	d902      	bls.n	8005e90 <NVIC_EncodePriority+0x30>
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	3b03      	subs	r3, #3
 8005e8e:	e000      	b.n	8005e92 <NVIC_EncodePriority+0x32>
 8005e90:	2300      	movs	r3, #0
 8005e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e94:	f04f 32ff 	mov.w	r2, #4294967295
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9e:	43da      	mvns	r2, r3
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	401a      	ands	r2, r3
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb2:	43d9      	mvns	r1, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005eb8:	4313      	orrs	r3, r2
         );
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3724      	adds	r7, #36	; 0x24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bc80      	pop	{r7}
 8005ec2:	4770      	bx	lr

08005ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ed4:	d301      	bcc.n	8005eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e00f      	b.n	8005efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005eda:	4a0a      	ldr	r2, [pc, #40]	; (8005f04 <SysTick_Config+0x40>)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ee2:	210f      	movs	r1, #15
 8005ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee8:	f7ff ff90 	bl	8005e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005eec:	4b05      	ldr	r3, [pc, #20]	; (8005f04 <SysTick_Config+0x40>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ef2:	4b04      	ldr	r3, [pc, #16]	; (8005f04 <SysTick_Config+0x40>)
 8005ef4:	2207      	movs	r2, #7
 8005ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	e000e010 	.word	0xe000e010

08005f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff ff2d 	bl	8005d70 <__NVIC_SetPriorityGrouping>
}
 8005f16:	bf00      	nop
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b086      	sub	sp, #24
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	4603      	mov	r3, r0
 8005f26:	60b9      	str	r1, [r7, #8]
 8005f28:	607a      	str	r2, [r7, #4]
 8005f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f30:	f7ff ff42 	bl	8005db8 <__NVIC_GetPriorityGrouping>
 8005f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	68b9      	ldr	r1, [r7, #8]
 8005f3a:	6978      	ldr	r0, [r7, #20]
 8005f3c:	f7ff ff90 	bl	8005e60 <NVIC_EncodePriority>
 8005f40:	4602      	mov	r2, r0
 8005f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f46:	4611      	mov	r1, r2
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7ff ff5f 	bl	8005e0c <__NVIC_SetPriority>
}
 8005f4e:	bf00      	nop
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b082      	sub	sp, #8
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7ff ff35 	bl	8005dd4 <__NVIC_EnableIRQ>
}
 8005f6a:	bf00      	nop
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b082      	sub	sp, #8
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7ff ffa2 	bl	8005ec4 <SysTick_Config>
 8005f80:	4603      	mov	r3, r0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b08b      	sub	sp, #44	; 0x2c
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f96:	2300      	movs	r3, #0
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f9e:	e169      	b.n	8006274 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69fa      	ldr	r2, [r7, #28]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	f040 8158 	bne.w	800626e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	4a9a      	ldr	r2, [pc, #616]	; (800622c <HAL_GPIO_Init+0x2a0>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d05e      	beq.n	8006086 <HAL_GPIO_Init+0xfa>
 8005fc8:	4a98      	ldr	r2, [pc, #608]	; (800622c <HAL_GPIO_Init+0x2a0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d875      	bhi.n	80060ba <HAL_GPIO_Init+0x12e>
 8005fce:	4a98      	ldr	r2, [pc, #608]	; (8006230 <HAL_GPIO_Init+0x2a4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d058      	beq.n	8006086 <HAL_GPIO_Init+0xfa>
 8005fd4:	4a96      	ldr	r2, [pc, #600]	; (8006230 <HAL_GPIO_Init+0x2a4>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d86f      	bhi.n	80060ba <HAL_GPIO_Init+0x12e>
 8005fda:	4a96      	ldr	r2, [pc, #600]	; (8006234 <HAL_GPIO_Init+0x2a8>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d052      	beq.n	8006086 <HAL_GPIO_Init+0xfa>
 8005fe0:	4a94      	ldr	r2, [pc, #592]	; (8006234 <HAL_GPIO_Init+0x2a8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d869      	bhi.n	80060ba <HAL_GPIO_Init+0x12e>
 8005fe6:	4a94      	ldr	r2, [pc, #592]	; (8006238 <HAL_GPIO_Init+0x2ac>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d04c      	beq.n	8006086 <HAL_GPIO_Init+0xfa>
 8005fec:	4a92      	ldr	r2, [pc, #584]	; (8006238 <HAL_GPIO_Init+0x2ac>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d863      	bhi.n	80060ba <HAL_GPIO_Init+0x12e>
 8005ff2:	4a92      	ldr	r2, [pc, #584]	; (800623c <HAL_GPIO_Init+0x2b0>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d046      	beq.n	8006086 <HAL_GPIO_Init+0xfa>
 8005ff8:	4a90      	ldr	r2, [pc, #576]	; (800623c <HAL_GPIO_Init+0x2b0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d85d      	bhi.n	80060ba <HAL_GPIO_Init+0x12e>
 8005ffe:	2b12      	cmp	r3, #18
 8006000:	d82a      	bhi.n	8006058 <HAL_GPIO_Init+0xcc>
 8006002:	2b12      	cmp	r3, #18
 8006004:	d859      	bhi.n	80060ba <HAL_GPIO_Init+0x12e>
 8006006:	a201      	add	r2, pc, #4	; (adr r2, 800600c <HAL_GPIO_Init+0x80>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	08006087 	.word	0x08006087
 8006010:	08006061 	.word	0x08006061
 8006014:	08006073 	.word	0x08006073
 8006018:	080060b5 	.word	0x080060b5
 800601c:	080060bb 	.word	0x080060bb
 8006020:	080060bb 	.word	0x080060bb
 8006024:	080060bb 	.word	0x080060bb
 8006028:	080060bb 	.word	0x080060bb
 800602c:	080060bb 	.word	0x080060bb
 8006030:	080060bb 	.word	0x080060bb
 8006034:	080060bb 	.word	0x080060bb
 8006038:	080060bb 	.word	0x080060bb
 800603c:	080060bb 	.word	0x080060bb
 8006040:	080060bb 	.word	0x080060bb
 8006044:	080060bb 	.word	0x080060bb
 8006048:	080060bb 	.word	0x080060bb
 800604c:	080060bb 	.word	0x080060bb
 8006050:	08006069 	.word	0x08006069
 8006054:	0800607d 	.word	0x0800607d
 8006058:	4a79      	ldr	r2, [pc, #484]	; (8006240 <HAL_GPIO_Init+0x2b4>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d013      	beq.n	8006086 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800605e:	e02c      	b.n	80060ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	623b      	str	r3, [r7, #32]
          break;
 8006066:	e029      	b.n	80060bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	3304      	adds	r3, #4
 800606e:	623b      	str	r3, [r7, #32]
          break;
 8006070:	e024      	b.n	80060bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	3308      	adds	r3, #8
 8006078:	623b      	str	r3, [r7, #32]
          break;
 800607a:	e01f      	b.n	80060bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	330c      	adds	r3, #12
 8006082:	623b      	str	r3, [r7, #32]
          break;
 8006084:	e01a      	b.n	80060bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d102      	bne.n	8006094 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800608e:	2304      	movs	r3, #4
 8006090:	623b      	str	r3, [r7, #32]
          break;
 8006092:	e013      	b.n	80060bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d105      	bne.n	80060a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800609c:	2308      	movs	r3, #8
 800609e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	611a      	str	r2, [r3, #16]
          break;
 80060a6:	e009      	b.n	80060bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80060a8:	2308      	movs	r3, #8
 80060aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	69fa      	ldr	r2, [r7, #28]
 80060b0:	615a      	str	r2, [r3, #20]
          break;
 80060b2:	e003      	b.n	80060bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80060b4:	2300      	movs	r3, #0
 80060b6:	623b      	str	r3, [r7, #32]
          break;
 80060b8:	e000      	b.n	80060bc <HAL_GPIO_Init+0x130>
          break;
 80060ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	2bff      	cmp	r3, #255	; 0xff
 80060c0:	d801      	bhi.n	80060c6 <HAL_GPIO_Init+0x13a>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	e001      	b.n	80060ca <HAL_GPIO_Init+0x13e>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	3304      	adds	r3, #4
 80060ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	2bff      	cmp	r3, #255	; 0xff
 80060d0:	d802      	bhi.n	80060d8 <HAL_GPIO_Init+0x14c>
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	e002      	b.n	80060de <HAL_GPIO_Init+0x152>
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	3b08      	subs	r3, #8
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	210f      	movs	r1, #15
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	fa01 f303 	lsl.w	r3, r1, r3
 80060ec:	43db      	mvns	r3, r3
 80060ee:	401a      	ands	r2, r3
 80060f0:	6a39      	ldr	r1, [r7, #32]
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	fa01 f303 	lsl.w	r3, r1, r3
 80060f8:	431a      	orrs	r2, r3
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 80b1 	beq.w	800626e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800610c:	4b4d      	ldr	r3, [pc, #308]	; (8006244 <HAL_GPIO_Init+0x2b8>)
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	4a4c      	ldr	r2, [pc, #304]	; (8006244 <HAL_GPIO_Init+0x2b8>)
 8006112:	f043 0301 	orr.w	r3, r3, #1
 8006116:	6193      	str	r3, [r2, #24]
 8006118:	4b4a      	ldr	r3, [pc, #296]	; (8006244 <HAL_GPIO_Init+0x2b8>)
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	60bb      	str	r3, [r7, #8]
 8006122:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006124:	4a48      	ldr	r2, [pc, #288]	; (8006248 <HAL_GPIO_Init+0x2bc>)
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	089b      	lsrs	r3, r3, #2
 800612a:	3302      	adds	r3, #2
 800612c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006130:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	f003 0303 	and.w	r3, r3, #3
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	220f      	movs	r2, #15
 800613c:	fa02 f303 	lsl.w	r3, r2, r3
 8006140:	43db      	mvns	r3, r3
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4013      	ands	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a40      	ldr	r2, [pc, #256]	; (800624c <HAL_GPIO_Init+0x2c0>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d013      	beq.n	8006178 <HAL_GPIO_Init+0x1ec>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a3f      	ldr	r2, [pc, #252]	; (8006250 <HAL_GPIO_Init+0x2c4>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00d      	beq.n	8006174 <HAL_GPIO_Init+0x1e8>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a3e      	ldr	r2, [pc, #248]	; (8006254 <HAL_GPIO_Init+0x2c8>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d007      	beq.n	8006170 <HAL_GPIO_Init+0x1e4>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a3d      	ldr	r2, [pc, #244]	; (8006258 <HAL_GPIO_Init+0x2cc>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d101      	bne.n	800616c <HAL_GPIO_Init+0x1e0>
 8006168:	2303      	movs	r3, #3
 800616a:	e006      	b.n	800617a <HAL_GPIO_Init+0x1ee>
 800616c:	2304      	movs	r3, #4
 800616e:	e004      	b.n	800617a <HAL_GPIO_Init+0x1ee>
 8006170:	2302      	movs	r3, #2
 8006172:	e002      	b.n	800617a <HAL_GPIO_Init+0x1ee>
 8006174:	2301      	movs	r3, #1
 8006176:	e000      	b.n	800617a <HAL_GPIO_Init+0x1ee>
 8006178:	2300      	movs	r3, #0
 800617a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800617c:	f002 0203 	and.w	r2, r2, #3
 8006180:	0092      	lsls	r2, r2, #2
 8006182:	4093      	lsls	r3, r2
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800618a:	492f      	ldr	r1, [pc, #188]	; (8006248 <HAL_GPIO_Init+0x2bc>)
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	089b      	lsrs	r3, r3, #2
 8006190:	3302      	adds	r3, #2
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d006      	beq.n	80061b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80061a4:	4b2d      	ldr	r3, [pc, #180]	; (800625c <HAL_GPIO_Init+0x2d0>)
 80061a6:	689a      	ldr	r2, [r3, #8]
 80061a8:	492c      	ldr	r1, [pc, #176]	; (800625c <HAL_GPIO_Init+0x2d0>)
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	608b      	str	r3, [r1, #8]
 80061b0:	e006      	b.n	80061c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80061b2:	4b2a      	ldr	r3, [pc, #168]	; (800625c <HAL_GPIO_Init+0x2d0>)
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	43db      	mvns	r3, r3
 80061ba:	4928      	ldr	r1, [pc, #160]	; (800625c <HAL_GPIO_Init+0x2d0>)
 80061bc:	4013      	ands	r3, r2
 80061be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d006      	beq.n	80061da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80061cc:	4b23      	ldr	r3, [pc, #140]	; (800625c <HAL_GPIO_Init+0x2d0>)
 80061ce:	68da      	ldr	r2, [r3, #12]
 80061d0:	4922      	ldr	r1, [pc, #136]	; (800625c <HAL_GPIO_Init+0x2d0>)
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60cb      	str	r3, [r1, #12]
 80061d8:	e006      	b.n	80061e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80061da:	4b20      	ldr	r3, [pc, #128]	; (800625c <HAL_GPIO_Init+0x2d0>)
 80061dc:	68da      	ldr	r2, [r3, #12]
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	43db      	mvns	r3, r3
 80061e2:	491e      	ldr	r1, [pc, #120]	; (800625c <HAL_GPIO_Init+0x2d0>)
 80061e4:	4013      	ands	r3, r2
 80061e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d006      	beq.n	8006202 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80061f4:	4b19      	ldr	r3, [pc, #100]	; (800625c <HAL_GPIO_Init+0x2d0>)
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	4918      	ldr	r1, [pc, #96]	; (800625c <HAL_GPIO_Init+0x2d0>)
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	604b      	str	r3, [r1, #4]
 8006200:	e006      	b.n	8006210 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006202:	4b16      	ldr	r3, [pc, #88]	; (800625c <HAL_GPIO_Init+0x2d0>)
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	43db      	mvns	r3, r3
 800620a:	4914      	ldr	r1, [pc, #80]	; (800625c <HAL_GPIO_Init+0x2d0>)
 800620c:	4013      	ands	r3, r2
 800620e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d021      	beq.n	8006260 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800621c:	4b0f      	ldr	r3, [pc, #60]	; (800625c <HAL_GPIO_Init+0x2d0>)
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	490e      	ldr	r1, [pc, #56]	; (800625c <HAL_GPIO_Init+0x2d0>)
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	4313      	orrs	r3, r2
 8006226:	600b      	str	r3, [r1, #0]
 8006228:	e021      	b.n	800626e <HAL_GPIO_Init+0x2e2>
 800622a:	bf00      	nop
 800622c:	10320000 	.word	0x10320000
 8006230:	10310000 	.word	0x10310000
 8006234:	10220000 	.word	0x10220000
 8006238:	10210000 	.word	0x10210000
 800623c:	10120000 	.word	0x10120000
 8006240:	10110000 	.word	0x10110000
 8006244:	40021000 	.word	0x40021000
 8006248:	40010000 	.word	0x40010000
 800624c:	40010800 	.word	0x40010800
 8006250:	40010c00 	.word	0x40010c00
 8006254:	40011000 	.word	0x40011000
 8006258:	40011400 	.word	0x40011400
 800625c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006260:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <HAL_GPIO_Init+0x304>)
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	43db      	mvns	r3, r3
 8006268:	4909      	ldr	r1, [pc, #36]	; (8006290 <HAL_GPIO_Init+0x304>)
 800626a:	4013      	ands	r3, r2
 800626c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	3301      	adds	r3, #1
 8006272:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	fa22 f303 	lsr.w	r3, r2, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	f47f ae8e 	bne.w	8005fa0 <HAL_GPIO_Init+0x14>
  }
}
 8006284:	bf00      	nop
 8006286:	bf00      	nop
 8006288:	372c      	adds	r7, #44	; 0x2c
 800628a:	46bd      	mov	sp, r7
 800628c:	bc80      	pop	{r7}
 800628e:	4770      	bx	lr
 8006290:	40010400 	.word	0x40010400

08006294 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	460b      	mov	r3, r1
 800629e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	887b      	ldrh	r3, [r7, #2]
 80062a6:	4013      	ands	r3, r2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80062ac:	2301      	movs	r3, #1
 80062ae:	73fb      	strb	r3, [r7, #15]
 80062b0:	e001      	b.n	80062b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062b2:	2300      	movs	r3, #0
 80062b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	bc80      	pop	{r7}
 80062c0:	4770      	bx	lr

080062c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	460b      	mov	r3, r1
 80062cc:	807b      	strh	r3, [r7, #2]
 80062ce:	4613      	mov	r3, r2
 80062d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80062d2:	787b      	ldrb	r3, [r7, #1]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062d8:	887a      	ldrh	r2, [r7, #2]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80062de:	e003      	b.n	80062e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80062e0:	887b      	ldrh	r3, [r7, #2]
 80062e2:	041a      	lsls	r2, r3, #16
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	611a      	str	r2, [r3, #16]
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bc80      	pop	{r7}
 80062f0:	4770      	bx	lr
	...

080062f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	4603      	mov	r3, r0
 80062fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80062fe:	4b08      	ldr	r3, [pc, #32]	; (8006320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006300:	695a      	ldr	r2, [r3, #20]
 8006302:	88fb      	ldrh	r3, [r7, #6]
 8006304:	4013      	ands	r3, r2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d006      	beq.n	8006318 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800630a:	4a05      	ldr	r2, [pc, #20]	; (8006320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800630c:	88fb      	ldrh	r3, [r7, #6]
 800630e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006310:	88fb      	ldrh	r3, [r7, #6]
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff f8ea 	bl	80054ec <HAL_GPIO_EXTI_Callback>
  }
}
 8006318:	bf00      	nop
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	40010400 	.word	0x40010400

08006324 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e272      	b.n	800681c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 8087 	beq.w	8006452 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006344:	4b92      	ldr	r3, [pc, #584]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f003 030c 	and.w	r3, r3, #12
 800634c:	2b04      	cmp	r3, #4
 800634e:	d00c      	beq.n	800636a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006350:	4b8f      	ldr	r3, [pc, #572]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f003 030c 	and.w	r3, r3, #12
 8006358:	2b08      	cmp	r3, #8
 800635a:	d112      	bne.n	8006382 <HAL_RCC_OscConfig+0x5e>
 800635c:	4b8c      	ldr	r3, [pc, #560]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006368:	d10b      	bne.n	8006382 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800636a:	4b89      	ldr	r3, [pc, #548]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d06c      	beq.n	8006450 <HAL_RCC_OscConfig+0x12c>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d168      	bne.n	8006450 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e24c      	b.n	800681c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800638a:	d106      	bne.n	800639a <HAL_RCC_OscConfig+0x76>
 800638c:	4b80      	ldr	r3, [pc, #512]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a7f      	ldr	r2, [pc, #508]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 8006392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006396:	6013      	str	r3, [r2, #0]
 8006398:	e02e      	b.n	80063f8 <HAL_RCC_OscConfig+0xd4>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10c      	bne.n	80063bc <HAL_RCC_OscConfig+0x98>
 80063a2:	4b7b      	ldr	r3, [pc, #492]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a7a      	ldr	r2, [pc, #488]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 80063a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063ac:	6013      	str	r3, [r2, #0]
 80063ae:	4b78      	ldr	r3, [pc, #480]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a77      	ldr	r2, [pc, #476]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 80063b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	e01d      	b.n	80063f8 <HAL_RCC_OscConfig+0xd4>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063c4:	d10c      	bne.n	80063e0 <HAL_RCC_OscConfig+0xbc>
 80063c6:	4b72      	ldr	r3, [pc, #456]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a71      	ldr	r2, [pc, #452]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 80063cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063d0:	6013      	str	r3, [r2, #0]
 80063d2:	4b6f      	ldr	r3, [pc, #444]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a6e      	ldr	r2, [pc, #440]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 80063d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	e00b      	b.n	80063f8 <HAL_RCC_OscConfig+0xd4>
 80063e0:	4b6b      	ldr	r3, [pc, #428]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a6a      	ldr	r2, [pc, #424]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 80063e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	4b68      	ldr	r3, [pc, #416]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a67      	ldr	r2, [pc, #412]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 80063f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d013      	beq.n	8006428 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006400:	f7ff fcac 	bl	8005d5c <HAL_GetTick>
 8006404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006406:	e008      	b.n	800641a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006408:	f7ff fca8 	bl	8005d5c <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	2b64      	cmp	r3, #100	; 0x64
 8006414:	d901      	bls.n	800641a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e200      	b.n	800681c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800641a:	4b5d      	ldr	r3, [pc, #372]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0f0      	beq.n	8006408 <HAL_RCC_OscConfig+0xe4>
 8006426:	e014      	b.n	8006452 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006428:	f7ff fc98 	bl	8005d5c <HAL_GetTick>
 800642c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800642e:	e008      	b.n	8006442 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006430:	f7ff fc94 	bl	8005d5c <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	2b64      	cmp	r3, #100	; 0x64
 800643c:	d901      	bls.n	8006442 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e1ec      	b.n	800681c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006442:	4b53      	ldr	r3, [pc, #332]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1f0      	bne.n	8006430 <HAL_RCC_OscConfig+0x10c>
 800644e:	e000      	b.n	8006452 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d063      	beq.n	8006526 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800645e:	4b4c      	ldr	r3, [pc, #304]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f003 030c 	and.w	r3, r3, #12
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00b      	beq.n	8006482 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800646a:	4b49      	ldr	r3, [pc, #292]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f003 030c 	and.w	r3, r3, #12
 8006472:	2b08      	cmp	r3, #8
 8006474:	d11c      	bne.n	80064b0 <HAL_RCC_OscConfig+0x18c>
 8006476:	4b46      	ldr	r3, [pc, #280]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d116      	bne.n	80064b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006482:	4b43      	ldr	r3, [pc, #268]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d005      	beq.n	800649a <HAL_RCC_OscConfig+0x176>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d001      	beq.n	800649a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e1c0      	b.n	800681c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800649a:	4b3d      	ldr	r3, [pc, #244]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	00db      	lsls	r3, r3, #3
 80064a8:	4939      	ldr	r1, [pc, #228]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ae:	e03a      	b.n	8006526 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d020      	beq.n	80064fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064b8:	4b36      	ldr	r3, [pc, #216]	; (8006594 <HAL_RCC_OscConfig+0x270>)
 80064ba:	2201      	movs	r2, #1
 80064bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064be:	f7ff fc4d 	bl	8005d5c <HAL_GetTick>
 80064c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064c4:	e008      	b.n	80064d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064c6:	f7ff fc49 	bl	8005d5c <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d901      	bls.n	80064d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e1a1      	b.n	800681c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064d8:	4b2d      	ldr	r3, [pc, #180]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d0f0      	beq.n	80064c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064e4:	4b2a      	ldr	r3, [pc, #168]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	4927      	ldr	r1, [pc, #156]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	600b      	str	r3, [r1, #0]
 80064f8:	e015      	b.n	8006526 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064fa:	4b26      	ldr	r3, [pc, #152]	; (8006594 <HAL_RCC_OscConfig+0x270>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006500:	f7ff fc2c 	bl	8005d5c <HAL_GetTick>
 8006504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006506:	e008      	b.n	800651a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006508:	f7ff fc28 	bl	8005d5c <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d901      	bls.n	800651a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e180      	b.n	800681c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800651a:	4b1d      	ldr	r3, [pc, #116]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1f0      	bne.n	8006508 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0308 	and.w	r3, r3, #8
 800652e:	2b00      	cmp	r3, #0
 8006530:	d03a      	beq.n	80065a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d019      	beq.n	800656e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800653a:	4b17      	ldr	r3, [pc, #92]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 800653c:	2201      	movs	r2, #1
 800653e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006540:	f7ff fc0c 	bl	8005d5c <HAL_GetTick>
 8006544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006546:	e008      	b.n	800655a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006548:	f7ff fc08 	bl	8005d5c <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	2b02      	cmp	r3, #2
 8006554:	d901      	bls.n	800655a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e160      	b.n	800681c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800655a:	4b0d      	ldr	r3, [pc, #52]	; (8006590 <HAL_RCC_OscConfig+0x26c>)
 800655c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b00      	cmp	r3, #0
 8006564:	d0f0      	beq.n	8006548 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006566:	2001      	movs	r0, #1
 8006568:	f000 face 	bl	8006b08 <RCC_Delay>
 800656c:	e01c      	b.n	80065a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800656e:	4b0a      	ldr	r3, [pc, #40]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 8006570:	2200      	movs	r2, #0
 8006572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006574:	f7ff fbf2 	bl	8005d5c <HAL_GetTick>
 8006578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800657a:	e00f      	b.n	800659c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800657c:	f7ff fbee 	bl	8005d5c <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b02      	cmp	r3, #2
 8006588:	d908      	bls.n	800659c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e146      	b.n	800681c <HAL_RCC_OscConfig+0x4f8>
 800658e:	bf00      	nop
 8006590:	40021000 	.word	0x40021000
 8006594:	42420000 	.word	0x42420000
 8006598:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800659c:	4b92      	ldr	r3, [pc, #584]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e9      	bne.n	800657c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 80a6 	beq.w	8006702 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065b6:	2300      	movs	r3, #0
 80065b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065ba:	4b8b      	ldr	r3, [pc, #556]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10d      	bne.n	80065e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065c6:	4b88      	ldr	r3, [pc, #544]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	4a87      	ldr	r2, [pc, #540]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 80065cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065d0:	61d3      	str	r3, [r2, #28]
 80065d2:	4b85      	ldr	r3, [pc, #532]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065da:	60bb      	str	r3, [r7, #8]
 80065dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065de:	2301      	movs	r3, #1
 80065e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065e2:	4b82      	ldr	r3, [pc, #520]	; (80067ec <HAL_RCC_OscConfig+0x4c8>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d118      	bne.n	8006620 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065ee:	4b7f      	ldr	r3, [pc, #508]	; (80067ec <HAL_RCC_OscConfig+0x4c8>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a7e      	ldr	r2, [pc, #504]	; (80067ec <HAL_RCC_OscConfig+0x4c8>)
 80065f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065fa:	f7ff fbaf 	bl	8005d5c <HAL_GetTick>
 80065fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006600:	e008      	b.n	8006614 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006602:	f7ff fbab 	bl	8005d5c <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	2b64      	cmp	r3, #100	; 0x64
 800660e:	d901      	bls.n	8006614 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e103      	b.n	800681c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006614:	4b75      	ldr	r3, [pc, #468]	; (80067ec <HAL_RCC_OscConfig+0x4c8>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661c:	2b00      	cmp	r3, #0
 800661e:	d0f0      	beq.n	8006602 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d106      	bne.n	8006636 <HAL_RCC_OscConfig+0x312>
 8006628:	4b6f      	ldr	r3, [pc, #444]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	4a6e      	ldr	r2, [pc, #440]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 800662e:	f043 0301 	orr.w	r3, r3, #1
 8006632:	6213      	str	r3, [r2, #32]
 8006634:	e02d      	b.n	8006692 <HAL_RCC_OscConfig+0x36e>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10c      	bne.n	8006658 <HAL_RCC_OscConfig+0x334>
 800663e:	4b6a      	ldr	r3, [pc, #424]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	4a69      	ldr	r2, [pc, #420]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 8006644:	f023 0301 	bic.w	r3, r3, #1
 8006648:	6213      	str	r3, [r2, #32]
 800664a:	4b67      	ldr	r3, [pc, #412]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	4a66      	ldr	r2, [pc, #408]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 8006650:	f023 0304 	bic.w	r3, r3, #4
 8006654:	6213      	str	r3, [r2, #32]
 8006656:	e01c      	b.n	8006692 <HAL_RCC_OscConfig+0x36e>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	2b05      	cmp	r3, #5
 800665e:	d10c      	bne.n	800667a <HAL_RCC_OscConfig+0x356>
 8006660:	4b61      	ldr	r3, [pc, #388]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	4a60      	ldr	r2, [pc, #384]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 8006666:	f043 0304 	orr.w	r3, r3, #4
 800666a:	6213      	str	r3, [r2, #32]
 800666c:	4b5e      	ldr	r3, [pc, #376]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	4a5d      	ldr	r2, [pc, #372]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 8006672:	f043 0301 	orr.w	r3, r3, #1
 8006676:	6213      	str	r3, [r2, #32]
 8006678:	e00b      	b.n	8006692 <HAL_RCC_OscConfig+0x36e>
 800667a:	4b5b      	ldr	r3, [pc, #364]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	4a5a      	ldr	r2, [pc, #360]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 8006680:	f023 0301 	bic.w	r3, r3, #1
 8006684:	6213      	str	r3, [r2, #32]
 8006686:	4b58      	ldr	r3, [pc, #352]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	4a57      	ldr	r2, [pc, #348]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 800668c:	f023 0304 	bic.w	r3, r3, #4
 8006690:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d015      	beq.n	80066c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800669a:	f7ff fb5f 	bl	8005d5c <HAL_GetTick>
 800669e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a0:	e00a      	b.n	80066b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066a2:	f7ff fb5b 	bl	8005d5c <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d901      	bls.n	80066b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e0b1      	b.n	800681c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066b8:	4b4b      	ldr	r3, [pc, #300]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	f003 0302 	and.w	r3, r3, #2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d0ee      	beq.n	80066a2 <HAL_RCC_OscConfig+0x37e>
 80066c4:	e014      	b.n	80066f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066c6:	f7ff fb49 	bl	8005d5c <HAL_GetTick>
 80066ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066cc:	e00a      	b.n	80066e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ce:	f7ff fb45 	bl	8005d5c <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80066dc:	4293      	cmp	r3, r2
 80066de:	d901      	bls.n	80066e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e09b      	b.n	800681c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066e4:	4b40      	ldr	r3, [pc, #256]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1ee      	bne.n	80066ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80066f0:	7dfb      	ldrb	r3, [r7, #23]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d105      	bne.n	8006702 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066f6:	4b3c      	ldr	r3, [pc, #240]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	4a3b      	ldr	r2, [pc, #236]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 80066fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006700:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 8087 	beq.w	800681a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800670c:	4b36      	ldr	r3, [pc, #216]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f003 030c 	and.w	r3, r3, #12
 8006714:	2b08      	cmp	r3, #8
 8006716:	d061      	beq.n	80067dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	2b02      	cmp	r3, #2
 800671e:	d146      	bne.n	80067ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006720:	4b33      	ldr	r3, [pc, #204]	; (80067f0 <HAL_RCC_OscConfig+0x4cc>)
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006726:	f7ff fb19 	bl	8005d5c <HAL_GetTick>
 800672a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800672c:	e008      	b.n	8006740 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800672e:	f7ff fb15 	bl	8005d5c <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	2b02      	cmp	r3, #2
 800673a:	d901      	bls.n	8006740 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e06d      	b.n	800681c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006740:	4b29      	ldr	r3, [pc, #164]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1f0      	bne.n	800672e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006754:	d108      	bne.n	8006768 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006756:	4b24      	ldr	r3, [pc, #144]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	4921      	ldr	r1, [pc, #132]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 8006764:	4313      	orrs	r3, r2
 8006766:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006768:	4b1f      	ldr	r3, [pc, #124]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a19      	ldr	r1, [r3, #32]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	430b      	orrs	r3, r1
 800677a:	491b      	ldr	r1, [pc, #108]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 800677c:	4313      	orrs	r3, r2
 800677e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006780:	4b1b      	ldr	r3, [pc, #108]	; (80067f0 <HAL_RCC_OscConfig+0x4cc>)
 8006782:	2201      	movs	r2, #1
 8006784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006786:	f7ff fae9 	bl	8005d5c <HAL_GetTick>
 800678a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800678c:	e008      	b.n	80067a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800678e:	f7ff fae5 	bl	8005d5c <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	2b02      	cmp	r3, #2
 800679a:	d901      	bls.n	80067a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e03d      	b.n	800681c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067a0:	4b11      	ldr	r3, [pc, #68]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d0f0      	beq.n	800678e <HAL_RCC_OscConfig+0x46a>
 80067ac:	e035      	b.n	800681a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ae:	4b10      	ldr	r3, [pc, #64]	; (80067f0 <HAL_RCC_OscConfig+0x4cc>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b4:	f7ff fad2 	bl	8005d5c <HAL_GetTick>
 80067b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067ba:	e008      	b.n	80067ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067bc:	f7ff face 	bl	8005d5c <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e026      	b.n	800681c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067ce:	4b06      	ldr	r3, [pc, #24]	; (80067e8 <HAL_RCC_OscConfig+0x4c4>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1f0      	bne.n	80067bc <HAL_RCC_OscConfig+0x498>
 80067da:	e01e      	b.n	800681a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	69db      	ldr	r3, [r3, #28]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d107      	bne.n	80067f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e019      	b.n	800681c <HAL_RCC_OscConfig+0x4f8>
 80067e8:	40021000 	.word	0x40021000
 80067ec:	40007000 	.word	0x40007000
 80067f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80067f4:	4b0b      	ldr	r3, [pc, #44]	; (8006824 <HAL_RCC_OscConfig+0x500>)
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	429a      	cmp	r2, r3
 8006806:	d106      	bne.n	8006816 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006812:	429a      	cmp	r2, r3
 8006814:	d001      	beq.n	800681a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e000      	b.n	800681c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3718      	adds	r7, #24
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	40021000 	.word	0x40021000

08006828 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e0d0      	b.n	80069de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800683c:	4b6a      	ldr	r3, [pc, #424]	; (80069e8 <HAL_RCC_ClockConfig+0x1c0>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0307 	and.w	r3, r3, #7
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	429a      	cmp	r2, r3
 8006848:	d910      	bls.n	800686c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800684a:	4b67      	ldr	r3, [pc, #412]	; (80069e8 <HAL_RCC_ClockConfig+0x1c0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f023 0207 	bic.w	r2, r3, #7
 8006852:	4965      	ldr	r1, [pc, #404]	; (80069e8 <HAL_RCC_ClockConfig+0x1c0>)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	4313      	orrs	r3, r2
 8006858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800685a:	4b63      	ldr	r3, [pc, #396]	; (80069e8 <HAL_RCC_ClockConfig+0x1c0>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0307 	and.w	r3, r3, #7
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	429a      	cmp	r2, r3
 8006866:	d001      	beq.n	800686c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e0b8      	b.n	80069de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d020      	beq.n	80068ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0304 	and.w	r3, r3, #4
 8006880:	2b00      	cmp	r3, #0
 8006882:	d005      	beq.n	8006890 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006884:	4b59      	ldr	r3, [pc, #356]	; (80069ec <HAL_RCC_ClockConfig+0x1c4>)
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	4a58      	ldr	r2, [pc, #352]	; (80069ec <HAL_RCC_ClockConfig+0x1c4>)
 800688a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800688e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0308 	and.w	r3, r3, #8
 8006898:	2b00      	cmp	r3, #0
 800689a:	d005      	beq.n	80068a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800689c:	4b53      	ldr	r3, [pc, #332]	; (80069ec <HAL_RCC_ClockConfig+0x1c4>)
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	4a52      	ldr	r2, [pc, #328]	; (80069ec <HAL_RCC_ClockConfig+0x1c4>)
 80068a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80068a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068a8:	4b50      	ldr	r3, [pc, #320]	; (80069ec <HAL_RCC_ClockConfig+0x1c4>)
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	494d      	ldr	r1, [pc, #308]	; (80069ec <HAL_RCC_ClockConfig+0x1c4>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d040      	beq.n	8006948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d107      	bne.n	80068de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ce:	4b47      	ldr	r3, [pc, #284]	; (80069ec <HAL_RCC_ClockConfig+0x1c4>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d115      	bne.n	8006906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e07f      	b.n	80069de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d107      	bne.n	80068f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068e6:	4b41      	ldr	r3, [pc, #260]	; (80069ec <HAL_RCC_ClockConfig+0x1c4>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d109      	bne.n	8006906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e073      	b.n	80069de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068f6:	4b3d      	ldr	r3, [pc, #244]	; (80069ec <HAL_RCC_ClockConfig+0x1c4>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d101      	bne.n	8006906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e06b      	b.n	80069de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006906:	4b39      	ldr	r3, [pc, #228]	; (80069ec <HAL_RCC_ClockConfig+0x1c4>)
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f023 0203 	bic.w	r2, r3, #3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	4936      	ldr	r1, [pc, #216]	; (80069ec <HAL_RCC_ClockConfig+0x1c4>)
 8006914:	4313      	orrs	r3, r2
 8006916:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006918:	f7ff fa20 	bl	8005d5c <HAL_GetTick>
 800691c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800691e:	e00a      	b.n	8006936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006920:	f7ff fa1c 	bl	8005d5c <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	f241 3288 	movw	r2, #5000	; 0x1388
 800692e:	4293      	cmp	r3, r2
 8006930:	d901      	bls.n	8006936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e053      	b.n	80069de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006936:	4b2d      	ldr	r3, [pc, #180]	; (80069ec <HAL_RCC_ClockConfig+0x1c4>)
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f003 020c 	and.w	r2, r3, #12
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	429a      	cmp	r2, r3
 8006946:	d1eb      	bne.n	8006920 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006948:	4b27      	ldr	r3, [pc, #156]	; (80069e8 <HAL_RCC_ClockConfig+0x1c0>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0307 	and.w	r3, r3, #7
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	429a      	cmp	r2, r3
 8006954:	d210      	bcs.n	8006978 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006956:	4b24      	ldr	r3, [pc, #144]	; (80069e8 <HAL_RCC_ClockConfig+0x1c0>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f023 0207 	bic.w	r2, r3, #7
 800695e:	4922      	ldr	r1, [pc, #136]	; (80069e8 <HAL_RCC_ClockConfig+0x1c0>)
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	4313      	orrs	r3, r2
 8006964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006966:	4b20      	ldr	r3, [pc, #128]	; (80069e8 <HAL_RCC_ClockConfig+0x1c0>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0307 	and.w	r3, r3, #7
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	429a      	cmp	r2, r3
 8006972:	d001      	beq.n	8006978 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e032      	b.n	80069de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0304 	and.w	r3, r3, #4
 8006980:	2b00      	cmp	r3, #0
 8006982:	d008      	beq.n	8006996 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006984:	4b19      	ldr	r3, [pc, #100]	; (80069ec <HAL_RCC_ClockConfig+0x1c4>)
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	4916      	ldr	r1, [pc, #88]	; (80069ec <HAL_RCC_ClockConfig+0x1c4>)
 8006992:	4313      	orrs	r3, r2
 8006994:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0308 	and.w	r3, r3, #8
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d009      	beq.n	80069b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80069a2:	4b12      	ldr	r3, [pc, #72]	; (80069ec <HAL_RCC_ClockConfig+0x1c4>)
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	00db      	lsls	r3, r3, #3
 80069b0:	490e      	ldr	r1, [pc, #56]	; (80069ec <HAL_RCC_ClockConfig+0x1c4>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069b6:	f000 f821 	bl	80069fc <HAL_RCC_GetSysClockFreq>
 80069ba:	4602      	mov	r2, r0
 80069bc:	4b0b      	ldr	r3, [pc, #44]	; (80069ec <HAL_RCC_ClockConfig+0x1c4>)
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	091b      	lsrs	r3, r3, #4
 80069c2:	f003 030f 	and.w	r3, r3, #15
 80069c6:	490a      	ldr	r1, [pc, #40]	; (80069f0 <HAL_RCC_ClockConfig+0x1c8>)
 80069c8:	5ccb      	ldrb	r3, [r1, r3]
 80069ca:	fa22 f303 	lsr.w	r3, r2, r3
 80069ce:	4a09      	ldr	r2, [pc, #36]	; (80069f4 <HAL_RCC_ClockConfig+0x1cc>)
 80069d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80069d2:	4b09      	ldr	r3, [pc, #36]	; (80069f8 <HAL_RCC_ClockConfig+0x1d0>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7ff f97e 	bl	8005cd8 <HAL_InitTick>

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	40022000 	.word	0x40022000
 80069ec:	40021000 	.word	0x40021000
 80069f0:	08010524 	.word	0x08010524
 80069f4:	200000bc 	.word	0x200000bc
 80069f8:	200000c0 	.word	0x200000c0

080069fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b087      	sub	sp, #28
 8006a00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]
 8006a06:	2300      	movs	r3, #0
 8006a08:	60bb      	str	r3, [r7, #8]
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	2300      	movs	r3, #0
 8006a10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006a16:	4b1e      	ldr	r3, [pc, #120]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x94>)
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f003 030c 	and.w	r3, r3, #12
 8006a22:	2b04      	cmp	r3, #4
 8006a24:	d002      	beq.n	8006a2c <HAL_RCC_GetSysClockFreq+0x30>
 8006a26:	2b08      	cmp	r3, #8
 8006a28:	d003      	beq.n	8006a32 <HAL_RCC_GetSysClockFreq+0x36>
 8006a2a:	e027      	b.n	8006a7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a2c:	4b19      	ldr	r3, [pc, #100]	; (8006a94 <HAL_RCC_GetSysClockFreq+0x98>)
 8006a2e:	613b      	str	r3, [r7, #16]
      break;
 8006a30:	e027      	b.n	8006a82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	0c9b      	lsrs	r3, r3, #18
 8006a36:	f003 030f 	and.w	r3, r3, #15
 8006a3a:	4a17      	ldr	r2, [pc, #92]	; (8006a98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006a3c:	5cd3      	ldrb	r3, [r2, r3]
 8006a3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d010      	beq.n	8006a6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006a4a:	4b11      	ldr	r3, [pc, #68]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x94>)
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	0c5b      	lsrs	r3, r3, #17
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	4a11      	ldr	r2, [pc, #68]	; (8006a9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006a56:	5cd3      	ldrb	r3, [r2, r3]
 8006a58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a0d      	ldr	r2, [pc, #52]	; (8006a94 <HAL_RCC_GetSysClockFreq+0x98>)
 8006a5e:	fb03 f202 	mul.w	r2, r3, r2
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a68:	617b      	str	r3, [r7, #20]
 8006a6a:	e004      	b.n	8006a76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a0c      	ldr	r2, [pc, #48]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006a70:	fb02 f303 	mul.w	r3, r2, r3
 8006a74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	613b      	str	r3, [r7, #16]
      break;
 8006a7a:	e002      	b.n	8006a82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006a7c:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <HAL_RCC_GetSysClockFreq+0x98>)
 8006a7e:	613b      	str	r3, [r7, #16]
      break;
 8006a80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a82:	693b      	ldr	r3, [r7, #16]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	371c      	adds	r7, #28
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bc80      	pop	{r7}
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	40021000 	.word	0x40021000
 8006a94:	007a1200 	.word	0x007a1200
 8006a98:	0801053c 	.word	0x0801053c
 8006a9c:	0801054c 	.word	0x0801054c
 8006aa0:	003d0900 	.word	0x003d0900

08006aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006aa8:	4b02      	ldr	r3, [pc, #8]	; (8006ab4 <HAL_RCC_GetHCLKFreq+0x10>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bc80      	pop	{r7}
 8006ab2:	4770      	bx	lr
 8006ab4:	200000bc 	.word	0x200000bc

08006ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006abc:	f7ff fff2 	bl	8006aa4 <HAL_RCC_GetHCLKFreq>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	4b05      	ldr	r3, [pc, #20]	; (8006ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	0a1b      	lsrs	r3, r3, #8
 8006ac8:	f003 0307 	and.w	r3, r3, #7
 8006acc:	4903      	ldr	r1, [pc, #12]	; (8006adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ace:	5ccb      	ldrb	r3, [r1, r3]
 8006ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	40021000 	.word	0x40021000
 8006adc:	08010534 	.word	0x08010534

08006ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ae4:	f7ff ffde 	bl	8006aa4 <HAL_RCC_GetHCLKFreq>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	0adb      	lsrs	r3, r3, #11
 8006af0:	f003 0307 	and.w	r3, r3, #7
 8006af4:	4903      	ldr	r1, [pc, #12]	; (8006b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006af6:	5ccb      	ldrb	r3, [r1, r3]
 8006af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	40021000 	.word	0x40021000
 8006b04:	08010534 	.word	0x08010534

08006b08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006b10:	4b0a      	ldr	r3, [pc, #40]	; (8006b3c <RCC_Delay+0x34>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a0a      	ldr	r2, [pc, #40]	; (8006b40 <RCC_Delay+0x38>)
 8006b16:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1a:	0a5b      	lsrs	r3, r3, #9
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	fb02 f303 	mul.w	r3, r2, r3
 8006b22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006b24:	bf00      	nop
  }
  while (Delay --);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	1e5a      	subs	r2, r3, #1
 8006b2a:	60fa      	str	r2, [r7, #12]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1f9      	bne.n	8006b24 <RCC_Delay+0x1c>
}
 8006b30:	bf00      	nop
 8006b32:	bf00      	nop
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bc80      	pop	{r7}
 8006b3a:	4770      	bx	lr
 8006b3c:	200000bc 	.word	0x200000bc
 8006b40:	10624dd3 	.word	0x10624dd3

08006b44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e041      	b.n	8006bda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7fe fee2 	bl	8005934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2202      	movs	r2, #2
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	4619      	mov	r1, r3
 8006b82:	4610      	mov	r0, r2
 8006b84:	f000 fa10 	bl	8006fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b082      	sub	sp, #8
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e041      	b.n	8006c78 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d106      	bne.n	8006c0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f839 	bl	8006c80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2202      	movs	r2, #2
 8006c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	4619      	mov	r1, r3
 8006c20:	4610      	mov	r0, r2
 8006c22:	f000 f9c1 	bl	8006fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bc80      	pop	{r7}
 8006c90:	4770      	bx	lr
	...

08006c94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d101      	bne.n	8006cb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006cae:	2302      	movs	r3, #2
 8006cb0:	e0ae      	b.n	8006e10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b0c      	cmp	r3, #12
 8006cbe:	f200 809f 	bhi.w	8006e00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006cc2:	a201      	add	r2, pc, #4	; (adr r2, 8006cc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc8:	08006cfd 	.word	0x08006cfd
 8006ccc:	08006e01 	.word	0x08006e01
 8006cd0:	08006e01 	.word	0x08006e01
 8006cd4:	08006e01 	.word	0x08006e01
 8006cd8:	08006d3d 	.word	0x08006d3d
 8006cdc:	08006e01 	.word	0x08006e01
 8006ce0:	08006e01 	.word	0x08006e01
 8006ce4:	08006e01 	.word	0x08006e01
 8006ce8:	08006d7f 	.word	0x08006d7f
 8006cec:	08006e01 	.word	0x08006e01
 8006cf0:	08006e01 	.word	0x08006e01
 8006cf4:	08006e01 	.word	0x08006e01
 8006cf8:	08006dbf 	.word	0x08006dbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68b9      	ldr	r1, [r7, #8]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 f9b2 	bl	800706c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	699a      	ldr	r2, [r3, #24]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f042 0208 	orr.w	r2, r2, #8
 8006d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	699a      	ldr	r2, [r3, #24]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f022 0204 	bic.w	r2, r2, #4
 8006d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6999      	ldr	r1, [r3, #24]
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	691a      	ldr	r2, [r3, #16]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	619a      	str	r2, [r3, #24]
      break;
 8006d3a:	e064      	b.n	8006e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68b9      	ldr	r1, [r7, #8]
 8006d42:	4618      	mov	r0, r3
 8006d44:	f000 f9f8 	bl	8007138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	699a      	ldr	r2, [r3, #24]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	699a      	ldr	r2, [r3, #24]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6999      	ldr	r1, [r3, #24]
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	021a      	lsls	r2, r3, #8
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	619a      	str	r2, [r3, #24]
      break;
 8006d7c:	e043      	b.n	8006e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68b9      	ldr	r1, [r7, #8]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 fa41 	bl	800720c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	69da      	ldr	r2, [r3, #28]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f042 0208 	orr.w	r2, r2, #8
 8006d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	69da      	ldr	r2, [r3, #28]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f022 0204 	bic.w	r2, r2, #4
 8006da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	69d9      	ldr	r1, [r3, #28]
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	691a      	ldr	r2, [r3, #16]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	430a      	orrs	r2, r1
 8006dba:	61da      	str	r2, [r3, #28]
      break;
 8006dbc:	e023      	b.n	8006e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68b9      	ldr	r1, [r7, #8]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 fa8b 	bl	80072e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	69da      	ldr	r2, [r3, #28]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	69da      	ldr	r2, [r3, #28]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	69d9      	ldr	r1, [r3, #28]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	021a      	lsls	r2, r3, #8
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	61da      	str	r2, [r3, #28]
      break;
 8006dfe:	e002      	b.n	8006e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	75fb      	strb	r3, [r7, #23]
      break;
 8006e04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3718      	adds	r7, #24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d101      	bne.n	8006e34 <HAL_TIM_ConfigClockSource+0x1c>
 8006e30:	2302      	movs	r3, #2
 8006e32:	e0b4      	b.n	8006f9e <HAL_TIM_ConfigClockSource+0x186>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e6c:	d03e      	beq.n	8006eec <HAL_TIM_ConfigClockSource+0xd4>
 8006e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e72:	f200 8087 	bhi.w	8006f84 <HAL_TIM_ConfigClockSource+0x16c>
 8006e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e7a:	f000 8086 	beq.w	8006f8a <HAL_TIM_ConfigClockSource+0x172>
 8006e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e82:	d87f      	bhi.n	8006f84 <HAL_TIM_ConfigClockSource+0x16c>
 8006e84:	2b70      	cmp	r3, #112	; 0x70
 8006e86:	d01a      	beq.n	8006ebe <HAL_TIM_ConfigClockSource+0xa6>
 8006e88:	2b70      	cmp	r3, #112	; 0x70
 8006e8a:	d87b      	bhi.n	8006f84 <HAL_TIM_ConfigClockSource+0x16c>
 8006e8c:	2b60      	cmp	r3, #96	; 0x60
 8006e8e:	d050      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0x11a>
 8006e90:	2b60      	cmp	r3, #96	; 0x60
 8006e92:	d877      	bhi.n	8006f84 <HAL_TIM_ConfigClockSource+0x16c>
 8006e94:	2b50      	cmp	r3, #80	; 0x50
 8006e96:	d03c      	beq.n	8006f12 <HAL_TIM_ConfigClockSource+0xfa>
 8006e98:	2b50      	cmp	r3, #80	; 0x50
 8006e9a:	d873      	bhi.n	8006f84 <HAL_TIM_ConfigClockSource+0x16c>
 8006e9c:	2b40      	cmp	r3, #64	; 0x40
 8006e9e:	d058      	beq.n	8006f52 <HAL_TIM_ConfigClockSource+0x13a>
 8006ea0:	2b40      	cmp	r3, #64	; 0x40
 8006ea2:	d86f      	bhi.n	8006f84 <HAL_TIM_ConfigClockSource+0x16c>
 8006ea4:	2b30      	cmp	r3, #48	; 0x30
 8006ea6:	d064      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0x15a>
 8006ea8:	2b30      	cmp	r3, #48	; 0x30
 8006eaa:	d86b      	bhi.n	8006f84 <HAL_TIM_ConfigClockSource+0x16c>
 8006eac:	2b20      	cmp	r3, #32
 8006eae:	d060      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0x15a>
 8006eb0:	2b20      	cmp	r3, #32
 8006eb2:	d867      	bhi.n	8006f84 <HAL_TIM_ConfigClockSource+0x16c>
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d05c      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0x15a>
 8006eb8:	2b10      	cmp	r3, #16
 8006eba:	d05a      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0x15a>
 8006ebc:	e062      	b.n	8006f84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ece:	f000 facc 	bl	800746a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ee0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	609a      	str	r2, [r3, #8]
      break;
 8006eea:	e04f      	b.n	8006f8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006efc:	f000 fab5 	bl	800746a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689a      	ldr	r2, [r3, #8]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f0e:	609a      	str	r2, [r3, #8]
      break;
 8006f10:	e03c      	b.n	8006f8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f000 fa2c 	bl	800737c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2150      	movs	r1, #80	; 0x50
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 fa83 	bl	8007436 <TIM_ITRx_SetConfig>
      break;
 8006f30:	e02c      	b.n	8006f8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f000 fa4a 	bl	80073d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2160      	movs	r1, #96	; 0x60
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f000 fa73 	bl	8007436 <TIM_ITRx_SetConfig>
      break;
 8006f50:	e01c      	b.n	8006f8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f5e:	461a      	mov	r2, r3
 8006f60:	f000 fa0c 	bl	800737c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2140      	movs	r1, #64	; 0x40
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 fa63 	bl	8007436 <TIM_ITRx_SetConfig>
      break;
 8006f70:	e00c      	b.n	8006f8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	f000 fa5a 	bl	8007436 <TIM_ITRx_SetConfig>
      break;
 8006f82:	e003      	b.n	8006f8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	73fb      	strb	r3, [r7, #15]
      break;
 8006f88:	e000      	b.n	8006f8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
	...

08006fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a29      	ldr	r2, [pc, #164]	; (8007060 <TIM_Base_SetConfig+0xb8>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d00b      	beq.n	8006fd8 <TIM_Base_SetConfig+0x30>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc6:	d007      	beq.n	8006fd8 <TIM_Base_SetConfig+0x30>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a26      	ldr	r2, [pc, #152]	; (8007064 <TIM_Base_SetConfig+0xbc>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d003      	beq.n	8006fd8 <TIM_Base_SetConfig+0x30>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a25      	ldr	r2, [pc, #148]	; (8007068 <TIM_Base_SetConfig+0xc0>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d108      	bne.n	8006fea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a1c      	ldr	r2, [pc, #112]	; (8007060 <TIM_Base_SetConfig+0xb8>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d00b      	beq.n	800700a <TIM_Base_SetConfig+0x62>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ff8:	d007      	beq.n	800700a <TIM_Base_SetConfig+0x62>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a19      	ldr	r2, [pc, #100]	; (8007064 <TIM_Base_SetConfig+0xbc>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d003      	beq.n	800700a <TIM_Base_SetConfig+0x62>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a18      	ldr	r2, [pc, #96]	; (8007068 <TIM_Base_SetConfig+0xc0>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d108      	bne.n	800701c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	4313      	orrs	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	4313      	orrs	r3, r2
 8007028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	689a      	ldr	r2, [r3, #8]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a07      	ldr	r2, [pc, #28]	; (8007060 <TIM_Base_SetConfig+0xb8>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d103      	bne.n	8007050 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	691a      	ldr	r2, [r3, #16]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	615a      	str	r2, [r3, #20]
}
 8007056:	bf00      	nop
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	bc80      	pop	{r7}
 800705e:	4770      	bx	lr
 8007060:	40012c00 	.word	0x40012c00
 8007064:	40000400 	.word	0x40000400
 8007068:	40000800 	.word	0x40000800

0800706c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a1b      	ldr	r3, [r3, #32]
 8007080:	f023 0201 	bic.w	r2, r3, #1
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f023 0303 	bic.w	r3, r3, #3
 80070a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f023 0302 	bic.w	r3, r3, #2
 80070b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	4313      	orrs	r3, r2
 80070be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a1c      	ldr	r2, [pc, #112]	; (8007134 <TIM_OC1_SetConfig+0xc8>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d10c      	bne.n	80070e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	f023 0308 	bic.w	r3, r3, #8
 80070ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f023 0304 	bic.w	r3, r3, #4
 80070e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a13      	ldr	r2, [pc, #76]	; (8007134 <TIM_OC1_SetConfig+0xc8>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d111      	bne.n	800710e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	4313      	orrs	r3, r2
 8007102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	4313      	orrs	r3, r2
 800710c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	621a      	str	r2, [r3, #32]
}
 8007128:	bf00      	nop
 800712a:	371c      	adds	r7, #28
 800712c:	46bd      	mov	sp, r7
 800712e:	bc80      	pop	{r7}
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	40012c00 	.word	0x40012c00

08007138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	f023 0210 	bic.w	r2, r3, #16
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800716e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	021b      	lsls	r3, r3, #8
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	4313      	orrs	r3, r2
 800717a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f023 0320 	bic.w	r3, r3, #32
 8007182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	011b      	lsls	r3, r3, #4
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	4313      	orrs	r3, r2
 800718e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a1d      	ldr	r2, [pc, #116]	; (8007208 <TIM_OC2_SetConfig+0xd0>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d10d      	bne.n	80071b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800719e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	011b      	lsls	r3, r3, #4
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a14      	ldr	r2, [pc, #80]	; (8007208 <TIM_OC2_SetConfig+0xd0>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d113      	bne.n	80071e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	695b      	ldr	r3, [r3, #20]
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	621a      	str	r2, [r3, #32]
}
 80071fe:	bf00      	nop
 8007200:	371c      	adds	r7, #28
 8007202:	46bd      	mov	sp, r7
 8007204:	bc80      	pop	{r7}
 8007206:	4770      	bx	lr
 8007208:	40012c00 	.word	0x40012c00

0800720c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800720c:	b480      	push	{r7}
 800720e:	b087      	sub	sp, #28
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a1b      	ldr	r3, [r3, #32]
 8007220:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f023 0303 	bic.w	r3, r3, #3
 8007242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	4313      	orrs	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	021b      	lsls	r3, r3, #8
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	4313      	orrs	r3, r2
 8007260:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a1d      	ldr	r2, [pc, #116]	; (80072dc <TIM_OC3_SetConfig+0xd0>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d10d      	bne.n	8007286 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007270:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	021b      	lsls	r3, r3, #8
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	4313      	orrs	r3, r2
 800727c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a14      	ldr	r2, [pc, #80]	; (80072dc <TIM_OC3_SetConfig+0xd0>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d113      	bne.n	80072b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800729c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	011b      	lsls	r3, r3, #4
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	011b      	lsls	r3, r3, #4
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	621a      	str	r2, [r3, #32]
}
 80072d0:	bf00      	nop
 80072d2:	371c      	adds	r7, #28
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bc80      	pop	{r7}
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	40012c00 	.word	0x40012c00

080072e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800730e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	021b      	lsls	r3, r3, #8
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	4313      	orrs	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800732a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	031b      	lsls	r3, r3, #12
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	4313      	orrs	r3, r2
 8007336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a0f      	ldr	r2, [pc, #60]	; (8007378 <TIM_OC4_SetConfig+0x98>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d109      	bne.n	8007354 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007346:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	695b      	ldr	r3, [r3, #20]
 800734c:	019b      	lsls	r3, r3, #6
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	4313      	orrs	r3, r2
 8007352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	621a      	str	r2, [r3, #32]
}
 800736e:	bf00      	nop
 8007370:	371c      	adds	r7, #28
 8007372:	46bd      	mov	sp, r7
 8007374:	bc80      	pop	{r7}
 8007376:	4770      	bx	lr
 8007378:	40012c00 	.word	0x40012c00

0800737c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6a1b      	ldr	r3, [r3, #32]
 800738c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	f023 0201 	bic.w	r2, r3, #1
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f023 030a 	bic.w	r3, r3, #10
 80073b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	4313      	orrs	r3, r2
 80073c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	621a      	str	r2, [r3, #32]
}
 80073ce:	bf00      	nop
 80073d0:	371c      	adds	r7, #28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bc80      	pop	{r7}
 80073d6:	4770      	bx	lr

080073d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073d8:	b480      	push	{r7}
 80073da:	b087      	sub	sp, #28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6a1b      	ldr	r3, [r3, #32]
 80073e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	f023 0210 	bic.w	r2, r3, #16
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	031b      	lsls	r3, r3, #12
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	4313      	orrs	r3, r2
 800740c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007414:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	011b      	lsls	r3, r3, #4
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	4313      	orrs	r3, r2
 800741e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	621a      	str	r2, [r3, #32]
}
 800742c:	bf00      	nop
 800742e:	371c      	adds	r7, #28
 8007430:	46bd      	mov	sp, r7
 8007432:	bc80      	pop	{r7}
 8007434:	4770      	bx	lr

08007436 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007436:	b480      	push	{r7}
 8007438:	b085      	sub	sp, #20
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800744c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	f043 0307 	orr.w	r3, r3, #7
 8007458:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	609a      	str	r2, [r3, #8]
}
 8007460:	bf00      	nop
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	bc80      	pop	{r7}
 8007468:	4770      	bx	lr

0800746a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800746a:	b480      	push	{r7}
 800746c:	b087      	sub	sp, #28
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	607a      	str	r2, [r7, #4]
 8007476:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007484:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	021a      	lsls	r2, r3, #8
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	431a      	orrs	r2, r3
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	4313      	orrs	r3, r2
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	4313      	orrs	r3, r2
 8007496:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	609a      	str	r2, [r3, #8]
}
 800749e:	bf00      	nop
 80074a0:	371c      	adds	r7, #28
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bc80      	pop	{r7}
 80074a6:	4770      	bx	lr

080074a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d101      	bne.n	80074c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074bc:	2302      	movs	r3, #2
 80074be:	e046      	b.n	800754e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a16      	ldr	r2, [pc, #88]	; (8007558 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d00e      	beq.n	8007522 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800750c:	d009      	beq.n	8007522 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a12      	ldr	r2, [pc, #72]	; (800755c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d004      	beq.n	8007522 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a10      	ldr	r2, [pc, #64]	; (8007560 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d10c      	bne.n	800753c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007528:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	4313      	orrs	r3, r2
 8007532:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	bc80      	pop	{r7}
 8007556:	4770      	bx	lr
 8007558:	40012c00 	.word	0x40012c00
 800755c:	40000400 	.word	0x40000400
 8007560:	40000800 	.word	0x40000800

08007564 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e042      	b.n	80075fc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d106      	bne.n	8007590 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7fe fa34 	bl	80059f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2224      	movs	r2, #36	; 0x24
 8007594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68da      	ldr	r2, [r3, #12]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 f82b 	bl	8007604 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	691a      	ldr	r2, [r3, #16]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	695a      	ldr	r2, [r3, #20]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68da      	ldr	r2, [r3, #12]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2220      	movs	r2, #32
 80075e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2220      	movs	r2, #32
 80075f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68da      	ldr	r2, [r3, #12]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	689a      	ldr	r2, [r3, #8]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	431a      	orrs	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	695b      	ldr	r3, [r3, #20]
 8007630:	4313      	orrs	r3, r2
 8007632:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800763e:	f023 030c 	bic.w	r3, r3, #12
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	6812      	ldr	r2, [r2, #0]
 8007646:	68b9      	ldr	r1, [r7, #8]
 8007648:	430b      	orrs	r3, r1
 800764a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	699a      	ldr	r2, [r3, #24]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	430a      	orrs	r2, r1
 8007660:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a2c      	ldr	r2, [pc, #176]	; (8007718 <UART_SetConfig+0x114>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d103      	bne.n	8007674 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800766c:	f7ff fa38 	bl	8006ae0 <HAL_RCC_GetPCLK2Freq>
 8007670:	60f8      	str	r0, [r7, #12]
 8007672:	e002      	b.n	800767a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007674:	f7ff fa20 	bl	8006ab8 <HAL_RCC_GetPCLK1Freq>
 8007678:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	4613      	mov	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	009a      	lsls	r2, r3, #2
 8007684:	441a      	add	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007690:	4a22      	ldr	r2, [pc, #136]	; (800771c <UART_SetConfig+0x118>)
 8007692:	fba2 2303 	umull	r2, r3, r2, r3
 8007696:	095b      	lsrs	r3, r3, #5
 8007698:	0119      	lsls	r1, r3, #4
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	4613      	mov	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	009a      	lsls	r2, r3, #2
 80076a4:	441a      	add	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80076b0:	4b1a      	ldr	r3, [pc, #104]	; (800771c <UART_SetConfig+0x118>)
 80076b2:	fba3 0302 	umull	r0, r3, r3, r2
 80076b6:	095b      	lsrs	r3, r3, #5
 80076b8:	2064      	movs	r0, #100	; 0x64
 80076ba:	fb00 f303 	mul.w	r3, r0, r3
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	011b      	lsls	r3, r3, #4
 80076c2:	3332      	adds	r3, #50	; 0x32
 80076c4:	4a15      	ldr	r2, [pc, #84]	; (800771c <UART_SetConfig+0x118>)
 80076c6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ca:	095b      	lsrs	r3, r3, #5
 80076cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076d0:	4419      	add	r1, r3
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	4613      	mov	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	009a      	lsls	r2, r3, #2
 80076dc:	441a      	add	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80076e8:	4b0c      	ldr	r3, [pc, #48]	; (800771c <UART_SetConfig+0x118>)
 80076ea:	fba3 0302 	umull	r0, r3, r3, r2
 80076ee:	095b      	lsrs	r3, r3, #5
 80076f0:	2064      	movs	r0, #100	; 0x64
 80076f2:	fb00 f303 	mul.w	r3, r0, r3
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	011b      	lsls	r3, r3, #4
 80076fa:	3332      	adds	r3, #50	; 0x32
 80076fc:	4a07      	ldr	r2, [pc, #28]	; (800771c <UART_SetConfig+0x118>)
 80076fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007702:	095b      	lsrs	r3, r3, #5
 8007704:	f003 020f 	and.w	r2, r3, #15
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	440a      	add	r2, r1
 800770e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007710:	bf00      	nop
 8007712:	3710      	adds	r7, #16
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	40013800 	.word	0x40013800
 800771c:	51eb851f 	.word	0x51eb851f

08007720 <rand>:
 8007720:	4b16      	ldr	r3, [pc, #88]	; (800777c <rand+0x5c>)
 8007722:	b510      	push	{r4, lr}
 8007724:	681c      	ldr	r4, [r3, #0]
 8007726:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007728:	b9b3      	cbnz	r3, 8007758 <rand+0x38>
 800772a:	2018      	movs	r0, #24
 800772c:	f000 fa1e 	bl	8007b6c <malloc>
 8007730:	4602      	mov	r2, r0
 8007732:	6320      	str	r0, [r4, #48]	; 0x30
 8007734:	b920      	cbnz	r0, 8007740 <rand+0x20>
 8007736:	2152      	movs	r1, #82	; 0x52
 8007738:	4b11      	ldr	r3, [pc, #68]	; (8007780 <rand+0x60>)
 800773a:	4812      	ldr	r0, [pc, #72]	; (8007784 <rand+0x64>)
 800773c:	f000 f9b0 	bl	8007aa0 <__assert_func>
 8007740:	4911      	ldr	r1, [pc, #68]	; (8007788 <rand+0x68>)
 8007742:	4b12      	ldr	r3, [pc, #72]	; (800778c <rand+0x6c>)
 8007744:	e9c0 1300 	strd	r1, r3, [r0]
 8007748:	4b11      	ldr	r3, [pc, #68]	; (8007790 <rand+0x70>)
 800774a:	2100      	movs	r1, #0
 800774c:	6083      	str	r3, [r0, #8]
 800774e:	230b      	movs	r3, #11
 8007750:	8183      	strh	r3, [r0, #12]
 8007752:	2001      	movs	r0, #1
 8007754:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007758:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800775a:	480e      	ldr	r0, [pc, #56]	; (8007794 <rand+0x74>)
 800775c:	690b      	ldr	r3, [r1, #16]
 800775e:	694c      	ldr	r4, [r1, #20]
 8007760:	4358      	muls	r0, r3
 8007762:	4a0d      	ldr	r2, [pc, #52]	; (8007798 <rand+0x78>)
 8007764:	fb02 0004 	mla	r0, r2, r4, r0
 8007768:	fba3 3202 	umull	r3, r2, r3, r2
 800776c:	3301      	adds	r3, #1
 800776e:	eb40 0002 	adc.w	r0, r0, r2
 8007772:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8007776:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800777a:	bd10      	pop	{r4, pc}
 800777c:	20000120 	.word	0x20000120
 8007780:	0801054e 	.word	0x0801054e
 8007784:	08010565 	.word	0x08010565
 8007788:	abcd330e 	.word	0xabcd330e
 800778c:	e66d1234 	.word	0xe66d1234
 8007790:	0005deec 	.word	0x0005deec
 8007794:	5851f42d 	.word	0x5851f42d
 8007798:	4c957f2d 	.word	0x4c957f2d

0800779c <std>:
 800779c:	2300      	movs	r3, #0
 800779e:	b510      	push	{r4, lr}
 80077a0:	4604      	mov	r4, r0
 80077a2:	e9c0 3300 	strd	r3, r3, [r0]
 80077a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077aa:	6083      	str	r3, [r0, #8]
 80077ac:	8181      	strh	r1, [r0, #12]
 80077ae:	6643      	str	r3, [r0, #100]	; 0x64
 80077b0:	81c2      	strh	r2, [r0, #14]
 80077b2:	6183      	str	r3, [r0, #24]
 80077b4:	4619      	mov	r1, r3
 80077b6:	2208      	movs	r2, #8
 80077b8:	305c      	adds	r0, #92	; 0x5c
 80077ba:	f000 f8f4 	bl	80079a6 <memset>
 80077be:	4b0d      	ldr	r3, [pc, #52]	; (80077f4 <std+0x58>)
 80077c0:	6224      	str	r4, [r4, #32]
 80077c2:	6263      	str	r3, [r4, #36]	; 0x24
 80077c4:	4b0c      	ldr	r3, [pc, #48]	; (80077f8 <std+0x5c>)
 80077c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80077c8:	4b0c      	ldr	r3, [pc, #48]	; (80077fc <std+0x60>)
 80077ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077cc:	4b0c      	ldr	r3, [pc, #48]	; (8007800 <std+0x64>)
 80077ce:	6323      	str	r3, [r4, #48]	; 0x30
 80077d0:	4b0c      	ldr	r3, [pc, #48]	; (8007804 <std+0x68>)
 80077d2:	429c      	cmp	r4, r3
 80077d4:	d006      	beq.n	80077e4 <std+0x48>
 80077d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80077da:	4294      	cmp	r4, r2
 80077dc:	d002      	beq.n	80077e4 <std+0x48>
 80077de:	33d0      	adds	r3, #208	; 0xd0
 80077e0:	429c      	cmp	r4, r3
 80077e2:	d105      	bne.n	80077f0 <std+0x54>
 80077e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80077e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ec:	f000 b954 	b.w	8007a98 <__retarget_lock_init_recursive>
 80077f0:	bd10      	pop	{r4, pc}
 80077f2:	bf00      	nop
 80077f4:	08007921 	.word	0x08007921
 80077f8:	08007943 	.word	0x08007943
 80077fc:	0800797b 	.word	0x0800797b
 8007800:	0800799f 	.word	0x0800799f
 8007804:	20000408 	.word	0x20000408

08007808 <stdio_exit_handler>:
 8007808:	4a02      	ldr	r2, [pc, #8]	; (8007814 <stdio_exit_handler+0xc>)
 800780a:	4903      	ldr	r1, [pc, #12]	; (8007818 <stdio_exit_handler+0x10>)
 800780c:	4803      	ldr	r0, [pc, #12]	; (800781c <stdio_exit_handler+0x14>)
 800780e:	f000 b869 	b.w	80078e4 <_fwalk_sglue>
 8007812:	bf00      	nop
 8007814:	200000c8 	.word	0x200000c8
 8007818:	08007dd9 	.word	0x08007dd9
 800781c:	200000d4 	.word	0x200000d4

08007820 <cleanup_stdio>:
 8007820:	6841      	ldr	r1, [r0, #4]
 8007822:	4b0c      	ldr	r3, [pc, #48]	; (8007854 <cleanup_stdio+0x34>)
 8007824:	b510      	push	{r4, lr}
 8007826:	4299      	cmp	r1, r3
 8007828:	4604      	mov	r4, r0
 800782a:	d001      	beq.n	8007830 <cleanup_stdio+0x10>
 800782c:	f000 fad4 	bl	8007dd8 <_fflush_r>
 8007830:	68a1      	ldr	r1, [r4, #8]
 8007832:	4b09      	ldr	r3, [pc, #36]	; (8007858 <cleanup_stdio+0x38>)
 8007834:	4299      	cmp	r1, r3
 8007836:	d002      	beq.n	800783e <cleanup_stdio+0x1e>
 8007838:	4620      	mov	r0, r4
 800783a:	f000 facd 	bl	8007dd8 <_fflush_r>
 800783e:	68e1      	ldr	r1, [r4, #12]
 8007840:	4b06      	ldr	r3, [pc, #24]	; (800785c <cleanup_stdio+0x3c>)
 8007842:	4299      	cmp	r1, r3
 8007844:	d004      	beq.n	8007850 <cleanup_stdio+0x30>
 8007846:	4620      	mov	r0, r4
 8007848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800784c:	f000 bac4 	b.w	8007dd8 <_fflush_r>
 8007850:	bd10      	pop	{r4, pc}
 8007852:	bf00      	nop
 8007854:	20000408 	.word	0x20000408
 8007858:	20000470 	.word	0x20000470
 800785c:	200004d8 	.word	0x200004d8

08007860 <global_stdio_init.part.0>:
 8007860:	b510      	push	{r4, lr}
 8007862:	4b0b      	ldr	r3, [pc, #44]	; (8007890 <global_stdio_init.part.0+0x30>)
 8007864:	4c0b      	ldr	r4, [pc, #44]	; (8007894 <global_stdio_init.part.0+0x34>)
 8007866:	4a0c      	ldr	r2, [pc, #48]	; (8007898 <global_stdio_init.part.0+0x38>)
 8007868:	4620      	mov	r0, r4
 800786a:	601a      	str	r2, [r3, #0]
 800786c:	2104      	movs	r1, #4
 800786e:	2200      	movs	r2, #0
 8007870:	f7ff ff94 	bl	800779c <std>
 8007874:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007878:	2201      	movs	r2, #1
 800787a:	2109      	movs	r1, #9
 800787c:	f7ff ff8e 	bl	800779c <std>
 8007880:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007884:	2202      	movs	r2, #2
 8007886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800788a:	2112      	movs	r1, #18
 800788c:	f7ff bf86 	b.w	800779c <std>
 8007890:	20000540 	.word	0x20000540
 8007894:	20000408 	.word	0x20000408
 8007898:	08007809 	.word	0x08007809

0800789c <__sfp_lock_acquire>:
 800789c:	4801      	ldr	r0, [pc, #4]	; (80078a4 <__sfp_lock_acquire+0x8>)
 800789e:	f000 b8fc 	b.w	8007a9a <__retarget_lock_acquire_recursive>
 80078a2:	bf00      	nop
 80078a4:	20000549 	.word	0x20000549

080078a8 <__sfp_lock_release>:
 80078a8:	4801      	ldr	r0, [pc, #4]	; (80078b0 <__sfp_lock_release+0x8>)
 80078aa:	f000 b8f7 	b.w	8007a9c <__retarget_lock_release_recursive>
 80078ae:	bf00      	nop
 80078b0:	20000549 	.word	0x20000549

080078b4 <__sinit>:
 80078b4:	b510      	push	{r4, lr}
 80078b6:	4604      	mov	r4, r0
 80078b8:	f7ff fff0 	bl	800789c <__sfp_lock_acquire>
 80078bc:	6a23      	ldr	r3, [r4, #32]
 80078be:	b11b      	cbz	r3, 80078c8 <__sinit+0x14>
 80078c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078c4:	f7ff bff0 	b.w	80078a8 <__sfp_lock_release>
 80078c8:	4b04      	ldr	r3, [pc, #16]	; (80078dc <__sinit+0x28>)
 80078ca:	6223      	str	r3, [r4, #32]
 80078cc:	4b04      	ldr	r3, [pc, #16]	; (80078e0 <__sinit+0x2c>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1f5      	bne.n	80078c0 <__sinit+0xc>
 80078d4:	f7ff ffc4 	bl	8007860 <global_stdio_init.part.0>
 80078d8:	e7f2      	b.n	80078c0 <__sinit+0xc>
 80078da:	bf00      	nop
 80078dc:	08007821 	.word	0x08007821
 80078e0:	20000540 	.word	0x20000540

080078e4 <_fwalk_sglue>:
 80078e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078e8:	4607      	mov	r7, r0
 80078ea:	4688      	mov	r8, r1
 80078ec:	4614      	mov	r4, r2
 80078ee:	2600      	movs	r6, #0
 80078f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078f4:	f1b9 0901 	subs.w	r9, r9, #1
 80078f8:	d505      	bpl.n	8007906 <_fwalk_sglue+0x22>
 80078fa:	6824      	ldr	r4, [r4, #0]
 80078fc:	2c00      	cmp	r4, #0
 80078fe:	d1f7      	bne.n	80078f0 <_fwalk_sglue+0xc>
 8007900:	4630      	mov	r0, r6
 8007902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007906:	89ab      	ldrh	r3, [r5, #12]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d907      	bls.n	800791c <_fwalk_sglue+0x38>
 800790c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007910:	3301      	adds	r3, #1
 8007912:	d003      	beq.n	800791c <_fwalk_sglue+0x38>
 8007914:	4629      	mov	r1, r5
 8007916:	4638      	mov	r0, r7
 8007918:	47c0      	blx	r8
 800791a:	4306      	orrs	r6, r0
 800791c:	3568      	adds	r5, #104	; 0x68
 800791e:	e7e9      	b.n	80078f4 <_fwalk_sglue+0x10>

08007920 <__sread>:
 8007920:	b510      	push	{r4, lr}
 8007922:	460c      	mov	r4, r1
 8007924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007928:	f000 f868 	bl	80079fc <_read_r>
 800792c:	2800      	cmp	r0, #0
 800792e:	bfab      	itete	ge
 8007930:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007932:	89a3      	ldrhlt	r3, [r4, #12]
 8007934:	181b      	addge	r3, r3, r0
 8007936:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800793a:	bfac      	ite	ge
 800793c:	6563      	strge	r3, [r4, #84]	; 0x54
 800793e:	81a3      	strhlt	r3, [r4, #12]
 8007940:	bd10      	pop	{r4, pc}

08007942 <__swrite>:
 8007942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007946:	461f      	mov	r7, r3
 8007948:	898b      	ldrh	r3, [r1, #12]
 800794a:	4605      	mov	r5, r0
 800794c:	05db      	lsls	r3, r3, #23
 800794e:	460c      	mov	r4, r1
 8007950:	4616      	mov	r6, r2
 8007952:	d505      	bpl.n	8007960 <__swrite+0x1e>
 8007954:	2302      	movs	r3, #2
 8007956:	2200      	movs	r2, #0
 8007958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800795c:	f000 f83c 	bl	80079d8 <_lseek_r>
 8007960:	89a3      	ldrh	r3, [r4, #12]
 8007962:	4632      	mov	r2, r6
 8007964:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007968:	81a3      	strh	r3, [r4, #12]
 800796a:	4628      	mov	r0, r5
 800796c:	463b      	mov	r3, r7
 800796e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007976:	f000 b853 	b.w	8007a20 <_write_r>

0800797a <__sseek>:
 800797a:	b510      	push	{r4, lr}
 800797c:	460c      	mov	r4, r1
 800797e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007982:	f000 f829 	bl	80079d8 <_lseek_r>
 8007986:	1c43      	adds	r3, r0, #1
 8007988:	89a3      	ldrh	r3, [r4, #12]
 800798a:	bf15      	itete	ne
 800798c:	6560      	strne	r0, [r4, #84]	; 0x54
 800798e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007992:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007996:	81a3      	strheq	r3, [r4, #12]
 8007998:	bf18      	it	ne
 800799a:	81a3      	strhne	r3, [r4, #12]
 800799c:	bd10      	pop	{r4, pc}

0800799e <__sclose>:
 800799e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a2:	f000 b809 	b.w	80079b8 <_close_r>

080079a6 <memset>:
 80079a6:	4603      	mov	r3, r0
 80079a8:	4402      	add	r2, r0
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d100      	bne.n	80079b0 <memset+0xa>
 80079ae:	4770      	bx	lr
 80079b0:	f803 1b01 	strb.w	r1, [r3], #1
 80079b4:	e7f9      	b.n	80079aa <memset+0x4>
	...

080079b8 <_close_r>:
 80079b8:	b538      	push	{r3, r4, r5, lr}
 80079ba:	2300      	movs	r3, #0
 80079bc:	4d05      	ldr	r5, [pc, #20]	; (80079d4 <_close_r+0x1c>)
 80079be:	4604      	mov	r4, r0
 80079c0:	4608      	mov	r0, r1
 80079c2:	602b      	str	r3, [r5, #0]
 80079c4:	f7fe f8df 	bl	8005b86 <_close>
 80079c8:	1c43      	adds	r3, r0, #1
 80079ca:	d102      	bne.n	80079d2 <_close_r+0x1a>
 80079cc:	682b      	ldr	r3, [r5, #0]
 80079ce:	b103      	cbz	r3, 80079d2 <_close_r+0x1a>
 80079d0:	6023      	str	r3, [r4, #0]
 80079d2:	bd38      	pop	{r3, r4, r5, pc}
 80079d4:	20000544 	.word	0x20000544

080079d8 <_lseek_r>:
 80079d8:	b538      	push	{r3, r4, r5, lr}
 80079da:	4604      	mov	r4, r0
 80079dc:	4608      	mov	r0, r1
 80079de:	4611      	mov	r1, r2
 80079e0:	2200      	movs	r2, #0
 80079e2:	4d05      	ldr	r5, [pc, #20]	; (80079f8 <_lseek_r+0x20>)
 80079e4:	602a      	str	r2, [r5, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	f7fe f8f1 	bl	8005bce <_lseek>
 80079ec:	1c43      	adds	r3, r0, #1
 80079ee:	d102      	bne.n	80079f6 <_lseek_r+0x1e>
 80079f0:	682b      	ldr	r3, [r5, #0]
 80079f2:	b103      	cbz	r3, 80079f6 <_lseek_r+0x1e>
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	bd38      	pop	{r3, r4, r5, pc}
 80079f8:	20000544 	.word	0x20000544

080079fc <_read_r>:
 80079fc:	b538      	push	{r3, r4, r5, lr}
 80079fe:	4604      	mov	r4, r0
 8007a00:	4608      	mov	r0, r1
 8007a02:	4611      	mov	r1, r2
 8007a04:	2200      	movs	r2, #0
 8007a06:	4d05      	ldr	r5, [pc, #20]	; (8007a1c <_read_r+0x20>)
 8007a08:	602a      	str	r2, [r5, #0]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	f7fe f882 	bl	8005b14 <_read>
 8007a10:	1c43      	adds	r3, r0, #1
 8007a12:	d102      	bne.n	8007a1a <_read_r+0x1e>
 8007a14:	682b      	ldr	r3, [r5, #0]
 8007a16:	b103      	cbz	r3, 8007a1a <_read_r+0x1e>
 8007a18:	6023      	str	r3, [r4, #0]
 8007a1a:	bd38      	pop	{r3, r4, r5, pc}
 8007a1c:	20000544 	.word	0x20000544

08007a20 <_write_r>:
 8007a20:	b538      	push	{r3, r4, r5, lr}
 8007a22:	4604      	mov	r4, r0
 8007a24:	4608      	mov	r0, r1
 8007a26:	4611      	mov	r1, r2
 8007a28:	2200      	movs	r2, #0
 8007a2a:	4d05      	ldr	r5, [pc, #20]	; (8007a40 <_write_r+0x20>)
 8007a2c:	602a      	str	r2, [r5, #0]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	f7fe f88d 	bl	8005b4e <_write>
 8007a34:	1c43      	adds	r3, r0, #1
 8007a36:	d102      	bne.n	8007a3e <_write_r+0x1e>
 8007a38:	682b      	ldr	r3, [r5, #0]
 8007a3a:	b103      	cbz	r3, 8007a3e <_write_r+0x1e>
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	bd38      	pop	{r3, r4, r5, pc}
 8007a40:	20000544 	.word	0x20000544

08007a44 <__errno>:
 8007a44:	4b01      	ldr	r3, [pc, #4]	; (8007a4c <__errno+0x8>)
 8007a46:	6818      	ldr	r0, [r3, #0]
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	20000120 	.word	0x20000120

08007a50 <__libc_init_array>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	2600      	movs	r6, #0
 8007a54:	4d0c      	ldr	r5, [pc, #48]	; (8007a88 <__libc_init_array+0x38>)
 8007a56:	4c0d      	ldr	r4, [pc, #52]	; (8007a8c <__libc_init_array+0x3c>)
 8007a58:	1b64      	subs	r4, r4, r5
 8007a5a:	10a4      	asrs	r4, r4, #2
 8007a5c:	42a6      	cmp	r6, r4
 8007a5e:	d109      	bne.n	8007a74 <__libc_init_array+0x24>
 8007a60:	f000 fe4c 	bl	80086fc <_init>
 8007a64:	2600      	movs	r6, #0
 8007a66:	4d0a      	ldr	r5, [pc, #40]	; (8007a90 <__libc_init_array+0x40>)
 8007a68:	4c0a      	ldr	r4, [pc, #40]	; (8007a94 <__libc_init_array+0x44>)
 8007a6a:	1b64      	subs	r4, r4, r5
 8007a6c:	10a4      	asrs	r4, r4, #2
 8007a6e:	42a6      	cmp	r6, r4
 8007a70:	d105      	bne.n	8007a7e <__libc_init_array+0x2e>
 8007a72:	bd70      	pop	{r4, r5, r6, pc}
 8007a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a78:	4798      	blx	r3
 8007a7a:	3601      	adds	r6, #1
 8007a7c:	e7ee      	b.n	8007a5c <__libc_init_array+0xc>
 8007a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a82:	4798      	blx	r3
 8007a84:	3601      	adds	r6, #1
 8007a86:	e7f2      	b.n	8007a6e <__libc_init_array+0x1e>
 8007a88:	0801062c 	.word	0x0801062c
 8007a8c:	0801062c 	.word	0x0801062c
 8007a90:	0801062c 	.word	0x0801062c
 8007a94:	08010630 	.word	0x08010630

08007a98 <__retarget_lock_init_recursive>:
 8007a98:	4770      	bx	lr

08007a9a <__retarget_lock_acquire_recursive>:
 8007a9a:	4770      	bx	lr

08007a9c <__retarget_lock_release_recursive>:
 8007a9c:	4770      	bx	lr
	...

08007aa0 <__assert_func>:
 8007aa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007aa2:	4614      	mov	r4, r2
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	4b09      	ldr	r3, [pc, #36]	; (8007acc <__assert_func+0x2c>)
 8007aa8:	4605      	mov	r5, r0
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68d8      	ldr	r0, [r3, #12]
 8007aae:	b14c      	cbz	r4, 8007ac4 <__assert_func+0x24>
 8007ab0:	4b07      	ldr	r3, [pc, #28]	; (8007ad0 <__assert_func+0x30>)
 8007ab2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ab6:	9100      	str	r1, [sp, #0]
 8007ab8:	462b      	mov	r3, r5
 8007aba:	4906      	ldr	r1, [pc, #24]	; (8007ad4 <__assert_func+0x34>)
 8007abc:	f000 f9b4 	bl	8007e28 <fiprintf>
 8007ac0:	f000 f9d4 	bl	8007e6c <abort>
 8007ac4:	4b04      	ldr	r3, [pc, #16]	; (8007ad8 <__assert_func+0x38>)
 8007ac6:	461c      	mov	r4, r3
 8007ac8:	e7f3      	b.n	8007ab2 <__assert_func+0x12>
 8007aca:	bf00      	nop
 8007acc:	20000120 	.word	0x20000120
 8007ad0:	080105bd 	.word	0x080105bd
 8007ad4:	080105ca 	.word	0x080105ca
 8007ad8:	080105f8 	.word	0x080105f8

08007adc <_free_r>:
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	4605      	mov	r5, r0
 8007ae0:	2900      	cmp	r1, #0
 8007ae2:	d040      	beq.n	8007b66 <_free_r+0x8a>
 8007ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ae8:	1f0c      	subs	r4, r1, #4
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	bfb8      	it	lt
 8007aee:	18e4      	addlt	r4, r4, r3
 8007af0:	f000 f8e4 	bl	8007cbc <__malloc_lock>
 8007af4:	4a1c      	ldr	r2, [pc, #112]	; (8007b68 <_free_r+0x8c>)
 8007af6:	6813      	ldr	r3, [r2, #0]
 8007af8:	b933      	cbnz	r3, 8007b08 <_free_r+0x2c>
 8007afa:	6063      	str	r3, [r4, #4]
 8007afc:	6014      	str	r4, [r2, #0]
 8007afe:	4628      	mov	r0, r5
 8007b00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b04:	f000 b8e0 	b.w	8007cc8 <__malloc_unlock>
 8007b08:	42a3      	cmp	r3, r4
 8007b0a:	d908      	bls.n	8007b1e <_free_r+0x42>
 8007b0c:	6820      	ldr	r0, [r4, #0]
 8007b0e:	1821      	adds	r1, r4, r0
 8007b10:	428b      	cmp	r3, r1
 8007b12:	bf01      	itttt	eq
 8007b14:	6819      	ldreq	r1, [r3, #0]
 8007b16:	685b      	ldreq	r3, [r3, #4]
 8007b18:	1809      	addeq	r1, r1, r0
 8007b1a:	6021      	streq	r1, [r4, #0]
 8007b1c:	e7ed      	b.n	8007afa <_free_r+0x1e>
 8007b1e:	461a      	mov	r2, r3
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	b10b      	cbz	r3, 8007b28 <_free_r+0x4c>
 8007b24:	42a3      	cmp	r3, r4
 8007b26:	d9fa      	bls.n	8007b1e <_free_r+0x42>
 8007b28:	6811      	ldr	r1, [r2, #0]
 8007b2a:	1850      	adds	r0, r2, r1
 8007b2c:	42a0      	cmp	r0, r4
 8007b2e:	d10b      	bne.n	8007b48 <_free_r+0x6c>
 8007b30:	6820      	ldr	r0, [r4, #0]
 8007b32:	4401      	add	r1, r0
 8007b34:	1850      	adds	r0, r2, r1
 8007b36:	4283      	cmp	r3, r0
 8007b38:	6011      	str	r1, [r2, #0]
 8007b3a:	d1e0      	bne.n	8007afe <_free_r+0x22>
 8007b3c:	6818      	ldr	r0, [r3, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	4408      	add	r0, r1
 8007b42:	6010      	str	r0, [r2, #0]
 8007b44:	6053      	str	r3, [r2, #4]
 8007b46:	e7da      	b.n	8007afe <_free_r+0x22>
 8007b48:	d902      	bls.n	8007b50 <_free_r+0x74>
 8007b4a:	230c      	movs	r3, #12
 8007b4c:	602b      	str	r3, [r5, #0]
 8007b4e:	e7d6      	b.n	8007afe <_free_r+0x22>
 8007b50:	6820      	ldr	r0, [r4, #0]
 8007b52:	1821      	adds	r1, r4, r0
 8007b54:	428b      	cmp	r3, r1
 8007b56:	bf01      	itttt	eq
 8007b58:	6819      	ldreq	r1, [r3, #0]
 8007b5a:	685b      	ldreq	r3, [r3, #4]
 8007b5c:	1809      	addeq	r1, r1, r0
 8007b5e:	6021      	streq	r1, [r4, #0]
 8007b60:	6063      	str	r3, [r4, #4]
 8007b62:	6054      	str	r4, [r2, #4]
 8007b64:	e7cb      	b.n	8007afe <_free_r+0x22>
 8007b66:	bd38      	pop	{r3, r4, r5, pc}
 8007b68:	2000054c 	.word	0x2000054c

08007b6c <malloc>:
 8007b6c:	4b02      	ldr	r3, [pc, #8]	; (8007b78 <malloc+0xc>)
 8007b6e:	4601      	mov	r1, r0
 8007b70:	6818      	ldr	r0, [r3, #0]
 8007b72:	f000 b823 	b.w	8007bbc <_malloc_r>
 8007b76:	bf00      	nop
 8007b78:	20000120 	.word	0x20000120

08007b7c <sbrk_aligned>:
 8007b7c:	b570      	push	{r4, r5, r6, lr}
 8007b7e:	4e0e      	ldr	r6, [pc, #56]	; (8007bb8 <sbrk_aligned+0x3c>)
 8007b80:	460c      	mov	r4, r1
 8007b82:	6831      	ldr	r1, [r6, #0]
 8007b84:	4605      	mov	r5, r0
 8007b86:	b911      	cbnz	r1, 8007b8e <sbrk_aligned+0x12>
 8007b88:	f000 f960 	bl	8007e4c <_sbrk_r>
 8007b8c:	6030      	str	r0, [r6, #0]
 8007b8e:	4621      	mov	r1, r4
 8007b90:	4628      	mov	r0, r5
 8007b92:	f000 f95b 	bl	8007e4c <_sbrk_r>
 8007b96:	1c43      	adds	r3, r0, #1
 8007b98:	d00a      	beq.n	8007bb0 <sbrk_aligned+0x34>
 8007b9a:	1cc4      	adds	r4, r0, #3
 8007b9c:	f024 0403 	bic.w	r4, r4, #3
 8007ba0:	42a0      	cmp	r0, r4
 8007ba2:	d007      	beq.n	8007bb4 <sbrk_aligned+0x38>
 8007ba4:	1a21      	subs	r1, r4, r0
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	f000 f950 	bl	8007e4c <_sbrk_r>
 8007bac:	3001      	adds	r0, #1
 8007bae:	d101      	bne.n	8007bb4 <sbrk_aligned+0x38>
 8007bb0:	f04f 34ff 	mov.w	r4, #4294967295
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	bd70      	pop	{r4, r5, r6, pc}
 8007bb8:	20000550 	.word	0x20000550

08007bbc <_malloc_r>:
 8007bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bc0:	1ccd      	adds	r5, r1, #3
 8007bc2:	f025 0503 	bic.w	r5, r5, #3
 8007bc6:	3508      	adds	r5, #8
 8007bc8:	2d0c      	cmp	r5, #12
 8007bca:	bf38      	it	cc
 8007bcc:	250c      	movcc	r5, #12
 8007bce:	2d00      	cmp	r5, #0
 8007bd0:	4607      	mov	r7, r0
 8007bd2:	db01      	blt.n	8007bd8 <_malloc_r+0x1c>
 8007bd4:	42a9      	cmp	r1, r5
 8007bd6:	d905      	bls.n	8007be4 <_malloc_r+0x28>
 8007bd8:	230c      	movs	r3, #12
 8007bda:	2600      	movs	r6, #0
 8007bdc:	603b      	str	r3, [r7, #0]
 8007bde:	4630      	mov	r0, r6
 8007be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007be4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007cb8 <_malloc_r+0xfc>
 8007be8:	f000 f868 	bl	8007cbc <__malloc_lock>
 8007bec:	f8d8 3000 	ldr.w	r3, [r8]
 8007bf0:	461c      	mov	r4, r3
 8007bf2:	bb5c      	cbnz	r4, 8007c4c <_malloc_r+0x90>
 8007bf4:	4629      	mov	r1, r5
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	f7ff ffc0 	bl	8007b7c <sbrk_aligned>
 8007bfc:	1c43      	adds	r3, r0, #1
 8007bfe:	4604      	mov	r4, r0
 8007c00:	d155      	bne.n	8007cae <_malloc_r+0xf2>
 8007c02:	f8d8 4000 	ldr.w	r4, [r8]
 8007c06:	4626      	mov	r6, r4
 8007c08:	2e00      	cmp	r6, #0
 8007c0a:	d145      	bne.n	8007c98 <_malloc_r+0xdc>
 8007c0c:	2c00      	cmp	r4, #0
 8007c0e:	d048      	beq.n	8007ca2 <_malloc_r+0xe6>
 8007c10:	6823      	ldr	r3, [r4, #0]
 8007c12:	4631      	mov	r1, r6
 8007c14:	4638      	mov	r0, r7
 8007c16:	eb04 0903 	add.w	r9, r4, r3
 8007c1a:	f000 f917 	bl	8007e4c <_sbrk_r>
 8007c1e:	4581      	cmp	r9, r0
 8007c20:	d13f      	bne.n	8007ca2 <_malloc_r+0xe6>
 8007c22:	6821      	ldr	r1, [r4, #0]
 8007c24:	4638      	mov	r0, r7
 8007c26:	1a6d      	subs	r5, r5, r1
 8007c28:	4629      	mov	r1, r5
 8007c2a:	f7ff ffa7 	bl	8007b7c <sbrk_aligned>
 8007c2e:	3001      	adds	r0, #1
 8007c30:	d037      	beq.n	8007ca2 <_malloc_r+0xe6>
 8007c32:	6823      	ldr	r3, [r4, #0]
 8007c34:	442b      	add	r3, r5
 8007c36:	6023      	str	r3, [r4, #0]
 8007c38:	f8d8 3000 	ldr.w	r3, [r8]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d038      	beq.n	8007cb2 <_malloc_r+0xf6>
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	42a2      	cmp	r2, r4
 8007c44:	d12b      	bne.n	8007c9e <_malloc_r+0xe2>
 8007c46:	2200      	movs	r2, #0
 8007c48:	605a      	str	r2, [r3, #4]
 8007c4a:	e00f      	b.n	8007c6c <_malloc_r+0xb0>
 8007c4c:	6822      	ldr	r2, [r4, #0]
 8007c4e:	1b52      	subs	r2, r2, r5
 8007c50:	d41f      	bmi.n	8007c92 <_malloc_r+0xd6>
 8007c52:	2a0b      	cmp	r2, #11
 8007c54:	d917      	bls.n	8007c86 <_malloc_r+0xca>
 8007c56:	1961      	adds	r1, r4, r5
 8007c58:	42a3      	cmp	r3, r4
 8007c5a:	6025      	str	r5, [r4, #0]
 8007c5c:	bf18      	it	ne
 8007c5e:	6059      	strne	r1, [r3, #4]
 8007c60:	6863      	ldr	r3, [r4, #4]
 8007c62:	bf08      	it	eq
 8007c64:	f8c8 1000 	streq.w	r1, [r8]
 8007c68:	5162      	str	r2, [r4, r5]
 8007c6a:	604b      	str	r3, [r1, #4]
 8007c6c:	4638      	mov	r0, r7
 8007c6e:	f104 060b 	add.w	r6, r4, #11
 8007c72:	f000 f829 	bl	8007cc8 <__malloc_unlock>
 8007c76:	f026 0607 	bic.w	r6, r6, #7
 8007c7a:	1d23      	adds	r3, r4, #4
 8007c7c:	1af2      	subs	r2, r6, r3
 8007c7e:	d0ae      	beq.n	8007bde <_malloc_r+0x22>
 8007c80:	1b9b      	subs	r3, r3, r6
 8007c82:	50a3      	str	r3, [r4, r2]
 8007c84:	e7ab      	b.n	8007bde <_malloc_r+0x22>
 8007c86:	42a3      	cmp	r3, r4
 8007c88:	6862      	ldr	r2, [r4, #4]
 8007c8a:	d1dd      	bne.n	8007c48 <_malloc_r+0x8c>
 8007c8c:	f8c8 2000 	str.w	r2, [r8]
 8007c90:	e7ec      	b.n	8007c6c <_malloc_r+0xb0>
 8007c92:	4623      	mov	r3, r4
 8007c94:	6864      	ldr	r4, [r4, #4]
 8007c96:	e7ac      	b.n	8007bf2 <_malloc_r+0x36>
 8007c98:	4634      	mov	r4, r6
 8007c9a:	6876      	ldr	r6, [r6, #4]
 8007c9c:	e7b4      	b.n	8007c08 <_malloc_r+0x4c>
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	e7cc      	b.n	8007c3c <_malloc_r+0x80>
 8007ca2:	230c      	movs	r3, #12
 8007ca4:	4638      	mov	r0, r7
 8007ca6:	603b      	str	r3, [r7, #0]
 8007ca8:	f000 f80e 	bl	8007cc8 <__malloc_unlock>
 8007cac:	e797      	b.n	8007bde <_malloc_r+0x22>
 8007cae:	6025      	str	r5, [r4, #0]
 8007cb0:	e7dc      	b.n	8007c6c <_malloc_r+0xb0>
 8007cb2:	605b      	str	r3, [r3, #4]
 8007cb4:	deff      	udf	#255	; 0xff
 8007cb6:	bf00      	nop
 8007cb8:	2000054c 	.word	0x2000054c

08007cbc <__malloc_lock>:
 8007cbc:	4801      	ldr	r0, [pc, #4]	; (8007cc4 <__malloc_lock+0x8>)
 8007cbe:	f7ff beec 	b.w	8007a9a <__retarget_lock_acquire_recursive>
 8007cc2:	bf00      	nop
 8007cc4:	20000548 	.word	0x20000548

08007cc8 <__malloc_unlock>:
 8007cc8:	4801      	ldr	r0, [pc, #4]	; (8007cd0 <__malloc_unlock+0x8>)
 8007cca:	f7ff bee7 	b.w	8007a9c <__retarget_lock_release_recursive>
 8007cce:	bf00      	nop
 8007cd0:	20000548 	.word	0x20000548

08007cd4 <__sflush_r>:
 8007cd4:	898a      	ldrh	r2, [r1, #12]
 8007cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd8:	4605      	mov	r5, r0
 8007cda:	0710      	lsls	r0, r2, #28
 8007cdc:	460c      	mov	r4, r1
 8007cde:	d457      	bmi.n	8007d90 <__sflush_r+0xbc>
 8007ce0:	684b      	ldr	r3, [r1, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	dc04      	bgt.n	8007cf0 <__sflush_r+0x1c>
 8007ce6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	dc01      	bgt.n	8007cf0 <__sflush_r+0x1c>
 8007cec:	2000      	movs	r0, #0
 8007cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cf2:	2e00      	cmp	r6, #0
 8007cf4:	d0fa      	beq.n	8007cec <__sflush_r+0x18>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007cfc:	682f      	ldr	r7, [r5, #0]
 8007cfe:	6a21      	ldr	r1, [r4, #32]
 8007d00:	602b      	str	r3, [r5, #0]
 8007d02:	d032      	beq.n	8007d6a <__sflush_r+0x96>
 8007d04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d06:	89a3      	ldrh	r3, [r4, #12]
 8007d08:	075a      	lsls	r2, r3, #29
 8007d0a:	d505      	bpl.n	8007d18 <__sflush_r+0x44>
 8007d0c:	6863      	ldr	r3, [r4, #4]
 8007d0e:	1ac0      	subs	r0, r0, r3
 8007d10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d12:	b10b      	cbz	r3, 8007d18 <__sflush_r+0x44>
 8007d14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d16:	1ac0      	subs	r0, r0, r3
 8007d18:	2300      	movs	r3, #0
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d1e:	4628      	mov	r0, r5
 8007d20:	6a21      	ldr	r1, [r4, #32]
 8007d22:	47b0      	blx	r6
 8007d24:	1c43      	adds	r3, r0, #1
 8007d26:	89a3      	ldrh	r3, [r4, #12]
 8007d28:	d106      	bne.n	8007d38 <__sflush_r+0x64>
 8007d2a:	6829      	ldr	r1, [r5, #0]
 8007d2c:	291d      	cmp	r1, #29
 8007d2e:	d82b      	bhi.n	8007d88 <__sflush_r+0xb4>
 8007d30:	4a28      	ldr	r2, [pc, #160]	; (8007dd4 <__sflush_r+0x100>)
 8007d32:	410a      	asrs	r2, r1
 8007d34:	07d6      	lsls	r6, r2, #31
 8007d36:	d427      	bmi.n	8007d88 <__sflush_r+0xb4>
 8007d38:	2200      	movs	r2, #0
 8007d3a:	6062      	str	r2, [r4, #4]
 8007d3c:	6922      	ldr	r2, [r4, #16]
 8007d3e:	04d9      	lsls	r1, r3, #19
 8007d40:	6022      	str	r2, [r4, #0]
 8007d42:	d504      	bpl.n	8007d4e <__sflush_r+0x7a>
 8007d44:	1c42      	adds	r2, r0, #1
 8007d46:	d101      	bne.n	8007d4c <__sflush_r+0x78>
 8007d48:	682b      	ldr	r3, [r5, #0]
 8007d4a:	b903      	cbnz	r3, 8007d4e <__sflush_r+0x7a>
 8007d4c:	6560      	str	r0, [r4, #84]	; 0x54
 8007d4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d50:	602f      	str	r7, [r5, #0]
 8007d52:	2900      	cmp	r1, #0
 8007d54:	d0ca      	beq.n	8007cec <__sflush_r+0x18>
 8007d56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d5a:	4299      	cmp	r1, r3
 8007d5c:	d002      	beq.n	8007d64 <__sflush_r+0x90>
 8007d5e:	4628      	mov	r0, r5
 8007d60:	f7ff febc 	bl	8007adc <_free_r>
 8007d64:	2000      	movs	r0, #0
 8007d66:	6360      	str	r0, [r4, #52]	; 0x34
 8007d68:	e7c1      	b.n	8007cee <__sflush_r+0x1a>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	47b0      	blx	r6
 8007d70:	1c41      	adds	r1, r0, #1
 8007d72:	d1c8      	bne.n	8007d06 <__sflush_r+0x32>
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d0c5      	beq.n	8007d06 <__sflush_r+0x32>
 8007d7a:	2b1d      	cmp	r3, #29
 8007d7c:	d001      	beq.n	8007d82 <__sflush_r+0xae>
 8007d7e:	2b16      	cmp	r3, #22
 8007d80:	d101      	bne.n	8007d86 <__sflush_r+0xb2>
 8007d82:	602f      	str	r7, [r5, #0]
 8007d84:	e7b2      	b.n	8007cec <__sflush_r+0x18>
 8007d86:	89a3      	ldrh	r3, [r4, #12]
 8007d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d8c:	81a3      	strh	r3, [r4, #12]
 8007d8e:	e7ae      	b.n	8007cee <__sflush_r+0x1a>
 8007d90:	690f      	ldr	r7, [r1, #16]
 8007d92:	2f00      	cmp	r7, #0
 8007d94:	d0aa      	beq.n	8007cec <__sflush_r+0x18>
 8007d96:	0793      	lsls	r3, r2, #30
 8007d98:	bf18      	it	ne
 8007d9a:	2300      	movne	r3, #0
 8007d9c:	680e      	ldr	r6, [r1, #0]
 8007d9e:	bf08      	it	eq
 8007da0:	694b      	ldreq	r3, [r1, #20]
 8007da2:	1bf6      	subs	r6, r6, r7
 8007da4:	600f      	str	r7, [r1, #0]
 8007da6:	608b      	str	r3, [r1, #8]
 8007da8:	2e00      	cmp	r6, #0
 8007daa:	dd9f      	ble.n	8007cec <__sflush_r+0x18>
 8007dac:	4633      	mov	r3, r6
 8007dae:	463a      	mov	r2, r7
 8007db0:	4628      	mov	r0, r5
 8007db2:	6a21      	ldr	r1, [r4, #32]
 8007db4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007db8:	47e0      	blx	ip
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	dc06      	bgt.n	8007dcc <__sflush_r+0xf8>
 8007dbe:	89a3      	ldrh	r3, [r4, #12]
 8007dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dc8:	81a3      	strh	r3, [r4, #12]
 8007dca:	e790      	b.n	8007cee <__sflush_r+0x1a>
 8007dcc:	4407      	add	r7, r0
 8007dce:	1a36      	subs	r6, r6, r0
 8007dd0:	e7ea      	b.n	8007da8 <__sflush_r+0xd4>
 8007dd2:	bf00      	nop
 8007dd4:	dfbffffe 	.word	0xdfbffffe

08007dd8 <_fflush_r>:
 8007dd8:	b538      	push	{r3, r4, r5, lr}
 8007dda:	690b      	ldr	r3, [r1, #16]
 8007ddc:	4605      	mov	r5, r0
 8007dde:	460c      	mov	r4, r1
 8007de0:	b913      	cbnz	r3, 8007de8 <_fflush_r+0x10>
 8007de2:	2500      	movs	r5, #0
 8007de4:	4628      	mov	r0, r5
 8007de6:	bd38      	pop	{r3, r4, r5, pc}
 8007de8:	b118      	cbz	r0, 8007df2 <_fflush_r+0x1a>
 8007dea:	6a03      	ldr	r3, [r0, #32]
 8007dec:	b90b      	cbnz	r3, 8007df2 <_fflush_r+0x1a>
 8007dee:	f7ff fd61 	bl	80078b4 <__sinit>
 8007df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d0f3      	beq.n	8007de2 <_fflush_r+0xa>
 8007dfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007dfc:	07d0      	lsls	r0, r2, #31
 8007dfe:	d404      	bmi.n	8007e0a <_fflush_r+0x32>
 8007e00:	0599      	lsls	r1, r3, #22
 8007e02:	d402      	bmi.n	8007e0a <_fflush_r+0x32>
 8007e04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e06:	f7ff fe48 	bl	8007a9a <__retarget_lock_acquire_recursive>
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	f7ff ff61 	bl	8007cd4 <__sflush_r>
 8007e12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e14:	4605      	mov	r5, r0
 8007e16:	07da      	lsls	r2, r3, #31
 8007e18:	d4e4      	bmi.n	8007de4 <_fflush_r+0xc>
 8007e1a:	89a3      	ldrh	r3, [r4, #12]
 8007e1c:	059b      	lsls	r3, r3, #22
 8007e1e:	d4e1      	bmi.n	8007de4 <_fflush_r+0xc>
 8007e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e22:	f7ff fe3b 	bl	8007a9c <__retarget_lock_release_recursive>
 8007e26:	e7dd      	b.n	8007de4 <_fflush_r+0xc>

08007e28 <fiprintf>:
 8007e28:	b40e      	push	{r1, r2, r3}
 8007e2a:	b503      	push	{r0, r1, lr}
 8007e2c:	4601      	mov	r1, r0
 8007e2e:	ab03      	add	r3, sp, #12
 8007e30:	4805      	ldr	r0, [pc, #20]	; (8007e48 <fiprintf+0x20>)
 8007e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e36:	6800      	ldr	r0, [r0, #0]
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	f000 f845 	bl	8007ec8 <_vfiprintf_r>
 8007e3e:	b002      	add	sp, #8
 8007e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e44:	b003      	add	sp, #12
 8007e46:	4770      	bx	lr
 8007e48:	20000120 	.word	0x20000120

08007e4c <_sbrk_r>:
 8007e4c:	b538      	push	{r3, r4, r5, lr}
 8007e4e:	2300      	movs	r3, #0
 8007e50:	4d05      	ldr	r5, [pc, #20]	; (8007e68 <_sbrk_r+0x1c>)
 8007e52:	4604      	mov	r4, r0
 8007e54:	4608      	mov	r0, r1
 8007e56:	602b      	str	r3, [r5, #0]
 8007e58:	f7fd fec6 	bl	8005be8 <_sbrk>
 8007e5c:	1c43      	adds	r3, r0, #1
 8007e5e:	d102      	bne.n	8007e66 <_sbrk_r+0x1a>
 8007e60:	682b      	ldr	r3, [r5, #0]
 8007e62:	b103      	cbz	r3, 8007e66 <_sbrk_r+0x1a>
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	bd38      	pop	{r3, r4, r5, pc}
 8007e68:	20000544 	.word	0x20000544

08007e6c <abort>:
 8007e6c:	2006      	movs	r0, #6
 8007e6e:	b508      	push	{r3, lr}
 8007e70:	f000 fb96 	bl	80085a0 <raise>
 8007e74:	2001      	movs	r0, #1
 8007e76:	f7fd fe43 	bl	8005b00 <_exit>

08007e7a <__sfputc_r>:
 8007e7a:	6893      	ldr	r3, [r2, #8]
 8007e7c:	b410      	push	{r4}
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	6093      	str	r3, [r2, #8]
 8007e84:	da07      	bge.n	8007e96 <__sfputc_r+0x1c>
 8007e86:	6994      	ldr	r4, [r2, #24]
 8007e88:	42a3      	cmp	r3, r4
 8007e8a:	db01      	blt.n	8007e90 <__sfputc_r+0x16>
 8007e8c:	290a      	cmp	r1, #10
 8007e8e:	d102      	bne.n	8007e96 <__sfputc_r+0x1c>
 8007e90:	bc10      	pop	{r4}
 8007e92:	f000 bac7 	b.w	8008424 <__swbuf_r>
 8007e96:	6813      	ldr	r3, [r2, #0]
 8007e98:	1c58      	adds	r0, r3, #1
 8007e9a:	6010      	str	r0, [r2, #0]
 8007e9c:	7019      	strb	r1, [r3, #0]
 8007e9e:	4608      	mov	r0, r1
 8007ea0:	bc10      	pop	{r4}
 8007ea2:	4770      	bx	lr

08007ea4 <__sfputs_r>:
 8007ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea6:	4606      	mov	r6, r0
 8007ea8:	460f      	mov	r7, r1
 8007eaa:	4614      	mov	r4, r2
 8007eac:	18d5      	adds	r5, r2, r3
 8007eae:	42ac      	cmp	r4, r5
 8007eb0:	d101      	bne.n	8007eb6 <__sfputs_r+0x12>
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	e007      	b.n	8007ec6 <__sfputs_r+0x22>
 8007eb6:	463a      	mov	r2, r7
 8007eb8:	4630      	mov	r0, r6
 8007eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ebe:	f7ff ffdc 	bl	8007e7a <__sfputc_r>
 8007ec2:	1c43      	adds	r3, r0, #1
 8007ec4:	d1f3      	bne.n	8007eae <__sfputs_r+0xa>
 8007ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ec8 <_vfiprintf_r>:
 8007ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ecc:	460d      	mov	r5, r1
 8007ece:	4614      	mov	r4, r2
 8007ed0:	4698      	mov	r8, r3
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	b09d      	sub	sp, #116	; 0x74
 8007ed6:	b118      	cbz	r0, 8007ee0 <_vfiprintf_r+0x18>
 8007ed8:	6a03      	ldr	r3, [r0, #32]
 8007eda:	b90b      	cbnz	r3, 8007ee0 <_vfiprintf_r+0x18>
 8007edc:	f7ff fcea 	bl	80078b4 <__sinit>
 8007ee0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ee2:	07d9      	lsls	r1, r3, #31
 8007ee4:	d405      	bmi.n	8007ef2 <_vfiprintf_r+0x2a>
 8007ee6:	89ab      	ldrh	r3, [r5, #12]
 8007ee8:	059a      	lsls	r2, r3, #22
 8007eea:	d402      	bmi.n	8007ef2 <_vfiprintf_r+0x2a>
 8007eec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007eee:	f7ff fdd4 	bl	8007a9a <__retarget_lock_acquire_recursive>
 8007ef2:	89ab      	ldrh	r3, [r5, #12]
 8007ef4:	071b      	lsls	r3, r3, #28
 8007ef6:	d501      	bpl.n	8007efc <_vfiprintf_r+0x34>
 8007ef8:	692b      	ldr	r3, [r5, #16]
 8007efa:	b99b      	cbnz	r3, 8007f24 <_vfiprintf_r+0x5c>
 8007efc:	4629      	mov	r1, r5
 8007efe:	4630      	mov	r0, r6
 8007f00:	f000 face 	bl	80084a0 <__swsetup_r>
 8007f04:	b170      	cbz	r0, 8007f24 <_vfiprintf_r+0x5c>
 8007f06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f08:	07dc      	lsls	r4, r3, #31
 8007f0a:	d504      	bpl.n	8007f16 <_vfiprintf_r+0x4e>
 8007f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f10:	b01d      	add	sp, #116	; 0x74
 8007f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f16:	89ab      	ldrh	r3, [r5, #12]
 8007f18:	0598      	lsls	r0, r3, #22
 8007f1a:	d4f7      	bmi.n	8007f0c <_vfiprintf_r+0x44>
 8007f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f1e:	f7ff fdbd 	bl	8007a9c <__retarget_lock_release_recursive>
 8007f22:	e7f3      	b.n	8007f0c <_vfiprintf_r+0x44>
 8007f24:	2300      	movs	r3, #0
 8007f26:	9309      	str	r3, [sp, #36]	; 0x24
 8007f28:	2320      	movs	r3, #32
 8007f2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f2e:	2330      	movs	r3, #48	; 0x30
 8007f30:	f04f 0901 	mov.w	r9, #1
 8007f34:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f38:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80080e8 <_vfiprintf_r+0x220>
 8007f3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f40:	4623      	mov	r3, r4
 8007f42:	469a      	mov	sl, r3
 8007f44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f48:	b10a      	cbz	r2, 8007f4e <_vfiprintf_r+0x86>
 8007f4a:	2a25      	cmp	r2, #37	; 0x25
 8007f4c:	d1f9      	bne.n	8007f42 <_vfiprintf_r+0x7a>
 8007f4e:	ebba 0b04 	subs.w	fp, sl, r4
 8007f52:	d00b      	beq.n	8007f6c <_vfiprintf_r+0xa4>
 8007f54:	465b      	mov	r3, fp
 8007f56:	4622      	mov	r2, r4
 8007f58:	4629      	mov	r1, r5
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f7ff ffa2 	bl	8007ea4 <__sfputs_r>
 8007f60:	3001      	adds	r0, #1
 8007f62:	f000 80a9 	beq.w	80080b8 <_vfiprintf_r+0x1f0>
 8007f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f68:	445a      	add	r2, fp
 8007f6a:	9209      	str	r2, [sp, #36]	; 0x24
 8007f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 80a1 	beq.w	80080b8 <_vfiprintf_r+0x1f0>
 8007f76:	2300      	movs	r3, #0
 8007f78:	f04f 32ff 	mov.w	r2, #4294967295
 8007f7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f80:	f10a 0a01 	add.w	sl, sl, #1
 8007f84:	9304      	str	r3, [sp, #16]
 8007f86:	9307      	str	r3, [sp, #28]
 8007f88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f8c:	931a      	str	r3, [sp, #104]	; 0x68
 8007f8e:	4654      	mov	r4, sl
 8007f90:	2205      	movs	r2, #5
 8007f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f96:	4854      	ldr	r0, [pc, #336]	; (80080e8 <_vfiprintf_r+0x220>)
 8007f98:	f000 fb1e 	bl	80085d8 <memchr>
 8007f9c:	9a04      	ldr	r2, [sp, #16]
 8007f9e:	b9d8      	cbnz	r0, 8007fd8 <_vfiprintf_r+0x110>
 8007fa0:	06d1      	lsls	r1, r2, #27
 8007fa2:	bf44      	itt	mi
 8007fa4:	2320      	movmi	r3, #32
 8007fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007faa:	0713      	lsls	r3, r2, #28
 8007fac:	bf44      	itt	mi
 8007fae:	232b      	movmi	r3, #43	; 0x2b
 8007fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8007fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8007fba:	d015      	beq.n	8007fe8 <_vfiprintf_r+0x120>
 8007fbc:	4654      	mov	r4, sl
 8007fbe:	2000      	movs	r0, #0
 8007fc0:	f04f 0c0a 	mov.w	ip, #10
 8007fc4:	9a07      	ldr	r2, [sp, #28]
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fcc:	3b30      	subs	r3, #48	; 0x30
 8007fce:	2b09      	cmp	r3, #9
 8007fd0:	d94d      	bls.n	800806e <_vfiprintf_r+0x1a6>
 8007fd2:	b1b0      	cbz	r0, 8008002 <_vfiprintf_r+0x13a>
 8007fd4:	9207      	str	r2, [sp, #28]
 8007fd6:	e014      	b.n	8008002 <_vfiprintf_r+0x13a>
 8007fd8:	eba0 0308 	sub.w	r3, r0, r8
 8007fdc:	fa09 f303 	lsl.w	r3, r9, r3
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	46a2      	mov	sl, r4
 8007fe4:	9304      	str	r3, [sp, #16]
 8007fe6:	e7d2      	b.n	8007f8e <_vfiprintf_r+0xc6>
 8007fe8:	9b03      	ldr	r3, [sp, #12]
 8007fea:	1d19      	adds	r1, r3, #4
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	9103      	str	r1, [sp, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	bfbb      	ittet	lt
 8007ff4:	425b      	neglt	r3, r3
 8007ff6:	f042 0202 	orrlt.w	r2, r2, #2
 8007ffa:	9307      	strge	r3, [sp, #28]
 8007ffc:	9307      	strlt	r3, [sp, #28]
 8007ffe:	bfb8      	it	lt
 8008000:	9204      	strlt	r2, [sp, #16]
 8008002:	7823      	ldrb	r3, [r4, #0]
 8008004:	2b2e      	cmp	r3, #46	; 0x2e
 8008006:	d10c      	bne.n	8008022 <_vfiprintf_r+0x15a>
 8008008:	7863      	ldrb	r3, [r4, #1]
 800800a:	2b2a      	cmp	r3, #42	; 0x2a
 800800c:	d134      	bne.n	8008078 <_vfiprintf_r+0x1b0>
 800800e:	9b03      	ldr	r3, [sp, #12]
 8008010:	3402      	adds	r4, #2
 8008012:	1d1a      	adds	r2, r3, #4
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	9203      	str	r2, [sp, #12]
 8008018:	2b00      	cmp	r3, #0
 800801a:	bfb8      	it	lt
 800801c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008020:	9305      	str	r3, [sp, #20]
 8008022:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80080ec <_vfiprintf_r+0x224>
 8008026:	2203      	movs	r2, #3
 8008028:	4650      	mov	r0, sl
 800802a:	7821      	ldrb	r1, [r4, #0]
 800802c:	f000 fad4 	bl	80085d8 <memchr>
 8008030:	b138      	cbz	r0, 8008042 <_vfiprintf_r+0x17a>
 8008032:	2240      	movs	r2, #64	; 0x40
 8008034:	9b04      	ldr	r3, [sp, #16]
 8008036:	eba0 000a 	sub.w	r0, r0, sl
 800803a:	4082      	lsls	r2, r0
 800803c:	4313      	orrs	r3, r2
 800803e:	3401      	adds	r4, #1
 8008040:	9304      	str	r3, [sp, #16]
 8008042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008046:	2206      	movs	r2, #6
 8008048:	4829      	ldr	r0, [pc, #164]	; (80080f0 <_vfiprintf_r+0x228>)
 800804a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800804e:	f000 fac3 	bl	80085d8 <memchr>
 8008052:	2800      	cmp	r0, #0
 8008054:	d03f      	beq.n	80080d6 <_vfiprintf_r+0x20e>
 8008056:	4b27      	ldr	r3, [pc, #156]	; (80080f4 <_vfiprintf_r+0x22c>)
 8008058:	bb1b      	cbnz	r3, 80080a2 <_vfiprintf_r+0x1da>
 800805a:	9b03      	ldr	r3, [sp, #12]
 800805c:	3307      	adds	r3, #7
 800805e:	f023 0307 	bic.w	r3, r3, #7
 8008062:	3308      	adds	r3, #8
 8008064:	9303      	str	r3, [sp, #12]
 8008066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008068:	443b      	add	r3, r7
 800806a:	9309      	str	r3, [sp, #36]	; 0x24
 800806c:	e768      	b.n	8007f40 <_vfiprintf_r+0x78>
 800806e:	460c      	mov	r4, r1
 8008070:	2001      	movs	r0, #1
 8008072:	fb0c 3202 	mla	r2, ip, r2, r3
 8008076:	e7a6      	b.n	8007fc6 <_vfiprintf_r+0xfe>
 8008078:	2300      	movs	r3, #0
 800807a:	f04f 0c0a 	mov.w	ip, #10
 800807e:	4619      	mov	r1, r3
 8008080:	3401      	adds	r4, #1
 8008082:	9305      	str	r3, [sp, #20]
 8008084:	4620      	mov	r0, r4
 8008086:	f810 2b01 	ldrb.w	r2, [r0], #1
 800808a:	3a30      	subs	r2, #48	; 0x30
 800808c:	2a09      	cmp	r2, #9
 800808e:	d903      	bls.n	8008098 <_vfiprintf_r+0x1d0>
 8008090:	2b00      	cmp	r3, #0
 8008092:	d0c6      	beq.n	8008022 <_vfiprintf_r+0x15a>
 8008094:	9105      	str	r1, [sp, #20]
 8008096:	e7c4      	b.n	8008022 <_vfiprintf_r+0x15a>
 8008098:	4604      	mov	r4, r0
 800809a:	2301      	movs	r3, #1
 800809c:	fb0c 2101 	mla	r1, ip, r1, r2
 80080a0:	e7f0      	b.n	8008084 <_vfiprintf_r+0x1bc>
 80080a2:	ab03      	add	r3, sp, #12
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	462a      	mov	r2, r5
 80080a8:	4630      	mov	r0, r6
 80080aa:	4b13      	ldr	r3, [pc, #76]	; (80080f8 <_vfiprintf_r+0x230>)
 80080ac:	a904      	add	r1, sp, #16
 80080ae:	f3af 8000 	nop.w
 80080b2:	4607      	mov	r7, r0
 80080b4:	1c78      	adds	r0, r7, #1
 80080b6:	d1d6      	bne.n	8008066 <_vfiprintf_r+0x19e>
 80080b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080ba:	07d9      	lsls	r1, r3, #31
 80080bc:	d405      	bmi.n	80080ca <_vfiprintf_r+0x202>
 80080be:	89ab      	ldrh	r3, [r5, #12]
 80080c0:	059a      	lsls	r2, r3, #22
 80080c2:	d402      	bmi.n	80080ca <_vfiprintf_r+0x202>
 80080c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080c6:	f7ff fce9 	bl	8007a9c <__retarget_lock_release_recursive>
 80080ca:	89ab      	ldrh	r3, [r5, #12]
 80080cc:	065b      	lsls	r3, r3, #25
 80080ce:	f53f af1d 	bmi.w	8007f0c <_vfiprintf_r+0x44>
 80080d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080d4:	e71c      	b.n	8007f10 <_vfiprintf_r+0x48>
 80080d6:	ab03      	add	r3, sp, #12
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	462a      	mov	r2, r5
 80080dc:	4630      	mov	r0, r6
 80080de:	4b06      	ldr	r3, [pc, #24]	; (80080f8 <_vfiprintf_r+0x230>)
 80080e0:	a904      	add	r1, sp, #16
 80080e2:	f000 f87d 	bl	80081e0 <_printf_i>
 80080e6:	e7e4      	b.n	80080b2 <_vfiprintf_r+0x1ea>
 80080e8:	080105f9 	.word	0x080105f9
 80080ec:	080105ff 	.word	0x080105ff
 80080f0:	08010603 	.word	0x08010603
 80080f4:	00000000 	.word	0x00000000
 80080f8:	08007ea5 	.word	0x08007ea5

080080fc <_printf_common>:
 80080fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008100:	4616      	mov	r6, r2
 8008102:	4699      	mov	r9, r3
 8008104:	688a      	ldr	r2, [r1, #8]
 8008106:	690b      	ldr	r3, [r1, #16]
 8008108:	4607      	mov	r7, r0
 800810a:	4293      	cmp	r3, r2
 800810c:	bfb8      	it	lt
 800810e:	4613      	movlt	r3, r2
 8008110:	6033      	str	r3, [r6, #0]
 8008112:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008116:	460c      	mov	r4, r1
 8008118:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800811c:	b10a      	cbz	r2, 8008122 <_printf_common+0x26>
 800811e:	3301      	adds	r3, #1
 8008120:	6033      	str	r3, [r6, #0]
 8008122:	6823      	ldr	r3, [r4, #0]
 8008124:	0699      	lsls	r1, r3, #26
 8008126:	bf42      	ittt	mi
 8008128:	6833      	ldrmi	r3, [r6, #0]
 800812a:	3302      	addmi	r3, #2
 800812c:	6033      	strmi	r3, [r6, #0]
 800812e:	6825      	ldr	r5, [r4, #0]
 8008130:	f015 0506 	ands.w	r5, r5, #6
 8008134:	d106      	bne.n	8008144 <_printf_common+0x48>
 8008136:	f104 0a19 	add.w	sl, r4, #25
 800813a:	68e3      	ldr	r3, [r4, #12]
 800813c:	6832      	ldr	r2, [r6, #0]
 800813e:	1a9b      	subs	r3, r3, r2
 8008140:	42ab      	cmp	r3, r5
 8008142:	dc2b      	bgt.n	800819c <_printf_common+0xa0>
 8008144:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008148:	1e13      	subs	r3, r2, #0
 800814a:	6822      	ldr	r2, [r4, #0]
 800814c:	bf18      	it	ne
 800814e:	2301      	movne	r3, #1
 8008150:	0692      	lsls	r2, r2, #26
 8008152:	d430      	bmi.n	80081b6 <_printf_common+0xba>
 8008154:	4649      	mov	r1, r9
 8008156:	4638      	mov	r0, r7
 8008158:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800815c:	47c0      	blx	r8
 800815e:	3001      	adds	r0, #1
 8008160:	d023      	beq.n	80081aa <_printf_common+0xae>
 8008162:	6823      	ldr	r3, [r4, #0]
 8008164:	6922      	ldr	r2, [r4, #16]
 8008166:	f003 0306 	and.w	r3, r3, #6
 800816a:	2b04      	cmp	r3, #4
 800816c:	bf14      	ite	ne
 800816e:	2500      	movne	r5, #0
 8008170:	6833      	ldreq	r3, [r6, #0]
 8008172:	f04f 0600 	mov.w	r6, #0
 8008176:	bf08      	it	eq
 8008178:	68e5      	ldreq	r5, [r4, #12]
 800817a:	f104 041a 	add.w	r4, r4, #26
 800817e:	bf08      	it	eq
 8008180:	1aed      	subeq	r5, r5, r3
 8008182:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008186:	bf08      	it	eq
 8008188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800818c:	4293      	cmp	r3, r2
 800818e:	bfc4      	itt	gt
 8008190:	1a9b      	subgt	r3, r3, r2
 8008192:	18ed      	addgt	r5, r5, r3
 8008194:	42b5      	cmp	r5, r6
 8008196:	d11a      	bne.n	80081ce <_printf_common+0xd2>
 8008198:	2000      	movs	r0, #0
 800819a:	e008      	b.n	80081ae <_printf_common+0xb2>
 800819c:	2301      	movs	r3, #1
 800819e:	4652      	mov	r2, sl
 80081a0:	4649      	mov	r1, r9
 80081a2:	4638      	mov	r0, r7
 80081a4:	47c0      	blx	r8
 80081a6:	3001      	adds	r0, #1
 80081a8:	d103      	bne.n	80081b2 <_printf_common+0xb6>
 80081aa:	f04f 30ff 	mov.w	r0, #4294967295
 80081ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b2:	3501      	adds	r5, #1
 80081b4:	e7c1      	b.n	800813a <_printf_common+0x3e>
 80081b6:	2030      	movs	r0, #48	; 0x30
 80081b8:	18e1      	adds	r1, r4, r3
 80081ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081be:	1c5a      	adds	r2, r3, #1
 80081c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081c4:	4422      	add	r2, r4
 80081c6:	3302      	adds	r3, #2
 80081c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081cc:	e7c2      	b.n	8008154 <_printf_common+0x58>
 80081ce:	2301      	movs	r3, #1
 80081d0:	4622      	mov	r2, r4
 80081d2:	4649      	mov	r1, r9
 80081d4:	4638      	mov	r0, r7
 80081d6:	47c0      	blx	r8
 80081d8:	3001      	adds	r0, #1
 80081da:	d0e6      	beq.n	80081aa <_printf_common+0xae>
 80081dc:	3601      	adds	r6, #1
 80081de:	e7d9      	b.n	8008194 <_printf_common+0x98>

080081e0 <_printf_i>:
 80081e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081e4:	7e0f      	ldrb	r7, [r1, #24]
 80081e6:	4691      	mov	r9, r2
 80081e8:	2f78      	cmp	r7, #120	; 0x78
 80081ea:	4680      	mov	r8, r0
 80081ec:	460c      	mov	r4, r1
 80081ee:	469a      	mov	sl, r3
 80081f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081f6:	d807      	bhi.n	8008208 <_printf_i+0x28>
 80081f8:	2f62      	cmp	r7, #98	; 0x62
 80081fa:	d80a      	bhi.n	8008212 <_printf_i+0x32>
 80081fc:	2f00      	cmp	r7, #0
 80081fe:	f000 80d5 	beq.w	80083ac <_printf_i+0x1cc>
 8008202:	2f58      	cmp	r7, #88	; 0x58
 8008204:	f000 80c1 	beq.w	800838a <_printf_i+0x1aa>
 8008208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800820c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008210:	e03a      	b.n	8008288 <_printf_i+0xa8>
 8008212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008216:	2b15      	cmp	r3, #21
 8008218:	d8f6      	bhi.n	8008208 <_printf_i+0x28>
 800821a:	a101      	add	r1, pc, #4	; (adr r1, 8008220 <_printf_i+0x40>)
 800821c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008220:	08008279 	.word	0x08008279
 8008224:	0800828d 	.word	0x0800828d
 8008228:	08008209 	.word	0x08008209
 800822c:	08008209 	.word	0x08008209
 8008230:	08008209 	.word	0x08008209
 8008234:	08008209 	.word	0x08008209
 8008238:	0800828d 	.word	0x0800828d
 800823c:	08008209 	.word	0x08008209
 8008240:	08008209 	.word	0x08008209
 8008244:	08008209 	.word	0x08008209
 8008248:	08008209 	.word	0x08008209
 800824c:	08008393 	.word	0x08008393
 8008250:	080082b9 	.word	0x080082b9
 8008254:	0800834d 	.word	0x0800834d
 8008258:	08008209 	.word	0x08008209
 800825c:	08008209 	.word	0x08008209
 8008260:	080083b5 	.word	0x080083b5
 8008264:	08008209 	.word	0x08008209
 8008268:	080082b9 	.word	0x080082b9
 800826c:	08008209 	.word	0x08008209
 8008270:	08008209 	.word	0x08008209
 8008274:	08008355 	.word	0x08008355
 8008278:	682b      	ldr	r3, [r5, #0]
 800827a:	1d1a      	adds	r2, r3, #4
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	602a      	str	r2, [r5, #0]
 8008280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008288:	2301      	movs	r3, #1
 800828a:	e0a0      	b.n	80083ce <_printf_i+0x1ee>
 800828c:	6820      	ldr	r0, [r4, #0]
 800828e:	682b      	ldr	r3, [r5, #0]
 8008290:	0607      	lsls	r7, r0, #24
 8008292:	f103 0104 	add.w	r1, r3, #4
 8008296:	6029      	str	r1, [r5, #0]
 8008298:	d501      	bpl.n	800829e <_printf_i+0xbe>
 800829a:	681e      	ldr	r6, [r3, #0]
 800829c:	e003      	b.n	80082a6 <_printf_i+0xc6>
 800829e:	0646      	lsls	r6, r0, #25
 80082a0:	d5fb      	bpl.n	800829a <_printf_i+0xba>
 80082a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80082a6:	2e00      	cmp	r6, #0
 80082a8:	da03      	bge.n	80082b2 <_printf_i+0xd2>
 80082aa:	232d      	movs	r3, #45	; 0x2d
 80082ac:	4276      	negs	r6, r6
 80082ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082b2:	230a      	movs	r3, #10
 80082b4:	4859      	ldr	r0, [pc, #356]	; (800841c <_printf_i+0x23c>)
 80082b6:	e012      	b.n	80082de <_printf_i+0xfe>
 80082b8:	682b      	ldr	r3, [r5, #0]
 80082ba:	6820      	ldr	r0, [r4, #0]
 80082bc:	1d19      	adds	r1, r3, #4
 80082be:	6029      	str	r1, [r5, #0]
 80082c0:	0605      	lsls	r5, r0, #24
 80082c2:	d501      	bpl.n	80082c8 <_printf_i+0xe8>
 80082c4:	681e      	ldr	r6, [r3, #0]
 80082c6:	e002      	b.n	80082ce <_printf_i+0xee>
 80082c8:	0641      	lsls	r1, r0, #25
 80082ca:	d5fb      	bpl.n	80082c4 <_printf_i+0xe4>
 80082cc:	881e      	ldrh	r6, [r3, #0]
 80082ce:	2f6f      	cmp	r7, #111	; 0x6f
 80082d0:	bf0c      	ite	eq
 80082d2:	2308      	moveq	r3, #8
 80082d4:	230a      	movne	r3, #10
 80082d6:	4851      	ldr	r0, [pc, #324]	; (800841c <_printf_i+0x23c>)
 80082d8:	2100      	movs	r1, #0
 80082da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082de:	6865      	ldr	r5, [r4, #4]
 80082e0:	2d00      	cmp	r5, #0
 80082e2:	bfa8      	it	ge
 80082e4:	6821      	ldrge	r1, [r4, #0]
 80082e6:	60a5      	str	r5, [r4, #8]
 80082e8:	bfa4      	itt	ge
 80082ea:	f021 0104 	bicge.w	r1, r1, #4
 80082ee:	6021      	strge	r1, [r4, #0]
 80082f0:	b90e      	cbnz	r6, 80082f6 <_printf_i+0x116>
 80082f2:	2d00      	cmp	r5, #0
 80082f4:	d04b      	beq.n	800838e <_printf_i+0x1ae>
 80082f6:	4615      	mov	r5, r2
 80082f8:	fbb6 f1f3 	udiv	r1, r6, r3
 80082fc:	fb03 6711 	mls	r7, r3, r1, r6
 8008300:	5dc7      	ldrb	r7, [r0, r7]
 8008302:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008306:	4637      	mov	r7, r6
 8008308:	42bb      	cmp	r3, r7
 800830a:	460e      	mov	r6, r1
 800830c:	d9f4      	bls.n	80082f8 <_printf_i+0x118>
 800830e:	2b08      	cmp	r3, #8
 8008310:	d10b      	bne.n	800832a <_printf_i+0x14a>
 8008312:	6823      	ldr	r3, [r4, #0]
 8008314:	07de      	lsls	r6, r3, #31
 8008316:	d508      	bpl.n	800832a <_printf_i+0x14a>
 8008318:	6923      	ldr	r3, [r4, #16]
 800831a:	6861      	ldr	r1, [r4, #4]
 800831c:	4299      	cmp	r1, r3
 800831e:	bfde      	ittt	le
 8008320:	2330      	movle	r3, #48	; 0x30
 8008322:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008326:	f105 35ff 	addle.w	r5, r5, #4294967295
 800832a:	1b52      	subs	r2, r2, r5
 800832c:	6122      	str	r2, [r4, #16]
 800832e:	464b      	mov	r3, r9
 8008330:	4621      	mov	r1, r4
 8008332:	4640      	mov	r0, r8
 8008334:	f8cd a000 	str.w	sl, [sp]
 8008338:	aa03      	add	r2, sp, #12
 800833a:	f7ff fedf 	bl	80080fc <_printf_common>
 800833e:	3001      	adds	r0, #1
 8008340:	d14a      	bne.n	80083d8 <_printf_i+0x1f8>
 8008342:	f04f 30ff 	mov.w	r0, #4294967295
 8008346:	b004      	add	sp, #16
 8008348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800834c:	6823      	ldr	r3, [r4, #0]
 800834e:	f043 0320 	orr.w	r3, r3, #32
 8008352:	6023      	str	r3, [r4, #0]
 8008354:	2778      	movs	r7, #120	; 0x78
 8008356:	4832      	ldr	r0, [pc, #200]	; (8008420 <_printf_i+0x240>)
 8008358:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800835c:	6823      	ldr	r3, [r4, #0]
 800835e:	6829      	ldr	r1, [r5, #0]
 8008360:	061f      	lsls	r7, r3, #24
 8008362:	f851 6b04 	ldr.w	r6, [r1], #4
 8008366:	d402      	bmi.n	800836e <_printf_i+0x18e>
 8008368:	065f      	lsls	r7, r3, #25
 800836a:	bf48      	it	mi
 800836c:	b2b6      	uxthmi	r6, r6
 800836e:	07df      	lsls	r7, r3, #31
 8008370:	bf48      	it	mi
 8008372:	f043 0320 	orrmi.w	r3, r3, #32
 8008376:	6029      	str	r1, [r5, #0]
 8008378:	bf48      	it	mi
 800837a:	6023      	strmi	r3, [r4, #0]
 800837c:	b91e      	cbnz	r6, 8008386 <_printf_i+0x1a6>
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	f023 0320 	bic.w	r3, r3, #32
 8008384:	6023      	str	r3, [r4, #0]
 8008386:	2310      	movs	r3, #16
 8008388:	e7a6      	b.n	80082d8 <_printf_i+0xf8>
 800838a:	4824      	ldr	r0, [pc, #144]	; (800841c <_printf_i+0x23c>)
 800838c:	e7e4      	b.n	8008358 <_printf_i+0x178>
 800838e:	4615      	mov	r5, r2
 8008390:	e7bd      	b.n	800830e <_printf_i+0x12e>
 8008392:	682b      	ldr	r3, [r5, #0]
 8008394:	6826      	ldr	r6, [r4, #0]
 8008396:	1d18      	adds	r0, r3, #4
 8008398:	6961      	ldr	r1, [r4, #20]
 800839a:	6028      	str	r0, [r5, #0]
 800839c:	0635      	lsls	r5, r6, #24
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	d501      	bpl.n	80083a6 <_printf_i+0x1c6>
 80083a2:	6019      	str	r1, [r3, #0]
 80083a4:	e002      	b.n	80083ac <_printf_i+0x1cc>
 80083a6:	0670      	lsls	r0, r6, #25
 80083a8:	d5fb      	bpl.n	80083a2 <_printf_i+0x1c2>
 80083aa:	8019      	strh	r1, [r3, #0]
 80083ac:	2300      	movs	r3, #0
 80083ae:	4615      	mov	r5, r2
 80083b0:	6123      	str	r3, [r4, #16]
 80083b2:	e7bc      	b.n	800832e <_printf_i+0x14e>
 80083b4:	682b      	ldr	r3, [r5, #0]
 80083b6:	2100      	movs	r1, #0
 80083b8:	1d1a      	adds	r2, r3, #4
 80083ba:	602a      	str	r2, [r5, #0]
 80083bc:	681d      	ldr	r5, [r3, #0]
 80083be:	6862      	ldr	r2, [r4, #4]
 80083c0:	4628      	mov	r0, r5
 80083c2:	f000 f909 	bl	80085d8 <memchr>
 80083c6:	b108      	cbz	r0, 80083cc <_printf_i+0x1ec>
 80083c8:	1b40      	subs	r0, r0, r5
 80083ca:	6060      	str	r0, [r4, #4]
 80083cc:	6863      	ldr	r3, [r4, #4]
 80083ce:	6123      	str	r3, [r4, #16]
 80083d0:	2300      	movs	r3, #0
 80083d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083d6:	e7aa      	b.n	800832e <_printf_i+0x14e>
 80083d8:	462a      	mov	r2, r5
 80083da:	4649      	mov	r1, r9
 80083dc:	4640      	mov	r0, r8
 80083de:	6923      	ldr	r3, [r4, #16]
 80083e0:	47d0      	blx	sl
 80083e2:	3001      	adds	r0, #1
 80083e4:	d0ad      	beq.n	8008342 <_printf_i+0x162>
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	079b      	lsls	r3, r3, #30
 80083ea:	d413      	bmi.n	8008414 <_printf_i+0x234>
 80083ec:	68e0      	ldr	r0, [r4, #12]
 80083ee:	9b03      	ldr	r3, [sp, #12]
 80083f0:	4298      	cmp	r0, r3
 80083f2:	bfb8      	it	lt
 80083f4:	4618      	movlt	r0, r3
 80083f6:	e7a6      	b.n	8008346 <_printf_i+0x166>
 80083f8:	2301      	movs	r3, #1
 80083fa:	4632      	mov	r2, r6
 80083fc:	4649      	mov	r1, r9
 80083fe:	4640      	mov	r0, r8
 8008400:	47d0      	blx	sl
 8008402:	3001      	adds	r0, #1
 8008404:	d09d      	beq.n	8008342 <_printf_i+0x162>
 8008406:	3501      	adds	r5, #1
 8008408:	68e3      	ldr	r3, [r4, #12]
 800840a:	9903      	ldr	r1, [sp, #12]
 800840c:	1a5b      	subs	r3, r3, r1
 800840e:	42ab      	cmp	r3, r5
 8008410:	dcf2      	bgt.n	80083f8 <_printf_i+0x218>
 8008412:	e7eb      	b.n	80083ec <_printf_i+0x20c>
 8008414:	2500      	movs	r5, #0
 8008416:	f104 0619 	add.w	r6, r4, #25
 800841a:	e7f5      	b.n	8008408 <_printf_i+0x228>
 800841c:	0801060a 	.word	0x0801060a
 8008420:	0801061b 	.word	0x0801061b

08008424 <__swbuf_r>:
 8008424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008426:	460e      	mov	r6, r1
 8008428:	4614      	mov	r4, r2
 800842a:	4605      	mov	r5, r0
 800842c:	b118      	cbz	r0, 8008436 <__swbuf_r+0x12>
 800842e:	6a03      	ldr	r3, [r0, #32]
 8008430:	b90b      	cbnz	r3, 8008436 <__swbuf_r+0x12>
 8008432:	f7ff fa3f 	bl	80078b4 <__sinit>
 8008436:	69a3      	ldr	r3, [r4, #24]
 8008438:	60a3      	str	r3, [r4, #8]
 800843a:	89a3      	ldrh	r3, [r4, #12]
 800843c:	071a      	lsls	r2, r3, #28
 800843e:	d525      	bpl.n	800848c <__swbuf_r+0x68>
 8008440:	6923      	ldr	r3, [r4, #16]
 8008442:	b31b      	cbz	r3, 800848c <__swbuf_r+0x68>
 8008444:	6823      	ldr	r3, [r4, #0]
 8008446:	6922      	ldr	r2, [r4, #16]
 8008448:	b2f6      	uxtb	r6, r6
 800844a:	1a98      	subs	r0, r3, r2
 800844c:	6963      	ldr	r3, [r4, #20]
 800844e:	4637      	mov	r7, r6
 8008450:	4283      	cmp	r3, r0
 8008452:	dc04      	bgt.n	800845e <__swbuf_r+0x3a>
 8008454:	4621      	mov	r1, r4
 8008456:	4628      	mov	r0, r5
 8008458:	f7ff fcbe 	bl	8007dd8 <_fflush_r>
 800845c:	b9e0      	cbnz	r0, 8008498 <__swbuf_r+0x74>
 800845e:	68a3      	ldr	r3, [r4, #8]
 8008460:	3b01      	subs	r3, #1
 8008462:	60a3      	str	r3, [r4, #8]
 8008464:	6823      	ldr	r3, [r4, #0]
 8008466:	1c5a      	adds	r2, r3, #1
 8008468:	6022      	str	r2, [r4, #0]
 800846a:	701e      	strb	r6, [r3, #0]
 800846c:	6962      	ldr	r2, [r4, #20]
 800846e:	1c43      	adds	r3, r0, #1
 8008470:	429a      	cmp	r2, r3
 8008472:	d004      	beq.n	800847e <__swbuf_r+0x5a>
 8008474:	89a3      	ldrh	r3, [r4, #12]
 8008476:	07db      	lsls	r3, r3, #31
 8008478:	d506      	bpl.n	8008488 <__swbuf_r+0x64>
 800847a:	2e0a      	cmp	r6, #10
 800847c:	d104      	bne.n	8008488 <__swbuf_r+0x64>
 800847e:	4621      	mov	r1, r4
 8008480:	4628      	mov	r0, r5
 8008482:	f7ff fca9 	bl	8007dd8 <_fflush_r>
 8008486:	b938      	cbnz	r0, 8008498 <__swbuf_r+0x74>
 8008488:	4638      	mov	r0, r7
 800848a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800848c:	4621      	mov	r1, r4
 800848e:	4628      	mov	r0, r5
 8008490:	f000 f806 	bl	80084a0 <__swsetup_r>
 8008494:	2800      	cmp	r0, #0
 8008496:	d0d5      	beq.n	8008444 <__swbuf_r+0x20>
 8008498:	f04f 37ff 	mov.w	r7, #4294967295
 800849c:	e7f4      	b.n	8008488 <__swbuf_r+0x64>
	...

080084a0 <__swsetup_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4b2a      	ldr	r3, [pc, #168]	; (800854c <__swsetup_r+0xac>)
 80084a4:	4605      	mov	r5, r0
 80084a6:	6818      	ldr	r0, [r3, #0]
 80084a8:	460c      	mov	r4, r1
 80084aa:	b118      	cbz	r0, 80084b4 <__swsetup_r+0x14>
 80084ac:	6a03      	ldr	r3, [r0, #32]
 80084ae:	b90b      	cbnz	r3, 80084b4 <__swsetup_r+0x14>
 80084b0:	f7ff fa00 	bl	80078b4 <__sinit>
 80084b4:	89a3      	ldrh	r3, [r4, #12]
 80084b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084ba:	0718      	lsls	r0, r3, #28
 80084bc:	d422      	bmi.n	8008504 <__swsetup_r+0x64>
 80084be:	06d9      	lsls	r1, r3, #27
 80084c0:	d407      	bmi.n	80084d2 <__swsetup_r+0x32>
 80084c2:	2309      	movs	r3, #9
 80084c4:	602b      	str	r3, [r5, #0]
 80084c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80084ca:	f04f 30ff 	mov.w	r0, #4294967295
 80084ce:	81a3      	strh	r3, [r4, #12]
 80084d0:	e034      	b.n	800853c <__swsetup_r+0x9c>
 80084d2:	0758      	lsls	r0, r3, #29
 80084d4:	d512      	bpl.n	80084fc <__swsetup_r+0x5c>
 80084d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084d8:	b141      	cbz	r1, 80084ec <__swsetup_r+0x4c>
 80084da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084de:	4299      	cmp	r1, r3
 80084e0:	d002      	beq.n	80084e8 <__swsetup_r+0x48>
 80084e2:	4628      	mov	r0, r5
 80084e4:	f7ff fafa 	bl	8007adc <_free_r>
 80084e8:	2300      	movs	r3, #0
 80084ea:	6363      	str	r3, [r4, #52]	; 0x34
 80084ec:	89a3      	ldrh	r3, [r4, #12]
 80084ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80084f2:	81a3      	strh	r3, [r4, #12]
 80084f4:	2300      	movs	r3, #0
 80084f6:	6063      	str	r3, [r4, #4]
 80084f8:	6923      	ldr	r3, [r4, #16]
 80084fa:	6023      	str	r3, [r4, #0]
 80084fc:	89a3      	ldrh	r3, [r4, #12]
 80084fe:	f043 0308 	orr.w	r3, r3, #8
 8008502:	81a3      	strh	r3, [r4, #12]
 8008504:	6923      	ldr	r3, [r4, #16]
 8008506:	b94b      	cbnz	r3, 800851c <__swsetup_r+0x7c>
 8008508:	89a3      	ldrh	r3, [r4, #12]
 800850a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800850e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008512:	d003      	beq.n	800851c <__swsetup_r+0x7c>
 8008514:	4621      	mov	r1, r4
 8008516:	4628      	mov	r0, r5
 8008518:	f000 f891 	bl	800863e <__smakebuf_r>
 800851c:	89a0      	ldrh	r0, [r4, #12]
 800851e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008522:	f010 0301 	ands.w	r3, r0, #1
 8008526:	d00a      	beq.n	800853e <__swsetup_r+0x9e>
 8008528:	2300      	movs	r3, #0
 800852a:	60a3      	str	r3, [r4, #8]
 800852c:	6963      	ldr	r3, [r4, #20]
 800852e:	425b      	negs	r3, r3
 8008530:	61a3      	str	r3, [r4, #24]
 8008532:	6923      	ldr	r3, [r4, #16]
 8008534:	b943      	cbnz	r3, 8008548 <__swsetup_r+0xa8>
 8008536:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800853a:	d1c4      	bne.n	80084c6 <__swsetup_r+0x26>
 800853c:	bd38      	pop	{r3, r4, r5, pc}
 800853e:	0781      	lsls	r1, r0, #30
 8008540:	bf58      	it	pl
 8008542:	6963      	ldrpl	r3, [r4, #20]
 8008544:	60a3      	str	r3, [r4, #8]
 8008546:	e7f4      	b.n	8008532 <__swsetup_r+0x92>
 8008548:	2000      	movs	r0, #0
 800854a:	e7f7      	b.n	800853c <__swsetup_r+0x9c>
 800854c:	20000120 	.word	0x20000120

08008550 <_raise_r>:
 8008550:	291f      	cmp	r1, #31
 8008552:	b538      	push	{r3, r4, r5, lr}
 8008554:	4604      	mov	r4, r0
 8008556:	460d      	mov	r5, r1
 8008558:	d904      	bls.n	8008564 <_raise_r+0x14>
 800855a:	2316      	movs	r3, #22
 800855c:	6003      	str	r3, [r0, #0]
 800855e:	f04f 30ff 	mov.w	r0, #4294967295
 8008562:	bd38      	pop	{r3, r4, r5, pc}
 8008564:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008566:	b112      	cbz	r2, 800856e <_raise_r+0x1e>
 8008568:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800856c:	b94b      	cbnz	r3, 8008582 <_raise_r+0x32>
 800856e:	4620      	mov	r0, r4
 8008570:	f000 f830 	bl	80085d4 <_getpid_r>
 8008574:	462a      	mov	r2, r5
 8008576:	4601      	mov	r1, r0
 8008578:	4620      	mov	r0, r4
 800857a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800857e:	f000 b817 	b.w	80085b0 <_kill_r>
 8008582:	2b01      	cmp	r3, #1
 8008584:	d00a      	beq.n	800859c <_raise_r+0x4c>
 8008586:	1c59      	adds	r1, r3, #1
 8008588:	d103      	bne.n	8008592 <_raise_r+0x42>
 800858a:	2316      	movs	r3, #22
 800858c:	6003      	str	r3, [r0, #0]
 800858e:	2001      	movs	r0, #1
 8008590:	e7e7      	b.n	8008562 <_raise_r+0x12>
 8008592:	2400      	movs	r4, #0
 8008594:	4628      	mov	r0, r5
 8008596:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800859a:	4798      	blx	r3
 800859c:	2000      	movs	r0, #0
 800859e:	e7e0      	b.n	8008562 <_raise_r+0x12>

080085a0 <raise>:
 80085a0:	4b02      	ldr	r3, [pc, #8]	; (80085ac <raise+0xc>)
 80085a2:	4601      	mov	r1, r0
 80085a4:	6818      	ldr	r0, [r3, #0]
 80085a6:	f7ff bfd3 	b.w	8008550 <_raise_r>
 80085aa:	bf00      	nop
 80085ac:	20000120 	.word	0x20000120

080085b0 <_kill_r>:
 80085b0:	b538      	push	{r3, r4, r5, lr}
 80085b2:	2300      	movs	r3, #0
 80085b4:	4d06      	ldr	r5, [pc, #24]	; (80085d0 <_kill_r+0x20>)
 80085b6:	4604      	mov	r4, r0
 80085b8:	4608      	mov	r0, r1
 80085ba:	4611      	mov	r1, r2
 80085bc:	602b      	str	r3, [r5, #0]
 80085be:	f7fd fa8f 	bl	8005ae0 <_kill>
 80085c2:	1c43      	adds	r3, r0, #1
 80085c4:	d102      	bne.n	80085cc <_kill_r+0x1c>
 80085c6:	682b      	ldr	r3, [r5, #0]
 80085c8:	b103      	cbz	r3, 80085cc <_kill_r+0x1c>
 80085ca:	6023      	str	r3, [r4, #0]
 80085cc:	bd38      	pop	{r3, r4, r5, pc}
 80085ce:	bf00      	nop
 80085d0:	20000544 	.word	0x20000544

080085d4 <_getpid_r>:
 80085d4:	f7fd ba7d 	b.w	8005ad2 <_getpid>

080085d8 <memchr>:
 80085d8:	4603      	mov	r3, r0
 80085da:	b510      	push	{r4, lr}
 80085dc:	b2c9      	uxtb	r1, r1
 80085de:	4402      	add	r2, r0
 80085e0:	4293      	cmp	r3, r2
 80085e2:	4618      	mov	r0, r3
 80085e4:	d101      	bne.n	80085ea <memchr+0x12>
 80085e6:	2000      	movs	r0, #0
 80085e8:	e003      	b.n	80085f2 <memchr+0x1a>
 80085ea:	7804      	ldrb	r4, [r0, #0]
 80085ec:	3301      	adds	r3, #1
 80085ee:	428c      	cmp	r4, r1
 80085f0:	d1f6      	bne.n	80085e0 <memchr+0x8>
 80085f2:	bd10      	pop	{r4, pc}

080085f4 <__swhatbuf_r>:
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	460c      	mov	r4, r1
 80085f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085fc:	4615      	mov	r5, r2
 80085fe:	2900      	cmp	r1, #0
 8008600:	461e      	mov	r6, r3
 8008602:	b096      	sub	sp, #88	; 0x58
 8008604:	da0c      	bge.n	8008620 <__swhatbuf_r+0x2c>
 8008606:	89a3      	ldrh	r3, [r4, #12]
 8008608:	2100      	movs	r1, #0
 800860a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800860e:	bf0c      	ite	eq
 8008610:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008614:	2340      	movne	r3, #64	; 0x40
 8008616:	2000      	movs	r0, #0
 8008618:	6031      	str	r1, [r6, #0]
 800861a:	602b      	str	r3, [r5, #0]
 800861c:	b016      	add	sp, #88	; 0x58
 800861e:	bd70      	pop	{r4, r5, r6, pc}
 8008620:	466a      	mov	r2, sp
 8008622:	f000 f849 	bl	80086b8 <_fstat_r>
 8008626:	2800      	cmp	r0, #0
 8008628:	dbed      	blt.n	8008606 <__swhatbuf_r+0x12>
 800862a:	9901      	ldr	r1, [sp, #4]
 800862c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008630:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008634:	4259      	negs	r1, r3
 8008636:	4159      	adcs	r1, r3
 8008638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800863c:	e7eb      	b.n	8008616 <__swhatbuf_r+0x22>

0800863e <__smakebuf_r>:
 800863e:	898b      	ldrh	r3, [r1, #12]
 8008640:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008642:	079d      	lsls	r5, r3, #30
 8008644:	4606      	mov	r6, r0
 8008646:	460c      	mov	r4, r1
 8008648:	d507      	bpl.n	800865a <__smakebuf_r+0x1c>
 800864a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800864e:	6023      	str	r3, [r4, #0]
 8008650:	6123      	str	r3, [r4, #16]
 8008652:	2301      	movs	r3, #1
 8008654:	6163      	str	r3, [r4, #20]
 8008656:	b002      	add	sp, #8
 8008658:	bd70      	pop	{r4, r5, r6, pc}
 800865a:	466a      	mov	r2, sp
 800865c:	ab01      	add	r3, sp, #4
 800865e:	f7ff ffc9 	bl	80085f4 <__swhatbuf_r>
 8008662:	9900      	ldr	r1, [sp, #0]
 8008664:	4605      	mov	r5, r0
 8008666:	4630      	mov	r0, r6
 8008668:	f7ff faa8 	bl	8007bbc <_malloc_r>
 800866c:	b948      	cbnz	r0, 8008682 <__smakebuf_r+0x44>
 800866e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008672:	059a      	lsls	r2, r3, #22
 8008674:	d4ef      	bmi.n	8008656 <__smakebuf_r+0x18>
 8008676:	f023 0303 	bic.w	r3, r3, #3
 800867a:	f043 0302 	orr.w	r3, r3, #2
 800867e:	81a3      	strh	r3, [r4, #12]
 8008680:	e7e3      	b.n	800864a <__smakebuf_r+0xc>
 8008682:	89a3      	ldrh	r3, [r4, #12]
 8008684:	6020      	str	r0, [r4, #0]
 8008686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800868a:	81a3      	strh	r3, [r4, #12]
 800868c:	9b00      	ldr	r3, [sp, #0]
 800868e:	6120      	str	r0, [r4, #16]
 8008690:	6163      	str	r3, [r4, #20]
 8008692:	9b01      	ldr	r3, [sp, #4]
 8008694:	b15b      	cbz	r3, 80086ae <__smakebuf_r+0x70>
 8008696:	4630      	mov	r0, r6
 8008698:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800869c:	f000 f81e 	bl	80086dc <_isatty_r>
 80086a0:	b128      	cbz	r0, 80086ae <__smakebuf_r+0x70>
 80086a2:	89a3      	ldrh	r3, [r4, #12]
 80086a4:	f023 0303 	bic.w	r3, r3, #3
 80086a8:	f043 0301 	orr.w	r3, r3, #1
 80086ac:	81a3      	strh	r3, [r4, #12]
 80086ae:	89a3      	ldrh	r3, [r4, #12]
 80086b0:	431d      	orrs	r5, r3
 80086b2:	81a5      	strh	r5, [r4, #12]
 80086b4:	e7cf      	b.n	8008656 <__smakebuf_r+0x18>
	...

080086b8 <_fstat_r>:
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	2300      	movs	r3, #0
 80086bc:	4d06      	ldr	r5, [pc, #24]	; (80086d8 <_fstat_r+0x20>)
 80086be:	4604      	mov	r4, r0
 80086c0:	4608      	mov	r0, r1
 80086c2:	4611      	mov	r1, r2
 80086c4:	602b      	str	r3, [r5, #0]
 80086c6:	f7fd fa69 	bl	8005b9c <_fstat>
 80086ca:	1c43      	adds	r3, r0, #1
 80086cc:	d102      	bne.n	80086d4 <_fstat_r+0x1c>
 80086ce:	682b      	ldr	r3, [r5, #0]
 80086d0:	b103      	cbz	r3, 80086d4 <_fstat_r+0x1c>
 80086d2:	6023      	str	r3, [r4, #0]
 80086d4:	bd38      	pop	{r3, r4, r5, pc}
 80086d6:	bf00      	nop
 80086d8:	20000544 	.word	0x20000544

080086dc <_isatty_r>:
 80086dc:	b538      	push	{r3, r4, r5, lr}
 80086de:	2300      	movs	r3, #0
 80086e0:	4d05      	ldr	r5, [pc, #20]	; (80086f8 <_isatty_r+0x1c>)
 80086e2:	4604      	mov	r4, r0
 80086e4:	4608      	mov	r0, r1
 80086e6:	602b      	str	r3, [r5, #0]
 80086e8:	f7fd fa67 	bl	8005bba <_isatty>
 80086ec:	1c43      	adds	r3, r0, #1
 80086ee:	d102      	bne.n	80086f6 <_isatty_r+0x1a>
 80086f0:	682b      	ldr	r3, [r5, #0]
 80086f2:	b103      	cbz	r3, 80086f6 <_isatty_r+0x1a>
 80086f4:	6023      	str	r3, [r4, #0]
 80086f6:	bd38      	pop	{r3, r4, r5, pc}
 80086f8:	20000544 	.word	0x20000544

080086fc <_init>:
 80086fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fe:	bf00      	nop
 8008700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008702:	bc08      	pop	{r3}
 8008704:	469e      	mov	lr, r3
 8008706:	4770      	bx	lr

08008708 <_fini>:
 8008708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870a:	bf00      	nop
 800870c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800870e:	bc08      	pop	{r3}
 8008710:	469e      	mov	lr, r3
 8008712:	4770      	bx	lr
